<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Hi | World</title><link>http://king32783784.github.io/</link><description>李鹏的blog  &lt;a href="pages/about.html"&gt;更多...&lt;/a&gt;</description><lastBuildDate>Tue, 02 Aug 2016 00:00:00 +0800</lastBuildDate><item><title>LTP－kernel-syscalls-abort</title><link>http://king32783784.github.io/2016/08/02/LTP/</link><description>&lt;body&gt;&lt;p&gt;从本文开始，开始分析kernel部分的测试用例，该部分测试用例大部分为Ｃ语言编写，因此会穿插加入一定的Ｃ语言或unix环境编程的知识。&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/I0T0E4Y826.jpg" width="420"/&gt;&lt;/p&gt;
&lt;h4 id="abort"&gt;abort&lt;/h4&gt;
&lt;p&gt;设计说明&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fork child. Child出现abort,检查返回状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Core file大小的限制必须大于０&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abort&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数名: abort&lt;/p&gt;
&lt;p&gt;功 能: 异常终止一个进程&lt;/p&gt;
&lt;p&gt;用 法: void abort(void);&lt;/p&gt;
&lt;p&gt;abort()是使异常程序终止，同时发送SIGABRT信号给调用进程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;该函数不返回&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此函数将SIGABRT信号发送给调用进程（进程不应忽略此信号).ISO C规定，调用abort将向主机环境递送一个未成功终止的通知，其方法是调用raise(SIGABRT)函数。
ISO C要求若捕捉此信号而且相应信号处理程序返回，abort仍不会返回其调用者。如果捕捉到此信号，则信号处理程序不能返回的唯一方法是它调用exit、_exit、_Exit、longjmp或sigloogjmp.POSIX.1也说明
abort并不理会进程对此信号的阻塞和忽略。&lt;/p&gt;
&lt;p&gt;让进程捕捉SIGABRT的意图是：在进程终止之前由其执行所需的清理操作。如果进程并不在信号处理程序中终止自己，POSIX.1声明当信号处理程序返回时，abort终止该进程。&lt;/p&gt;
&lt;p&gt;ISO C针对此函数的规范将下列问题留由实现决定：　是否要冲洗输出流以及是否删除临时文件。POSIX.1的要求更进一步，要求如果abort调用终止进程，则它对所有打开标准I/O流的效果应当与进程终止前对每个流调用fclose相同。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;系统V早期的版本中，abort函数产生SIGIOT信号。更进一步，进程忽略此信号，或者捕捉它并从信号处理程序返回都是可能的，在返回情况下，abort返回到它的调用者。
4.3BSD产生SIGILL信号。在此之前，该函数解除对此信号的阻塞，将其配置恢复为SIG_DFL (终止并构造core文件)。这阻止一个进程忽略或捕捉此信号。
SVR4在产生此信号之前关闭所有I/O流。在另一方面，4.3+BSD则不做此操作。对于保护性的程序设计，如果希望刷新标准I/O流，则在调用abort之前要做这种操作。在err_dump函数中实现了这一点
因为大多数UNIX tmpfile(临时文件)的实现在创建该文件之后立即调用unlink，所以ANSI C关于临时文件的警告通常与我们无关。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;abort的POSIX.1实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="cm"&gt;/*POSIX.1风格的abort()实现*/&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;sigset_t&lt;/span&gt;    &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sigaction&lt;/span&gt;   &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Caller can't igore SIGABRT, if so reset to default.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;sigaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIG_IGN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sigaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="cm"&gt;/* flush all open stdio stream */&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Caller can't block SIGABRT; make sure it's unblocked.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
     &lt;span class="n"&gt;sigfillset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;sigdelset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* mask has only SIGABRT turned off */&lt;/span&gt;
     &lt;span class="n"&gt;sigprocmask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIG_SETMASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* send the signal */&lt;/span&gt;

     &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;      * if we're here, process caught SIGABRT and returned.&lt;/span&gt;
&lt;span class="cm"&gt;      */&lt;/span&gt;

     &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/*flush all open stdio streams*/&lt;/span&gt;
     &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="n"&gt;sigaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* reset to default */&lt;/span&gt;
     &lt;span class="n"&gt;sigprocmask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIG_SETMASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* just in case ...*/&lt;/span&gt;
     &lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;SIGABRT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* and one more time*/&lt;/span&gt;
     &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/*this should never be executed...*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：首先查看是否将执行默认动作，若是则冲洗所有标准I/O流。这并不等价于对所有打开的流调用fclose(因为只冲洗，并不关闭它们），但是当进程终止时，系统会关闭所有打开的文件。如果进程捕捉此信号并返回，
那么因为进程产生了更多的输出，所以再一次冲洗所有的流。不进行冲洗处理的唯一条件是如果进程捕捉此信号，然后调用_exit或_Exit.这种情况下，内存中任何未冲洗的标准I/O缓冲区都被丢弃。我们假定捕捉此信号，而且_exit或_Exit的调用者并不想要冲洗缓冲区。&lt;/p&gt;
&lt;p&gt;应用例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"NOSUCHF.ILE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Couldn't open file"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nf"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译运行一下，看一下执行情况片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;execve("./test.o", ["./test.o"], [/* 97 vars */]) = 0

open("NOSUCHF.ILE", O_RDONLY)           = -1 ENOENT (No such file or directory)

dup(2)                                  = 3

fcntl(3, F_GETFL)                       = 0x8402 (flags O_RDWR|O_APPEND|O_LARGEFILE)

fstat(3, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 3), ...}) = 0

mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fd18aa86000

write(3, "Couldn't open file: No such file"..., 46Couldn't open file: No such file or directory

) = 46

close(3)                                = 0

munmap(0x7fd18aa86000, 4096)            = 0

rt_sigprocmask(SIG_UNBLOCK, [ABRT], NULL, 8) = 0

gettid()                                = 18489

tgkill(18489, 18489, SIGABRT)           = 0

SIGABRT {si_signo=SIGABRT, si_code=SI_TKILL, si_pid=18489, si_uid=0} ---

+++ killed by SIGABRT +++

已放弃
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;abort测试代码说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码大体结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|-   macro                                                                                                           
||     NUM                                                                                                     
||     MIN_RLIMIT_CORE                                                                                                                           
|                                                                                                                         
|-   variable                                                                                                                            
||     TCID                                                                                                           
||     TST_TOTAL                                                                                                                 
|                                                                                                      
|-   function                                                                                                    
||     main                                                                                         
||     setup                                                              
||     cleanup                                                                 
||     do_child                                                                                    
||     instress
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先看一下头文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"test.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"safe_macros.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;什么是头文件呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在C语言家族程序中，头文件被大量使用。一般而言，每个C++/C程序通常由头文件(header files)和定义文件(definition files)组成。头文件作为一种包含功能函数、数据接口声明的载体文件，主要用于保存程序的声明(declaration)，而定义文件用于保存程序的实现 (implementation)&lt;/p&gt;
&lt;p _="
" printf_hello="printf(&amp;ldquo;Hello" world_="world!&amp;rdquo;);
"&gt;让我们来看，经典程序 &amp;ldquo;Hello world!&amp;rdquo;　
定义文件名&amp;ldquo;First.c&amp;rdquo;
    main()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;sample-1&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看看上面的程序，没有.h文件,因为程序太简单，没有需要保存的声明。&lt;/p&gt;
&lt;p&gt;文件名 First.c　变形&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;printStr()
{
    printf(&amp;ldquo;Hello world!&amp;rdquo;);
}
main()
{
printStr()
}

&amp;lt;sample-2&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还是没有, 那就让我们把这个程序再稍微改动一下.&lt;/p&gt;
&lt;p&gt;文件名 First.c&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;main()
{
    printStr()
}

printStr()
{
    printf(&amp;ldquo;Hello world!&amp;rdquo;);
}

&amp;lt;sample-3&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sample3和sample2是不同的，pritStr()函数定义的顺序不同。sample3是编译不通过的。这里面涉及作用域的问题。在这里只讲述与.h文件相关的顶层作用域。 顶层作用域就是从声明点延伸到源程序文本结束, 就printStr()这个函数来说，他没有单独的声明,只有定义,那么就从他定义的行开始,到first.c文件结束。sample2中，printStr的定义在main函数前面，所以作用域覆盖main函数，而sample3则没有。
这种情况怎么办呢? 有两种方法 ,一个pritStr函数定义到main函数之前，那就让我们来看另一个例子,让我们看看这个方法是不是在任何时候都会起作用.
文件名 First.c&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play2()
{
  &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.
  play1()
  &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..
}
play1()
{
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..
    play2()
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;
}
main()
{
    play1()
}

&amp;lt;sample-4&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数嵌套, 那么play1和play2这两个函数哪个放到前面呢?&lt;/p&gt;
&lt;p&gt;这时就需要我们来使用第二种方法,使用声明.&lt;/p&gt;
&lt;p&gt;文件名 First.c&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play1();
play2();
play2()
{
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.
    play1()
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..
}
play1()
{
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..
    play2()
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;
);
}
main()
{
    play1()
}

&amp;lt;sample-5&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个大型的软件项目,可能有几千个,上万个play, 而不只是play1,play2这么简单, 这样就可能有N个类似 play1(); play2(); 这样的声明, 这个时候就需要我们想办法把这样的play1(); play2(); 也另行管理, 而不是把他放在.c文件中, 于是.h文件出现了.&lt;/p&gt;
&lt;p&gt;文件名 First.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play1();
play2();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件名 First.C&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include &amp;ldquo;first.h&amp;rdquo;
play2()
{
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.
    play1()
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..
}
play1()
{
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..
    play2()
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;
);
}
main()
{
play1()
}

&amp;lt;sample-6&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如在second.c中还有一个函数需要调用first.c文件中的play1函数, 如何实现呢?&lt;/p&gt;
&lt;p&gt;Sencond.h 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;play1();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sencond.c文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;***()
{
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.
    Play();
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.
}

&amp;lt;sample-7&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在sencond.h文件内声明play1函数，怎么能调用到first.c文件中的哪个play1函数中呢? 是不是搞错了，没有搞错, 这里涉及到c语言的另一个特性:存储类说明符.
C语言的存储类说明符有以下几个, 我来列表说明一下&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;说明符&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Auto&lt;/td&gt;
&lt;td&gt;只在块内变量声明中被允许, 表示变量具有本地生存期.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extern&lt;/td&gt;
&lt;td&gt;出现在顶层或块的外部变量函数与变量声明中，表示声明的对象具有静态生存期, 连接程序知道其名字.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Static&lt;/td&gt;
&lt;td&gt;可以放在函数与变量声明中. 在函数定义时, 其只用于指定函数名,而不将函数导出到连接程序. 在函数声明中,表示其后面会有定义声明的函数, 存储类为static. 在数据声明中, 总是表示定义的声明不导出到连接程序.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;无疑, 在sample7中的second.h和first.h中,需要我们用extern标志符来修饰play1函数的声明,这样,play1()函数就可以被导出到连接程序, 也就是实现了无论在first.c文件中调用,还是在second.c文件中调用,连接程序都会很聪明的按照我们的意愿,把他连接到first.c文件中的play1函数的定义上去, 而不必我们在second.c文件中也要再写一个一样的play1函数.&lt;/p&gt;
&lt;p&gt;但随之有一个小问题, 在sample7中,我们并没有用extern标志符来修饰play1啊, 这里涉及到另一个问题, C语言中有默认的存储类标志符. C99中规定, 所有顶层的默认存储类标志符都是extern .&lt;/p&gt;
&lt;p&gt;那么我们如何来区分哪个头文件中的声明在其对应的.c文件中有定义,而哪个又没有呢? 这也许不是必须的，因为无论在哪个文件中定义，聪明的连接程序都会义无返顾的帮我们找到，并导出到连接程序, 但我觉得他确实必要的. &lt;/p&gt;
&lt;p&gt;因为我们需要知道这个函数的具体内容是什么,有什么功能, 有了新需求后我也许要修改他， 我需要在短时间内能找到这个函数的定义, 那么我来介绍一下在C语言中一个人为的规范:&lt;/p&gt;
&lt;p&gt;在.h文件中声明的函数,如果在其对应的.c文件中有定义,那么我们在声明这个函数时,不使用extern修饰符, 如果反之,则必须显示使用extern修饰符.&lt;/p&gt;
&lt;p&gt;这样,在C语言的.h文件中,我们会看到两种类型的函数声明. 带extern的,还不带extern的, 简单明了,一个是引用外部函数，一个是自己声明并定义的函数.
最终如下:
Sencond.h 文件&lt;/p&gt;
&lt;p&gt;Extern play1();&lt;/p&gt;
&lt;p&gt;那么多都是针对函数的，而实际上.h文件却不是为函数所专用的，还有全局变量. &lt;/p&gt;
&lt;p&gt;在大型项目中，对全局变量的使用不可避免, 比如,在first.c中需要使用一个全局变量G_test, 那么我们可以在first.h中,定义 TPYE G_test. 与对函数的使用类似, 在second.c中我们的开发人员发现他也需要使用这个全局变量, 而且要与first.c中一样的那个, 如何处理? 对,我们可以仿照函数中的处理方法, 在second.h中再次声明TPYE G_test, 根据extern的用法,以及c语言中默认的存储类型, 在两个头文件中声明的TPYE G_test,其实其存储类型都是extern, 也就是说不必我们操心, 连接程序会帮助我们处理一切. 但我们又如何区分全局变量哪个是定义声明,哪个是引用声明呢?这个比函数要复杂一些, 一般在C语言中有如下几种模型来区分:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、 初始化语句模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顶层声明中，存在初始化语句是，表示这个声明是定义声明，其他声明是引用声明。C语言的所有文件之中，只能有一个定义声明。
按照这个模型，我们可以在first.h中定义如下TPYE G_test=1；那么就确定在first中的是定义声明，在其他的所有声明都是引用声明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、 省略存储类型说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个模型中，所有引用声明要显示的包括存储类extern， 而每个外部变量的唯一定义声明中省略存储类说明符。
这个与我们对函数的处理方法类似，不再举例说明。&lt;/p&gt;
&lt;p&gt;这里还有一个需要说明，数组全局变量。&lt;/p&gt;
&lt;p&gt;在声明定义时，定义数组如下：
int G_glob[100];&lt;/p&gt;
&lt;p&gt;在另一个文件中引用声明如下：
int * G_glob;&lt;/p&gt;
&lt;p&gt;在vc中，是可以编译通过的， 这种情况大家都比较模糊并且需要注意，数组与指针类似，但并不等于说对数组的声明起变量就是指针。 上面所说的的程序在运行时发现了问题，在引用声明的那个文件中，使用这个指针时总是提示内存访问错误，原来我们的连接程序并不把指针与数组等同，连接时，也不把他们当做同一个定义，而是认为是不相关的两个定义，当然会出现错误。正确的使用方法是在引用声明中声明如下：&lt;/p&gt;
&lt;p&gt;int G_glob[10];&lt;/p&gt;
&lt;p&gt;并且最好再加上一个extern，更加明了。&lt;/p&gt;
&lt;p&gt;extern int G_glob[10];&lt;/p&gt;
&lt;p&gt;另外需要说明的是，在引用声明中由于不需要涉及到内存分配，可以简化如下，这样在需要对全局变量的长度进行修改时，不用把所有的引用声明也全部修改了。&lt;/p&gt;
&lt;p&gt;extern int G_glob[];&lt;/p&gt;
&lt;p&gt;接下来，看一下linux环境编程头文件常用的有哪些？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;linux常用头文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POSIX标准定义的头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| dirent.h |       目录项
| fcntl.h  |       文件控制
| fnmatch.h |   文件名匹配类型
| glob.h   |  路径名模式匹配类型
| grp.h    |     组文件
| &amp;lt;netdb.h&amp;gt;  |   网络数据库操作
| &amp;lt;pwd.h&amp;gt;    |     口令文件
| &amp;lt;regex.h&amp;gt;   |  正则表达式
| &amp;lt;tar.h&amp;gt;    |     TAR归档值
| &amp;lt;termios.h&amp;gt; |    终端I/O
| &amp;lt;unistd.h&amp;gt;  |   符号常量
| &amp;lt;utime.h&amp;gt;   |  文件时间
| &amp;lt;wordexp.h&amp;gt;  |   字符扩展类型
| &amp;lt;arpa/inet.h&amp;gt;  |   INTERNET定义
| &amp;lt;net/if.h&amp;gt;  |   套接字本地接口
| &amp;lt;netinet/in.h&amp;gt;   |  INTERNET地址族
| &amp;lt;netinet/tcp.h&amp;gt;  |   传输控制协议定义
| &amp;lt;sys/mman.h&amp;gt;  |   内存管理声明
| &amp;lt;sys/select.h&amp;gt;   |  Select函数
| &amp;lt;sys/socket.h&amp;gt; |    套接字借口
| &amp;lt;sys/stat.h&amp;gt;    | 文件状态
| &amp;lt;sys/times.h&amp;gt; |    进程时间
| &amp;lt;sys/types.h&amp;gt;   |  基本系统数据类型
| &amp;lt;sys/un.h&amp;gt; |    UNIX域套接字定义
| &amp;lt;sys/utsname.h&amp;gt;   |  系统名
| &amp;lt;sys/wait.h&amp;gt;   |  进程控制
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;POSIX定义的XSI扩展头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| &amp;lt;cpio.h&amp;gt; |    cpio归档值 
| &amp;lt;dlfcn.h&amp;gt; |   动态链接
| &amp;lt;fmtmsg.h&amp;gt; |   消息显示结构
| &amp;lt;ftw.h&amp;gt;  |      文件树漫游
| &amp;lt;iconv.h&amp;gt; |   代码集转换使用程序
| &amp;lt;langinfo.h&amp;gt; |   语言信息常量
| &amp;lt;libgen.h&amp;gt; |   模式匹配函数定义
| &amp;lt;monetary.h&amp;gt;  |  货币类型
| &amp;lt;ndbm.h&amp;gt;  |  数据库操作
| &amp;lt;nl_types.h&amp;gt; |   消息类别
| &amp;lt;poll.h&amp;gt; |   轮询函数
| &amp;lt;search.h&amp;gt;|     搜索表
| &amp;lt;strings.h&amp;gt; |    字符串操作
| &amp;lt;syslog.h&amp;gt; |    系统出错日志记录
| &amp;lt;ucontext.h&amp;gt;  |   用户上下文
| &amp;lt;ulimit.h&amp;gt; |    用户限制
| &amp;lt;utmpx.h&amp;gt;   |  用户帐户数据库

| &amp;lt;sys/ipc.h&amp;gt; |    IPC(命名管道)
| &amp;lt;sys/msg.h&amp;gt;  |   消息队列
| &amp;lt;sys/resource.h&amp;gt;| 资源操作
| &amp;lt;sys/sem.h&amp;gt;  |   信号量
| &amp;lt;sys/shm.h&amp;gt;   |  共享存储
| &amp;lt;sys/statvfs.h&amp;gt;   |  文件系统信息
| &amp;lt;sys/time.h&amp;gt;   |  时间类型
| &amp;lt;sys/timeb.h&amp;gt;  |   附加的日期和时间定义
| &amp;lt;sys/uio.h&amp;gt;    | 矢量I/O操作
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;POSIX定义的可选头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| &amp;lt;aio.h&amp;gt;    |     异步I/O
| &amp;lt;mqueue.h&amp;gt;  |   消息队列
| &amp;lt;pthread.h&amp;gt;   |  线程
| &amp;lt;sched.h&amp;gt;   |  执行调度
| &amp;lt;semaphore.h&amp;gt;  |   信号量
| &amp;lt;spawn.h&amp;gt;    |  实时spawn接口
| &amp;lt;stropts.h&amp;gt;  |   XSI STREAMS接口
| &amp;lt;trace.h&amp;gt;   |   事件跟踪
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;C/C++头文件一览&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C语言&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
| &amp;lt;assert.h&amp;gt;|　设定插入点
| &amp;lt;ctype.h&amp;gt;　　| 字符处理
| &amp;lt;errno.h&amp;gt;　　| 定义错误码
| &amp;lt;float.h&amp;gt;　　| 浮点数处理
| &amp;lt;iso646.h&amp;gt;   | 对应各种运算符的宏
| &amp;lt;limits.h&amp;gt;　　| 定义各种数据类型最值的常量
| &amp;lt;locale.h&amp;gt;　　| 定义本地化C函数
| &amp;lt;math.h&amp;gt;　　　| 定义数学函数
| &amp;lt;setjmp.h&amp;gt; | 异常处理支持
|  &amp;lt;signal.h&amp;gt;   | 信号机制支持
|  &amp;lt;stdarg.h&amp;gt;   | 不定参数列表支持
|  &amp;lt;stddef.h&amp;gt;    | 常用常量
| &amp;lt;stdio.h&amp;gt;　　| 定义输入／输出函数
|  &amp;lt;stdlib.h&amp;gt;| 定义杂项函数及内存分配函数
|  &amp;lt;string.h&amp;gt;　　| 字符串处理
| &amp;lt;time.h&amp;gt;　　　　| 定义关于时间的函数
| &amp;lt;wchar.h&amp;gt;　　　| 宽字符处理及输入／输出
| &amp;lt;wctype.h&amp;gt;　　| 宽字符分类
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;传统C++&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
|  &amp;lt;fstream.h&amp;gt;　| 改用&amp;lt;fstream&amp;gt;
| &amp;lt;iomanip.h&amp;gt;　| 改用&amp;lt;iomainip&amp;gt;
|  &amp;lt;iostream.h&amp;gt;　| 改用&amp;lt;iostream&amp;gt;
| &amp;lt;strstrea.h&amp;gt;　　| 该类不再支持，改用&amp;lt;sstream&amp;gt;中的stringstream
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;标准C++&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
|  &amp;lt;algorithm&amp;gt;　　　 | 通用算法
| &amp;lt;bitset&amp;gt;　　　　| 位集容器
| &amp;lt;cctype&amp;gt;         | 字符处理
|  &amp;lt;cerrno&amp;gt; 　　　　| 定义错误码
|  &amp;lt;cfloat&amp;gt;　　　| 浮点数处理
| &amp;lt;ciso646&amp;gt;        | 对应各种运算符的宏
|  &amp;lt;climits&amp;gt; 　　　| 定义各种数据类型最值的常量
|  &amp;lt;clocale&amp;gt; 　　　| 定义本地化函数
| &amp;lt;cmath&amp;gt; 　　　　| 定义数学函数
| &amp;lt;complex&amp;gt;　　　　| 复数类
| &amp;lt;csignal&amp;gt;       | 信号机制支持
|  &amp;lt;csetjmp&amp;gt;       | 异常处理支持
|  &amp;lt;cstdarg&amp;gt;       | 不定参数列表支持
|  &amp;lt;cstddef&amp;gt;       | 常用常量
| &amp;lt;cstdio&amp;gt; 　　| 定义输入／输出函数
|  &amp;lt;cstdlib&amp;gt; 　　| 定义杂项函数及内存分配函数
|  &amp;lt;cstring&amp;gt; 　| 字符串处理
| &amp;lt;ctime&amp;gt; 　　| 定义关于时间的函数
|  &amp;lt;cwchar&amp;gt; 　| 宽字符处理及输入／输出
|  &amp;lt;cwctype&amp;gt; 　　| 宽字符分类
|  &amp;lt;deque&amp;gt;　　　　　| STL 双端队列容器
|  &amp;lt;exception&amp;gt;　　　| 异常处理类
| &amp;lt;fstream&amp;gt; 　　　 | 文件输入／输出
|  &amp;lt;al&amp;gt;　　| STL 定义运算函数（代替运算符）
|  &amp;lt;limits&amp;gt; 　　　　| 定义各种数据类型最值常量
|  &amp;lt;list&amp;gt;　　　　　　| STL 线性列表容器
|  &amp;lt;locale&amp;gt;        | 本地化特定信息
|  &amp;lt;map&amp;gt;　　　　　　| STL 映射容器
|  &amp;lt;memory&amp;gt;        | STL通过分配器进行的内存分配
|  &amp;lt;new&amp;gt;           | 动态内存分配
|  &amp;lt;numeric&amp;gt;      | STL常用的数字操作
|  &amp;lt;iomanip&amp;gt; 　　| 参数化输入／输出
|  &amp;lt;iOS&amp;gt;　　　　　　 | 基本输入／输出支持
|  &amp;lt;iosfwd&amp;gt;　　　　| 输入／输出系统使用的前置声明
|  &amp;lt;iostream&amp;gt; 　　| 数据流输入／输出
|  &amp;lt;istream&amp;gt;　　　　| 基本输入流
|  &amp;lt;iterator&amp;gt;       | STL迭代器
| &amp;lt;ostream&amp;gt;　　　　 | 基本输出流
| &amp;lt;queue&amp;gt;　　　　　 | STL 队列容器
|  &amp;lt;set&amp;gt;　　　　　| STL 集合容器
| &amp;lt;sstream&amp;gt;　　　　 | 基于字符串的流
|  &amp;lt;stack&amp;gt;　　　　　| STL 堆栈容器
|  &amp;lt;stdexcept&amp;gt;　　　| 标准异常类
|  &amp;lt;streambuf&amp;gt;　　　 | /底层输入／输出支持
|  &amp;lt;string&amp;gt;　　　　| 字符串类
|  &amp;lt;typeinfo&amp;gt;      | 运行期间类型信息
|  &amp;lt;utility&amp;gt;　　　　| STL 通用模板类
|  &amp;lt;valarray&amp;gt;       | 对包含值的数组的操作
|  &amp;lt;vector&amp;gt;　　　　　| STL 动态数组容器
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;C99增加的部分&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|　文件名　| 内容　|
| ------- | --------
|  &amp;lt;complex.h&amp;gt;　| 复数处理
|  &amp;lt;fenv.h&amp;gt;　　　　| 浮点环境
|  &amp;lt;inttypes.h&amp;gt;　　| 整数格式转换
|  &amp;lt;stdbool.h&amp;gt;　　 | 布尔环境
|  &amp;lt;stdint.h&amp;gt;　　　| 整型环境
|  &amp;lt;tgmath.h&amp;gt;　　　| 通用类型数学宏
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到abort01的测试上来。先看一下执行情况：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abort01     0  TINFO  :  Adjusting RLIMIT_CORE to 1048576                                                                                            
abort01     1  TPASS  :  abort dumped core                                                                                                           
abort01     2  TPASS  :  abort raised SIGIOT                                                                                                         
abort01     3  TPASS  :  abort dumped core                                                                                                           
abort01     4  TPASS  :  abort raised SIGIOT                                                                                                         
abort01     5  TPASS  :  abort dumped core                                                                                                           
abort01     6  TPASS  :  abort raised SIGIOT
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序后台执行片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chdir("/tmp/aboeHLyFk")                 = 0
clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb05157a9d0) = 19587
wait4(-1, [{WIFSIGNALED(s) &amp;amp;&amp;amp; WTERMSIG(s) == SIGABRT &amp;amp;&amp;amp; WCOREDUMP(s)}], 0, NULL) = 19587
SIGCHLD {si_signo=SIGCHLD, si_code=CLD_DUMPED, si_pid=19587, si_uid=0, si_status=SIGABRT, si_utime=0, si_stime=0} ---
wait4(-1, 0x7ffd43788f30, 0, NULL)      = -1 ECHILD (No child processes)
write(1, "abort01     1  TPASS  :  abort d"..., 43abort01     1  TPASS  :  abort dumped core
) = 43
write(1, "abort01     2  TPASS  :  abort r"..., 45abort01     2  TPASS  :  abort raised SIGIOT
) = 45
clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb05157a9d0) = 19588
wait4(-1, [{WIFSIGNALED(s) &amp;amp;&amp;amp; WTERMSIG(s) == SIGABRT &amp;amp;&amp;amp; WCOREDUMP(s)}], 0, NULL) = 19588
SIGCHLD {si_signo=SIGCHLD, si_code=CLD_DUMPED, si_pid=19588, si_uid=0, si_status=SIGABRT, si_utime=0, si_stime=0} ---
wait4(-1, 0x7ffd43788f30, 0, NULL)      = -1 ECHILD (No child processes)  
write(1, "abort01     3  TPASS  :  abort d"..., 43abort01     3  TPASS  :  abort dumped core
) = 43
write(1, "abort01     4  TPASS  :  abort r"..., 45abort01     4  TPASS  :  abort raised SIGIOT
) = 45
clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb05157a9d0) = 19589
wait4(-1, [{WIFSIGNALED(s) &amp;amp;&amp;amp; WTERMSIG(s) == SIGABRT &amp;amp;&amp;amp; WCOREDUMP(s)}], 0, NULL) = 19589
SIGCHLD {si_signo=SIGCHLD, si_code=CLD_DUMPED, si_pid=19589, si_uid=0, si_status=SIGABRT, si_utime=0, si_stime=0} ---
wait4(-1, 0x7ffd43788f30, 0, NULL)      = -1 ECHILD (No child processes)
write(1, "abort01     5  TPASS  :  abort d"..., 43abort01     5  TPASS  :  abort dumped core
) = 43
write(1, "abort01     6  TPASS  :  abort r"..., 45abort01     6  TPASS  :  abort raised SIGIOT
) = 45
unlink("core")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从测试log来看，abort01主要进行abort"dumped core"、和"raised SIGIOT"两种测试，并且测试了３遍。０为setup打印信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define NUM 3 /*定义fork进程的数量*/
char *TCID;         /* tescase的名字*/
int TST_TOTAL;          /* testcases数量 */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void setup(void);
static void cleanup(void);                                                                                            
static void do_child();                                                                                               
static int instress();
int main(int argc, char *argv[])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别分析这几个函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setup&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define MIN_RLIMIT_CORE (1024 * 1024)
static void setup(void)
{
    struct rlimit rlim;
    SAFE_GETRLIMIT(NULL, RLIMIT_CORE, &amp;amp;rlim);

    if (rlim.rlim_cur &amp;lt; MIN_RLIMIT_CORE) {
        test_resm(TINFO, "Adjusting RLIMIT_CORE to %i", MIN_RLIMIT_CORE);
        rlim.rlim_cur = MIN_RLIMIT_CORE;
        SAFE_GETRLIMIT(NULL, RLIMIT_CORE, &amp;amp;rlim);
    }
    tst_tmpdir()
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;setup函数的目的是为了调整RLIMIT_CORE的大小。在Linux系统中，Resouce limit指在一个进程的执行过程中，它所能得到的资源的限制，比如进程的core file的最大值，虚拟内存的最大值等。Resouce limit的大小可以直接影响进程的执行状况。其有两个最重要的概念：soft limit 和 hard limit。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;struct rlimit {
rlim_t rlim_cur;
rlim_t rlim_max;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是指内核所能支持的资源上限。比如对于RLIMIT_NOFILE(一个进程能打开的最大文件 数，内核默认是1024)，soft limit最大也只能达到1024。对于RLIMIT_CORE(core文件的大小，内核不做限制)，soft limit最大能是unlimited。hard limit在资源中只是作为soft limit的上限。当你设置hard limit后，你以后设置的soft limit只能小于hard limit。要说明的是，hard limit只针对非特权进程，也就是进程的有效用户ID(effective user ID)不是0的进程。具有特权级别的进程(具有属性CAP_SYS_RESOURCE)，soft limit则只有内核上限。&lt;/p&gt;
&lt;p&gt;tst_tmpdir函数说明一下，该函数用来为ltp测试程序创建临时目录，目录名case名称＋随机字母。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cleanup函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void cleanup(void)
{
    unlink("core")
    tst_rmdir();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该函数比较简单，用来清理产生的临时文件和软连接。可以做下试验，将main函数中的该函数注释掉，会在tmp下看到产生的core文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;do_child函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void do_child(void)
{
    abort()
    fprintf(stderr, "\tchild - abort failed.\n");
    exit(1);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;abort的调用，进程退出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;instress函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static int instress(void)
{
    test_resm(TINFO,
        "System resources may be too low; fork(), select() etc are likely to fail.");
    return 1;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;系统资源比较低的情况，　出现fork()等调用失败时的处理。也是为兼容UCLINUK测试（如嵌入式系统）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main函数&lt;/strong&gt;
控制测试流程和主要的测试代码，以下将重点介绍一些代码片段。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef WCOREDUMP&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WCOREDUMP(status)
如果孩子进程产生核心转储文件则返回真。这个宏只应该在 WIFSIGNALED 返回真时调用。这个没有在 POSIX.1-2001 里指定并且在一些 UNIX 实现(如 AIX、SunOS)里也没有提供。只在 #ifdef WCOREDUMP ... #endif 内部使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef UCLINUX&lt;/span&gt;
    &lt;span class="n"&gt;maybe_run_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;do_child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="cm"&gt;/* UCLINUX的情况　*/&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cm"&gt;/*调用setup函数*/&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NUM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="cm"&gt;/*连续创建３个进程调用do_child函数*/&lt;/span&gt;
        &lt;span class="n"&gt;kidpid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FORK_OR_VFORK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kidpid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef UCLINUX&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;instress&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fork failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
            &lt;span class="n"&gt;do_child&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;//调用do_child()函数&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;  
                &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kidpid&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;instress&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TBROK&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;TERRNO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="s"&gt;"fork failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TBROK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"wrong # children waited on; got %d, expected 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef WCOREDUMP&lt;/span&gt;
        &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WCOREDUMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//WCOFEDUMP情况&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WTERMSIG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIFEXITED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WEXITSTATUS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef WCOREDUMP&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TFAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"Child did not dump core; exit code = %d, "&lt;/span&gt;
             &lt;span class="s"&gt;"signal = %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_resm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TPASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"abort dumped core"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;//core值等于０，则没有正常产生core文件，如果core不等于０且不等于-1，说明正常产生了core文件&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIGIOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_resm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TPASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"abort raised SIGIOT"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="err"&gt;　　&lt;/span&gt;&lt;span class="c1"&gt;//发出的信号如果为SIGIOT说明信号触发正常&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tst_brkm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TFAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"Child did not raise SIGIOT (%d); exit code = %d, "&lt;/span&gt;
             &lt;span class="s"&gt;"signal = %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGIOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;abort测试分析结束。&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Tue, 02 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-02:2016/08/02/LTP/</guid><category>LTP</category></item><item><title>LTP－kernel-syscalls</title><link>http://king32783784.github.io/2016/08/01/LTP/</link><description>&lt;body&gt;&lt;h4 id="syscalls"&gt;syscalls&lt;/h4&gt;
&lt;p&gt;ltp中kernel测试比重很大，尤其是syscalls，包括一下用例：
注：测试内容分析时补充。&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用例名称&lt;/th&gt;
&lt;th&gt;测试内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abort&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;accept&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;accept4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;access&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;acct&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;add_key&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;adjtimex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alarm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;asyncio&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdflush&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bind&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;brk&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cacheflush&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capget&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chmod&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chown&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chroot&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_getres&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_nanosleep&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clock_nanosleep2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clone&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;close&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cma&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;confstr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;connect&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dup2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dup3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_create1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_ctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_pwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll_wait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventfd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eventfd2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execle&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execlp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execve&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execvp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exit_group&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;faccessat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fadvise&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fallocate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fanotify&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchmod&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchmodat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchown&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fchownat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fcntl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fdatasync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flock&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fmtmsg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fork&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fpathconf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fstat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fstatat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fstatfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fsync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ftruncate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;futex&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;futimesat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getcontext&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getcpu&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getcwd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getdents&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getdomainname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getdtablesize&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getegid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;geteuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getgroups&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gethostbyname_r&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gethostid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gethostname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getitimer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get_mempolicy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpagesize&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpeername&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpgrp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getppid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getpriority&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getrandom&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getresgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getresuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getrlimit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get_robust_list&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getrusage&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getsid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getsockname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getsockopt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gettid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gettimeofday&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inotify&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inotify_init&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_cancel&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ioctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_destroy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_getevents&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ioperm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iopl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_setup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io_submit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ipc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kcmp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kill&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lchown&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lgetxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;link&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;listen&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;llistxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;llseek&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lseek&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lstat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;madvise&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Makefile&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mallopt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mbind&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memcmp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memcpy&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memmap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;migrate_pages&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mincore&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdirat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mknod&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mknodat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mlock&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mlockall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mmap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modify_ldt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mount&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move_pages&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mprotect&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_notify&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_open&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_timedreceive&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_timedsend&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mq_unlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mremap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;munlock&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;munlockall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;munmap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nanosleep&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;newuname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nftw&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;open&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;paging&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pathconf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pause&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perf_event_open&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;personality&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pipe&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pipe2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;poll&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ppoll&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pread&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preadv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;profil&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pselect&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ptrace&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwrite&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwritev&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quotactl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readahead&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readlinkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reboot&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recv&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recvfrom&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;recvmsg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remap_file_pages&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;removexattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rename&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;renameat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;renameat2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;request_key&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rmdir&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigaction&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigprocmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigqueueinfo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigsuspend&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rt_sigtimedwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sbrk&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getaffinity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getparam&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_get_priority_max&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_get_priority_min&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_getscheduler&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_rr_get_interval&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setaffinity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setparam&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_setscheduler&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched_yield&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;send&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendfile&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendmsg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sendto&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setdomainname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setegid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setfsgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setfsuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setgroups&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sethostname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setitimer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setns&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setpgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setpgrp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setpriority&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setregid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setresgid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setresuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setreuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setrlimit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set_robust_list&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setsid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setsockopt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set_thread_area&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set_tid_address&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;settimeofday&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setuid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setxattr&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sgetmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigaction&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigaltstack&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sighold&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signal&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signalfd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signalfd4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigpending&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigprocmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigrelse&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigsuspend&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigtimedwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigwait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sigwaitinfo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socket&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socketcall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socketpair&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sockioctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;splice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssetmask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statvfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stime&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swapoff&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swapon&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;switch&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;symlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;symlinkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync_file_range&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;syscall&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysconf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysctl&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysfs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysinfo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;syslog&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tee&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timerfd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timer_getoverrun&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timer_gettime&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;times&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tkill&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;truncate&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ulimit&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umask&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umount&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;umount2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unlink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unlinkat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unshare&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ustat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utils&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utime&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utimensat&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;utimes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vfork&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vhangup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vmsplice&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wait&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wait4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;waitid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;waitpid&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;writev&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来按照顺序分析系统调用的每一个case,并将每个case的测试内容补充到本文。&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/LK0U4TNURZ.jpg" width="420"/&gt;&lt;/p&gt;
&lt;p&gt;附linux系统主要系统调用列表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、进程控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fork    创建一个新进程&lt;/p&gt;
&lt;p&gt;clone   按指定条件创建子进程&lt;/p&gt;
&lt;p&gt;execve  运行可执行文件&lt;/p&gt;
&lt;p&gt;exit    中止进程&lt;/p&gt;
&lt;p&gt;_exit   立即中止当前进程&lt;/p&gt;
&lt;p&gt;getdtablesize   进程所能打开的最大文件数&lt;/p&gt;
&lt;p&gt;getpgid 获取指定进程组标识号&lt;/p&gt;
&lt;p&gt;setpgid 设置指定进程组标志号&lt;/p&gt;
&lt;p&gt;getpgrp 获取当前进程组标识号&lt;/p&gt;
&lt;p&gt;setpgrp 设置当前进程组标志号&lt;/p&gt;
&lt;p&gt;getpid  获取进程标识号&lt;/p&gt;
&lt;p&gt;getppid 获取父进程标识号&lt;/p&gt;
&lt;p&gt;getpriority 获取调度优先级&lt;/p&gt;
&lt;p&gt;setpriority 设置调度优先级&lt;/p&gt;
&lt;p&gt;modify_ldt  读写进程的本地描述表&lt;/p&gt;
&lt;p&gt;nanosleep   使进程睡眠指定的时间&lt;/p&gt;
&lt;p&gt;nice    改变分时进程的优先级&lt;/p&gt;
&lt;p&gt;pause   挂起进程，等待信号&lt;/p&gt;
&lt;p&gt;personality 设置进程运行域&lt;/p&gt;
&lt;p&gt;prctl   对进程进行特定操作&lt;/p&gt;
&lt;p&gt;ptrace  进程跟踪&lt;/p&gt;
&lt;p&gt;sched_get_priority_max  取得静态优先级的上限&lt;/p&gt;
&lt;p&gt;sched_get_priority_min  取得静态优先级的下限&lt;/p&gt;
&lt;p&gt;sched_getparam  取得进程的调度参数&lt;/p&gt;
&lt;p&gt;sched_getscheduler  取得指定进程的调度策略&lt;/p&gt;
&lt;p&gt;sched_rr_get_interval   取得按RR算法调度的实时进程的时间片长度&lt;/p&gt;
&lt;p&gt;sched_setparam  设置进程的调度参数&lt;/p&gt;
&lt;p&gt;sched_setscheduler  设置指定进程的调度策略和参数&lt;/p&gt;
&lt;p&gt;sched_yield 进程主动让出处理器,并将自己等候调度队列队尾&lt;/p&gt;
&lt;p&gt;vfork   创建一个子进程，以供执行新程序，常与execve等同时使用&lt;/p&gt;
&lt;p&gt;wait    等待子进程终止&lt;/p&gt;
&lt;p&gt;wait3   参见wait&lt;/p&gt;
&lt;p&gt;waitpid 等待指定子进程终止&lt;/p&gt;
&lt;p&gt;wait4   参见waitpid&lt;/p&gt;
&lt;p&gt;capget  获取进程权限&lt;/p&gt;
&lt;p&gt;capset  设置进程权限&lt;/p&gt;
&lt;p&gt;getsid  获取会晤标识号&lt;/p&gt;
&lt;p&gt;setsid  设置会晤标识号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、文件系统控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、文件读写操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fcntl   文件控制&lt;/p&gt;
&lt;p&gt;open    打开文件&lt;/p&gt;
&lt;p&gt;creat   创建新文件&lt;/p&gt;
&lt;p&gt;close   关闭文件描述字&lt;/p&gt;
&lt;p&gt;read    读文件&lt;/p&gt;
&lt;p&gt;write   写文件&lt;/p&gt;
&lt;p&gt;readv   从文件读入数据到缓冲数组中&lt;/p&gt;
&lt;p&gt;writev  将缓冲数组里的数据写入文件&lt;/p&gt;
&lt;p&gt;pread   对文件随机读&lt;/p&gt;
&lt;p&gt;pwrite  对文件随机写&lt;/p&gt;
&lt;p&gt;lseek   移动文件指针&lt;/p&gt;
&lt;p&gt;_llseek 在64位地址空间里移动文件指针&lt;/p&gt;
&lt;p&gt;dup 复制已打开的文件描述字&lt;/p&gt;
&lt;p&gt;dup2    按指定条件复制文件描述字&lt;/p&gt;
&lt;p&gt;flock   文件加/解锁&lt;/p&gt;
&lt;p&gt;poll    I/O多路转换&lt;/p&gt;
&lt;p&gt;truncate    截断文件&lt;/p&gt;
&lt;p&gt;ftruncate   参见truncate&lt;/p&gt;
&lt;p&gt;umask   设置文件权限掩码&lt;/p&gt;
&lt;p&gt;fsync   把文件在内存中的部分写回磁盘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、文件系统操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;access  确定文件的可存取性&lt;/p&gt;
&lt;p&gt;chdir   改变当前工作目录&lt;/p&gt;
&lt;p&gt;fchdir  参见chdir&lt;/p&gt;
&lt;p&gt;chmod   改变文件方式&lt;/p&gt;
&lt;p&gt;fchmod  参见chmod&lt;/p&gt;
&lt;p&gt;chown   改变文件的属主或用户组&lt;/p&gt;
&lt;p&gt;fchown  参见chown&lt;/p&gt;
&lt;p&gt;lchown  参见chown&lt;/p&gt;
&lt;p&gt;chroot  改变根目录&lt;/p&gt;
&lt;p&gt;stat    取文件状态信息&lt;/p&gt;
&lt;p&gt;lstat   参见stat&lt;/p&gt;
&lt;p&gt;fstat   参见stat&lt;/p&gt;
&lt;p&gt;statfs  取文件系统信息&lt;/p&gt;
&lt;p&gt;fstatfs 参见statfs&lt;/p&gt;
&lt;p&gt;readdir 读取目录项&lt;/p&gt;
&lt;p&gt;getdents    读取目录项&lt;/p&gt;
&lt;p&gt;mkdir   创建目录&lt;/p&gt;
&lt;p&gt;mknod   创建索引节点&lt;/p&gt;
&lt;p&gt;rmdir   删除目录&lt;/p&gt;
&lt;p&gt;rename  文件改名&lt;/p&gt;
&lt;p&gt;link    创建链接&lt;/p&gt;
&lt;p&gt;symlink 创建符号链接&lt;/p&gt;
&lt;p&gt;unlink  删除链接&lt;/p&gt;
&lt;p&gt;readlink    读符号链接的值&lt;/p&gt;
&lt;p&gt;mount   安装文件系统&lt;/p&gt;
&lt;p&gt;umount  卸下文件系统&lt;/p&gt;
&lt;p&gt;ustat   取文件系统信息&lt;/p&gt;
&lt;p&gt;utime   改变文件的访问修改时间&lt;/p&gt;
&lt;p&gt;utimes  参见utime&lt;/p&gt;
&lt;p&gt;quotactl    控制磁盘配额&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、系统控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ioctl   I/O总控制函数&lt;/p&gt;
&lt;p&gt;_sysctl 读/写系统参数&lt;/p&gt;
&lt;p&gt;acct    启用或禁止进程记账&lt;/p&gt;
&lt;p&gt;getrlimit   获取系统资源上限&lt;/p&gt;
&lt;p&gt;setrlimit   设置系统资源上限&lt;/p&gt;
&lt;p&gt;getrusage   获取系统资源使用情况&lt;/p&gt;
&lt;p&gt;uselib  选择要使用的二进制函数库&lt;/p&gt;
&lt;p&gt;ioperm  设置端口I/O权限&lt;/p&gt;
&lt;p&gt;iopl    改变进程I/O权限级别&lt;/p&gt;
&lt;p&gt;outb    低级端口操作&lt;/p&gt;
&lt;p&gt;reboot  重新启动&lt;/p&gt;
&lt;p&gt;swapon  打开交换文件和设备&lt;/p&gt;
&lt;p&gt;swapoff 关闭交换文件和设备&lt;/p&gt;
&lt;p&gt;bdflush 控制bdflush守护进程&lt;/p&gt;
&lt;p&gt;sysfs   取核心支持的文件系统类型&lt;/p&gt;
&lt;p&gt;sysinfo 取得系统信息&lt;/p&gt;
&lt;p&gt;adjtimex    调整系统时钟&lt;/p&gt;
&lt;p&gt;alarm   设置进程的闹钟&lt;/p&gt;
&lt;p&gt;getitimer   获取计时器值&lt;/p&gt;
&lt;p&gt;setitimer   设置计时器值&lt;/p&gt;
&lt;p&gt;gettimeofday    取时间和时区&lt;/p&gt;
&lt;p&gt;settimeofday    设置时间和时区&lt;/p&gt;
&lt;p&gt;stime   设置系统日期和时间&lt;/p&gt;
&lt;p&gt;time    取得系统时间&lt;/p&gt;
&lt;p&gt;times   取进程运行时间&lt;/p&gt;
&lt;p&gt;uname   获取当前UNIX系统的名称、版本和主机等信息&lt;/p&gt;
&lt;p&gt;vhangup 挂起当前终端&lt;/p&gt;
&lt;p&gt;nfsservctl  对NFS守护进程进行控制&lt;/p&gt;
&lt;p&gt;vm86    进入模拟8086模式&lt;/p&gt;
&lt;p&gt;create_module   创建可装载的模块项&lt;/p&gt;
&lt;p&gt;delete_module   删除可装载的模块项&lt;/p&gt;
&lt;p&gt;init_module 初始化模块&lt;/p&gt;
&lt;p&gt;query_module    查询模块信息&lt;/p&gt;
&lt;p&gt;*get_kernel_syms    取得核心符号,已被query_module代替&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;brk 改变数据段空间的分配&lt;/p&gt;
&lt;p&gt;sbrk    参见brk&lt;/p&gt;
&lt;p&gt;mlock   内存页面加锁&lt;/p&gt;
&lt;p&gt;munlock 内存页面解锁&lt;/p&gt;
&lt;p&gt;mlockall    调用进程所有内存页面加锁&lt;/p&gt;
&lt;p&gt;munlockall  调用进程所有内存页面解锁&lt;/p&gt;
&lt;p&gt;mmap    映射虚拟内存页&lt;/p&gt;
&lt;p&gt;munmap  去除内存页映射&lt;/p&gt;
&lt;p&gt;mremap  重新映射虚拟内存地址&lt;/p&gt;
&lt;p&gt;msync   将映射内存中的数据写回磁盘&lt;/p&gt;
&lt;p&gt;mprotect    设置内存映像保护&lt;/p&gt;
&lt;p&gt;getpagesize 获取页面大小&lt;/p&gt;
&lt;p&gt;sync    将内存缓冲区数据写回硬盘&lt;/p&gt;
&lt;p&gt;cacheflush  将指定缓冲区中的内容写回磁盘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、网络管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;getdomainname   取域名&lt;/p&gt;
&lt;p&gt;setdomainname   设置域名&lt;/p&gt;
&lt;p&gt;gethostid   获取主机标识号&lt;/p&gt;
&lt;p&gt;sethostid   设置主机标识号&lt;/p&gt;
&lt;p&gt;gethostname 获取本主机名称&lt;/p&gt;
&lt;p&gt;sethostname 设置主机名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六、socket控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;socketcall  socket系统调用&lt;/p&gt;
&lt;p&gt;socket  建立socket&lt;/p&gt;
&lt;p&gt;bind    绑定socket到端口&lt;/p&gt;
&lt;p&gt;connect 连接远程主机&lt;/p&gt;
&lt;p&gt;accept  响应socket连接请求&lt;/p&gt;
&lt;p&gt;send    通过socket发送信息&lt;/p&gt;
&lt;p&gt;sendto  发送UDP信息&lt;/p&gt;
&lt;p&gt;sendmsg 参见send&lt;/p&gt;
&lt;p&gt;recv    通过socket接收信息&lt;/p&gt;
&lt;p&gt;recvfrom    接收UDP信息&lt;/p&gt;
&lt;p&gt;recvmsg 参见recv&lt;/p&gt;
&lt;p&gt;listen  监听socket端口&lt;/p&gt;
&lt;p&gt;select  对多路同步I/O进行轮询&lt;/p&gt;
&lt;p&gt;shutdown    关闭socket上的连接&lt;/p&gt;
&lt;p&gt;getsockname 取得本地socket名字&lt;/p&gt;
&lt;p&gt;getpeername 获取通信对方的socket名字&lt;/p&gt;
&lt;p&gt;getsockopt  取端口设置&lt;/p&gt;
&lt;p&gt;setsockopt  设置端口参数&lt;/p&gt;
&lt;p&gt;sendfile    在文件或端口间传输数据&lt;/p&gt;
&lt;p&gt;socketpair  创建一对已联接的无名socket&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;七、用户管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;getuid  获取用户标识号&lt;/p&gt;
&lt;p&gt;setuid  设置用户标志号&lt;/p&gt;
&lt;p&gt;getgid  获取组标识号&lt;/p&gt;
&lt;p&gt;setgid  设置组标志号&lt;/p&gt;
&lt;p&gt;getegid 获取有效组标识号&lt;/p&gt;
&lt;p&gt;setegid 设置有效组标识号&lt;/p&gt;
&lt;p&gt;geteuid 获取有效用户标识号&lt;/p&gt;
&lt;p&gt;seteuid 设置有效用户标识号&lt;/p&gt;
&lt;p&gt;setregid    分别设置真实和有效的的组标识号&lt;/p&gt;
&lt;p&gt;setreuid    分别设置真实和有效的用户标识号&lt;/p&gt;
&lt;p&gt;getresgid   分别获取真实的,有效的和保存过的组标识号&lt;/p&gt;
&lt;p&gt;setresgid   分别设置真实的,有效的和保存过的组标识号&lt;/p&gt;
&lt;p&gt;getresuid   分别获取真实的,有效的和保存过的用户标识号&lt;/p&gt;
&lt;p&gt;setresuid   分别设置真实的,有效的和保存过的用户标识号&lt;/p&gt;
&lt;p&gt;setfsgid    设置文件系统检查时使用的组标识号&lt;/p&gt;
&lt;p&gt;setfsuid    设置文件系统检查时使用的用户标识号&lt;/p&gt;
&lt;p&gt;getgroups   获取后补组标志清单&lt;/p&gt;
&lt;p&gt;setgroups   设置后补组标志清单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;八、进程间通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ipc 进程间通信总控制调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、信号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sigaction   设置对指定信号的处理方法&lt;/p&gt;
&lt;p&gt;sigprocmask 根据参数对信号集中的信号执行阻塞/解除阻塞等操作&lt;/p&gt;
&lt;p&gt;sigpending  为指定的被阻塞信号设置队列&lt;/p&gt;
&lt;p&gt;sigsuspend  挂起进程等待特定信号&lt;/p&gt;
&lt;p&gt;signal  参见signal&lt;/p&gt;
&lt;p&gt;kill    向进程或进程组发信号&lt;/p&gt;
&lt;p&gt;*sigblock   向被阻塞信号掩码中添加信号,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*siggetmask 取得现有阻塞信号掩码,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*sigsetmask 用给定信号掩码替换现有阻塞信号掩码,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*sigmask    将给定的信号转化为掩码,已被sigprocmask代替&lt;/p&gt;
&lt;p&gt;*sigpause   作用同sigsuspend,已被sigsuspend代替&lt;/p&gt;
&lt;p&gt;sigvec  为兼容BSD而设的信号处理函数,作用类似sigaction&lt;/p&gt;
&lt;p&gt;ssetmask    ANSI C的信号处理函数,作用类似sigaction&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、消息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;msgctl  消息控制操作&lt;/p&gt;
&lt;p&gt;msgget  获取消息队列&lt;/p&gt;
&lt;p&gt;msgsnd  发消息&lt;/p&gt;
&lt;p&gt;msgrcv  取消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、管道&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pipe    创建管道&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、信号量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;semctl  信号量控制&lt;/p&gt;
&lt;p&gt;semget  获取一组信号量&lt;/p&gt;
&lt;p&gt;semop   信号量操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、共享内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;shmctl  控制共享内存&lt;/p&gt;
&lt;p&gt;shmget  获取共享内存&lt;/p&gt;
&lt;p&gt;shmat   连接共享内存&lt;/p&gt;
&lt;p&gt;shmdt   拆卸共享内存&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-01:2016/08/01/LTP/</guid><category>LTP</category></item><item><title>LTP－Command-file</title><link>http://king32783784.github.io/2016/06/03/LTP/</link><description>&lt;body&gt;&lt;h4 id="file"&gt;file&lt;/h4&gt;
&lt;p&gt;file　用例主要用于测试file命令。&lt;/p&gt;
&lt;h5 id="fileming-ling-jie-shao"&gt;file命令介绍&lt;/h5&gt;
&lt;p&gt;file命令可以通过查看文件内容来找出特定类型的文件，在UNIX/ Linux系统中，文件类型并不是由文件扩展名来决定的(windows中却正是这么做的),file命令的目的是从多个文件中收集文件类型统计信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file --help

Usage: file [OPTION...] [FILE...]
Determine type of FILEs.

  --help                 display this help and exit
-v, --version              output version information and exit
-m, --magic-file LIST      use LIST as a colon-separated list of magic
                           number files
-z, --uncompress           try to look inside compressed files
-Z, --uncompress-noreport  only print the contents of compressed files
-b, --brief                do not prepend filenames to output lines
-c, --checking-printout    print the parsed form of the magic file, use in
                           conjunction with -m to debug a new magic file
                           before installing it
-e, --exclude TEST         exclude TEST from the list of test to be
                           performed for file. Valid tests are:
                           apptype, ascii, cdf, compress, elf, encoding,
                           soft, tar, text, tokens
-f, --files-from FILE      read the filenames to be examined from FILE
-F, --separator STRING     use string as separator instead of `:'
-i, --mime                 output MIME type strings (--mime-type and
                           --mime-encoding)
  --apple                output the Apple CREATOR/TYPE
  --extension            output a slash-separated list of extnsions
  --mime-type            output the MIME type
  --mime-encoding        output the MIME encoding
-k, --keep-going           don't stop at the first match
-l, --list                 list magic strength
-L, --dereference          follow symlinks (default)
-h, --no-dereference       don't follow symlinks
-n, --no-buffer            do not buffer output
-N, --no-pad               do not pad output
-0, --print0               terminate filenames with ASCII NUL
-p, --preserve-date        preserve access times on files
-P, --parameter            set file engine parameter limits
                           indir        15 recursion limit for indirection
                           name         30 use limit for name/use magic
                           elf_notes   256 max ELF notes processed
                           elf_phnum   128 max ELF prog sections processed
                           elf_shnum 32768 max ELF sections processed
-r, --raw                  don't translate unprintable chars to \ooo
-s, --special-files        treat special (block/char devices) files as
                         ordinary ones
-C, --compile              compile file specified by -m
-d, --debug                print debugging messages
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;必要参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-b 文件名不显示
-c 显示详细处理信息
-L 操作对象为符号链接所指向的对象
-z 压缩文件的处理
-C 列出magic.mgc的输出
-n 将结果输出到标准输出
-f&amp;lt;文件名&amp;gt; 指定文件名
-m&amp;lt;文件名&amp;gt; 指定魔法数字名
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选择参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--help 显示帮助信息
 -v 显示版本信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;p&gt;1.查看所有文件类型 file *
2.2.查看具体某一文件的类型：file filename
3.-b参数，打印出不包含文件名的文件类型信息:
4.-z 参数，可以获取用gzip、zip压缩过的文件的类型
5.-n参数，将信息标准输出&lt;/p&gt;
&lt;p&gt;言归正传，file_test.sh 脚本主要验证是否支持多种文件格式，比如tar tar.gz rpm c ascii elf等。&lt;/p&gt;
&lt;h5 id="yong-li-she-zhi"&gt;用例设置：&lt;/h5&gt;
&lt;p&gt;Test01：测试文件命令是否识别ASCII文本文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将文本写入已知文件
2）使用'file'命令获取已知文件的类型
例如：文件xyz.txt
3）grep为关键字&amp;ldquo;ASCII文本&amp;rdquo;的输出
'file'命令
4）如果上述步骤成功，则将测试声明为PASS,否则为fail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test02：测试文件命令是否能识别bash shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将一个小shell脚本写入一个已知文件
2）使用'file'命令获取已知文件的类型
例如：文件xyz.sh
3）从'file'命令的输出中Grep关键字&amp;ldquo;Bourne-Again shell脚本&amp;rdquo;

4）如果上述步骤成功，则将测试声明为PASS,否则为fail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test03：测试文件命令是否能识别bash shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用Korn shell脚本执行类似的测试（如Test02）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test04：测试文件命令是否可以识别C shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用C shell脚本执行类似的测试（如Test02）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test05：测试文件命令是否可以识别C程序文本
     使用test2类似方法测试c程序文本&lt;/p&gt;
&lt;p&gt;Test06：测试文件命令是否可以识别ELF二进制可执行文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;1）使用readelf确定主机是大端还是小端,并分别为字符串&amp;ldquo;MSB&amp;rdquo;或&amp;ldquo;LSB&amp;rdquo;分配TEST_ARCH&lt;/span&gt;
&lt;span class="x"&gt;2）将小C程序写入已知的&amp;ldquo;.c&amp;rdquo;文件&lt;/span&gt;
&lt;span class="x"&gt;3）使用&amp;ldquo;cc&amp;rdquo; Ex：cc xyz xyz.c&lt;/span&gt;
&lt;span class="x"&gt;4）使用file命令获取对象文件的类型&lt;/span&gt;
&lt;span class="x"&gt;5）在file输出中，grep ELF .*-bit &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TEST_ARCH&lt;/span&gt;&lt;span class="x"&gt; executable, .* 字符。&lt;/span&gt;
&lt;span class="x"&gt;6）如果上述命令成功，则将测试声明为PASS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test07：测试文件命令是否可以识别tar文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将文本写入三个不同的文件
 2）使用&amp;ldquo;tar&amp;rdquo;命令存档文件
例如：tar -cf ...
3）使用&amp;ldquo;file&amp;rdquo;命令获取归档文件的类型
例如：文件xyz.tar
4）grep从上面的'file'命令的输出的中匹配字符串&amp;ldquo;tar&amp;rdquo;
5）声明测试为PASS，如果上面的步骤成功，否则声明测试为FAIL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test08：测试文件命令是否可以tar zip文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1）将文本写入三个不同的文件
2）使用&amp;ldquo;tar&amp;rdquo;命令存档文件
  例如：tar -cf ...
3）使用'gzip'命令来压缩tar文件
 例如：gzip -f xyz.tar
4）使用&amp;ldquo;file&amp;rdquo;命令获取归档文件的类型
   例如：文件xyz.tar.gz
5）grep从上面的文件commnand字符串&amp;ldquo;gzip压缩数据，。*&amp;rdquo;
6）声明测试为PASS，如果上面的步骤成功，否则声明测试为FAIL
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="dai-ma-pian-duan"&gt;代码片段&lt;/h5&gt;
&lt;p&gt;测试file命令能识别出ASCII文本文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export TCID=file01&lt;/span&gt;
&lt;span class="x"&gt;export TST_COUNT=1&lt;/span&gt;

&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/tst_resm TINFO "TEST &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;1:file command recogizes ASCII text files" &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; log信息&lt;/span&gt;

&lt;span class="x"&gt;cat &amp;gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/test_file.txt &amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="x"&gt;this is a text file&lt;/span&gt;
&lt;span class="x"&gt;to test file command&lt;/span&gt;
&lt;span class="x"&gt;EOF                          &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; 制作txt文本文件&lt;/span&gt;

&lt;span class="cp"&gt;##&lt;/span&gt;&lt;span class="c"&gt;执行file命令并检查输出。&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;file &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/test_file.txt &amp;gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/file.out 2&amp;gt;&amp;amp;1&lt;/span&gt;

&lt;span class="x"&gt;if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -eq 0 ]  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; 判断返回值是否为０，验证file命令执行是否成功&lt;/span&gt;
&lt;span class="x"&gt;then&lt;/span&gt;
&lt;span class="x"&gt;    grep -q "ASCII text" &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/file.out &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; 匹配输出类型是否整齐&lt;/span&gt;
&lt;span class="x"&gt;    if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -eq 0 ]&lt;/span&gt;
&lt;span class="x"&gt;    then&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/test_resm TPASS "file: Recognised ASCII file correctly"&lt;/span&gt;
&lt;span class="x"&gt;        rm -f &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/test_file.txt&lt;/span&gt;
&lt;span class="x"&gt;    else&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/tst_res TFAIL &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/file.out \&lt;/span&gt;
&lt;span class="x"&gt;            "file: Failed to recognise ASCII file correctlyi. Reason:"&lt;/span&gt;
&lt;span class="x"&gt;        TFAILCNT=&lt;/span&gt;&lt;span class="p"&gt;$((&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TFAILCNT&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="x"&gt; code＋１&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;     &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/tst_res TFAIL &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/file.out  \&lt;/span&gt;
&lt;span class="x"&gt;            "file: failed to recognize ASCII file correctly\t\t"&lt;/span&gt;
&lt;span class="x"&gt;     TFAILCNT=&lt;/span&gt;&lt;span class="p"&gt;$((&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TFAILCNT&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="test-2_2"&gt;TEST #2&lt;/h1&gt;
&lt;h1 id="ce-shi-shi-fou-shi-bie-shelljiao-ben"&gt;测试是否识别shell脚本&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export TCID=file02&lt;/span&gt;
&lt;span class="x"&gt;export TST_COUNT=2&lt;/span&gt;

&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/tst_resm TINFO "TEST &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;2: file command recognizes bash shell scripts"&lt;/span&gt;

&lt;span class="x"&gt;cat &amp;gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/bash_script.sh &amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;! /bin/bash&lt;/span&gt;

&lt;span class="x"&gt;echo "this is a shell script"&lt;/span&gt;
&lt;span class="x"&gt;echo "used to test file command"&lt;/span&gt;

&lt;span class="x"&gt;EOF&lt;/span&gt;

&lt;span class="x"&gt;file &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/bash_script.sh &amp;gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/file.out 2&amp;gt;&amp;amp;1&lt;/span&gt;

&lt;span class="x"&gt;if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -eq 0 ]&lt;/span&gt;
&lt;span class="x"&gt;then&lt;/span&gt;
&lt;span class="x"&gt;    grep -q "Bourne-Again shell script" &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/file.out&lt;/span&gt;
&lt;span class="x"&gt;    if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -eq 0 ]&lt;/span&gt;
&lt;span class="x"&gt;    then&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/tst_resm TPASS "file: Recognised bash shell script correctly"&lt;/span&gt;
&lt;span class="x"&gt;        rm -f &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/bash_script.sh&lt;/span&gt;
&lt;span class="x"&gt;    else&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/tst_res TFAIL &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPTMP&lt;/span&gt;&lt;span class="x"&gt;/file.out \&lt;/span&gt;
&lt;span class="x"&gt;            "file: Failed to recognise bash shell script. Reason"&lt;/span&gt;
&lt;span class="x"&gt;        TFAILCNT=&lt;/span&gt;&lt;span class="p"&gt;$((&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TFAILCNT&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LTPBIN&lt;/span&gt;&lt;span class="x"&gt;/tst_resm TFAIL "file: Failed to recognize bash shell script"&lt;/span&gt;
&lt;span class="x"&gt;    TFAILCNT=&lt;/span&gt;&lt;span class="p"&gt;$((&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TFAILCNT&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他测试代码同上面类似，不再一一分析。&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Fri, 03 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-06-03:2016/06/03/LTP/</guid><category>LTP</category></item><item><title>LTP－Command</title><link>http://king32783784.github.io/2016/06/02/LTP/</link><description>&lt;body&gt;&lt;p&gt;本节将重点分析commands部分的用例。&lt;/p&gt;
&lt;h4 id="commandzhu-yao-yong-li"&gt;Command主要用例&lt;/h4&gt;
&lt;p&gt;主要case包括：&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ade&lt;/td&gt;
&lt;td&gt;ar file ld ldd nm objdump size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fileutils&lt;/td&gt;
&lt;td&gt;cp ln mkdir mv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tpm-tools&lt;/td&gt;
&lt;td&gt;tmp tpmtoken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="ade"&gt;ade&lt;/h4&gt;
&lt;p&gt;ade包括对ar、file、ld、ldd、nm、objdump、size命令的验证测试。&lt;/p&gt;
&lt;h5 id="ar"&gt;ar&lt;/h5&gt;
&lt;p&gt;ar命令是Linux的一个备份压缩命令，可以创建、修改备存文件(archive)，或从备存文件中抽取成员文件。备存文件以一定的结构打包一个至多个其它文件（即成员文件），且成员文件的内容、模式、时间戳等信息将被保存在备存文件中。常见的应用是，使用ar命令将多个目标文件（&lt;em&gt;.o）打包为静态链接库文件（&lt;/em&gt;.a)。&lt;/p&gt;
&lt;p&gt;引出一个问题，库是什么？本质上讲库是一种可执行代码的二进制形式，可以被操作系统加载到内存执行。linux库分为两种：静态库和动态库。区别在于，静态库是在编译过程中已经被载入可执行程序，可执行程序一般较大；共享库（动态库）是可执行程序运行时才加载到内存，编译时仅简单的引用，因此可执行程序较小。库是如何产生的呢？静态库的后缀是.a，它的产生分为两步：１．由源码编译生成一堆.o，每个.o包含这个编译单元的符号表；２．ar命令将很多.o文件打包转换为.a,形成静态库。&lt;/p&gt;
&lt;p&gt;ar命令的常用参数&lt;/p&gt;
&lt;p&gt;在 ar 命令中，可以从集 cClosTv 中指定任何数量的可选标志。必须从标志集 dhmopqrstwx 中指定一个标志。如果选择-m 或 -r 标志，您可能还要指定一个位置标志（-a 、-b 或-i ）；对于 -a 、-b 或-i 标志，您必须还指定在 ArchiveFile （PositionName ）中一个文件的名称，此名称紧跟在标志列表后，并由空格隔开。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-a PositionName 在 PositionName 参数标识的现有文件后安置指定的文件。
-b PositionName 在 PositionName 参数标识的现有文件前安置指定的文件。
-c  禁止在创建库 时产生的正常消息。 
-C  阻止解压缩的文件替换文件系统中同名的文件。
-d  从库中删除指定的文件。
-g  对压缩文档成员进行排序以确保用最小数量的未用空间获得最大的加载效率。在几乎所有情况下，-g 标志以压缩文档成员的逻辑链接顺序物理地安置它们。最终生成的压缩文档通常写成小格式，这样该标志可用来将大格式压缩文档转换成小格式压缩文档。包含 64 位XCOFF 对象的压缩文档不能创建成或转换至小格式。
-h  将指定的文件的成员报头中的修改时间设置为当前日期和时间。如果不指定任何文件名称，则 ar 命令设置所有成员报头的时间戳记。此标志不能和-z 标志一起使用。
-i PositionName 在 PositionName 参数标识的现有文件前安置指定的文件（和 -b 相同）。
-l  将临时文件置于当前（本地）目录中，而非 TMPDIR 目录中（缺省为 /tmp ）。
-m  将指定的文件移动到库中的某个其它位置。缺省情况下，它将指定的文件移动到库的末尾。使用位置标志（abi ）来指定某个其它位置。
-o  对压缩文档成员进行排序以确保用最小数量的未用空间获得最大的加载效率。在几乎所有情况下，-o 标志以压缩文档成员的逻辑链接顺序物理地安置它们。最终生成的压缩文档通常写成大格式，这样该标志可用来将小格式压缩文档转换成大格式压缩文档。
-p  将 Files 参数中指定的文件的内容或在 ArchiveFile 参数中指定的所有文件（如果您不指定任何文件）都写至标准输出。
-q  将指定的文件添加到库的末尾。另外，如果指定同一个文件两次，它可能被放入库中两次。
-r  如果指定的文件已经存在于库中，则替换它。因为指定的文件在库中占据它们替换的文件的同一个位置，位置标志没有任何附加的影响。当和 -u 标志（更新）一起使用时，-r 标志仅替换自从最后一次添加到库中以后修改的文件。
如果指定的文件不存在于库中，则 ar 命令添加它。在这种情况下，位置标志影响放置。如果不指定位置，则将新文件置于库的末尾。如果指定同一个文件两次，它可能被放入库中两次。

-s  无论 ar 命令是否修改了库内容都强制重新生成库符号表。请在库上使用 strip 命令之后，使用此标志来恢复库符号表。
-t  将库的目录写至标准输出。如果指定文件名称，则仅显示指定的那些文件。如果不指定任何文件，-t 标志列出库中的所有文件。
-T  如果压缩文档成员名称比文件系统支持的长，则允许文件名称截短。此选项无效，因为文件系统支持的名称长度等于 255 个字符的最大压缩文档成员名称。
-u  仅复制自它们最后一次复制起更改的文件（请参阅先前讨论过的 -r 标志）。
-v  将建立新库的详细的逐个文件的描述写至标准输出。当和 -t 标志一起使用时，它给出类似于 ls -l 命令给出的长列表。当和 -x 标志一起使用时，它在每个文件前加一个名称。当和 -h 标志一起使用，它列出成员名称和更新的修改时间。
-w  显示压缩文档符号表。每个符号和其中定义此符号的文件的名称一起列出。
-x  通过将指定的文件复制到当前目录来解压缩它们。这些副本和原始文件（保留在库中）具有相同的名称。如果不指定任何文件，-x 标志复制库中的所有文件。此过程不会更改库。
-Xmode  指定 ar 应检查的目标文件的类型。mode 必须是以下项之一：
32
仅处理 32 位目标文件
64
仅处理 64 位目标文件
32_64
处理 32 位 和 64 位目标文件
缺省值是处理 32 位目标文件（忽略 64 位对象）。mode 还可以用 OBJECT_MODE 环境变量来设置。例如，OBJECT_MODE=64 使 ar 处理任何 64 位对象并忽略 32 位对象。-X 标志覆盖 OBJECT_MODE 变量。
-z  创建压缩文档的临时副本并对副本执行所有要求的修改。当所有操作成功完成时，压缩文档的工作副本覆盖原始副本。此标志不能和 -h 标志一起使用。
ArchiveFile 指定压缩文档文件名称；必需。
MemberName ...  各压缩文档成员的名称。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例１．ar rcs libxxxx.a xx1.o xx2.o&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;参数r:　在库中插入模块（替换）。当插入的模块名已经在库中存在，则替换同名的模块。如果若干模块中有一个模块在库中不存在，ar显示一个错误消息，并不替换其他同名模块。默认的情况下，新的成员增加在库的结尾处，可以使用其他任选项来改变增加的位置。

参数c:　创建一个库。不管库是否存在，都将创建。

参数s:　创建目标文件索引　这在创建较大的库时能加快时间。（补充：如果不需要创建索引，可改成大写S参数；如果。a文件缺少索引，可以使用ranlib命令添加）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例２．创建一个库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -q lib.a strlen.o strcpy.o

如果 lib.a 库不存在，则此命令创建它，并将文件 strlen.o 和 strcpy.o 的副本输入其中。如果 lib.a 库存在，则此命令在不检查相同成员的情况下，将新的成员添加到末尾。v 标志设置详细方式，在此方式中ar 命令在其进行时显示进程报告。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例３．显示库的目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -t lib.a

此命令列出了 lib.a 库的目录，显示类似于 ls -l 命令的输出的长列表。要只列出成员文件名称，则省略-v 标志。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例4. 替换或添加新成员到库中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -r lib.a strlen.o strcat.o

此命令替换成员 strlen.o 和 strcat.o 。如果 lib.a 如示例 1 中显示的那样创建，则替换strlen.o 成员。因为不存在名为 strcat.o 的成员，所以它被添加到库的末尾。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例５. 指定在何处插入新成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -r -b strlen.o lib.a strcmp.o

此命令添加 strcmp.o 文件，并将该新成员置于 strlen.o 成员之前。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例６．要更新一个已经更改过的成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -r -u lib.a strcpy.o

此命令替换现有 strcpy.o 成员，但仅当文件 strcpy.o 自从最后一次添加到库后已经修改时才替换它。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例７　要更改库成员的顺序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -m -a strcmp.o lib.a strcat.o strcpy.o

此命令将成员 strcat.o 和 strcpy.o 移动到紧跟在 strcmp.o 成员之后的位置。保留 strcat.o 和 strcpy.o 成员的相对顺序。换句话说，如果在移动之前strcpy.o 成员在 strcat.o 成员之前，那么（移动后）它依旧如此。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例８　要解压缩库成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -x lib.a strcat.o strcpy.o

此命令将成员 strcat.o 和 strcpy.o 分别复制到名为 strcat.o 和 strcpy.o 的文件。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例９　要解压缩并重命名一个成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -p lib.a strcpy.o &amp;gt;stringcopy.o
此命令将成员 strcpy.o 复制到一个名为 stringcopy.o 的文件。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例10 要删除一个成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -v -d lib.a strlen.o

此命令从 lib.a 库中删除成员 strlen.o 。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例11 要从多个用 ld 命令创建的共享模块中创建一个压缩文档库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -r -v libshr.a shrsub.o shrsub2.o shrsub3.o ...

此命令从名为 shrsub.o 、shrsub2.o 、shrsub3.o 等等的共享模块中创建名为libshr.a 的压缩文档库。要编译并链接使用 libshr.a 压缩文档库的 main 程序，请使用以下命令：

cc -o main main.c -L/u/sharedlib -lshr
main 程序现在是可执行的。main 程序引用的任何符号（包含在libshr.a 压缩文档库中）已经因延迟分辨率而作了标记。-l 标志指定应在libshr.a 库中搜索这些符号。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例12 要列出 lib.a 的内容（忽略任何 32 位目标文件）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar -X64 -t -v lib.a
要从 lib.a 解压缩所有 32 位的目标文件
ar -X32 -x lib.a
要列出 lib.a 中的所有文件，无论是 32 位、64 位或非对象，请输入：
ar -X32_64 -t -v lib.a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例13 在shell脚本中使用
　　
    Bash代码
    OS=&lt;code&gt;uname -r&lt;/code&gt;
    ar rcs libhycu.a.$OS *.o&lt;/p&gt;
&lt;p&gt;示例14 在makefile中使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Makefile代码
$（BIN1）: $（BIN1_OBJS）
ar rcs $@ $^
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例15 创建并使用静态库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;第一步：编辑源文件，test.h test.c main.c。其中main.c文件中包含main函数，作为程序入口；test.c中包含main函数中需要用到的函数。

vi test.h test.c main.c

第二步：将test.c编译成目标文件。

gcc -c test.c
如果test.c无误，就会得到test.o这个目标文件。

第三步：由。o文件创建静态库。

ar rcs libtest.a test.o

第四步：在程序中使用静态库。

gcc -o main main.c -L. -ltest
因为是静态编译，生成的执行文件可以独立于。a文件运行。

第五步：执行。

./main
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例16 创建并使用动态库
　　
    第一步：编辑源文件，test.h test.c main.c。其中main.c文件中包含main函数，作为程序入口；test.c中包含main函数中需要用到的函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi test.h test.c main.c

第二步：将test.c编译成目标文件。

gcc -c test.c
前面两步与创建静态库一致。

第三步：由。o文件创建动态库文件。

gcc -shared -fPIC -o libtest.so test.o

第四步：在程序中使用动态库。

gcc -o main main.c -L. -ltest
当静态库和动态库同名时，gcc命令将优先使用动态库。

第五步：执行。

LD_LIBRARY_PATH=. ./main
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，看一下ltp是如何测试ar命令的。&lt;/p&gt;
&lt;p&gt;ar文件下包括：&lt;/p&gt;
&lt;p&gt;ar01  file0.in  file10.in  file1.in  file2.in  file3.in  file4.in  file5.in  file6.in  file7.in  file8.in  file9.in  Makefile等文件，其中ar01是shell编写的测试脚本。
测试目的，测试ar命令的不同选项的功能。测试策略，通过比较单独指定参数和组合参数测试结果进行判断，如果相同测试通过，如果不同，测试失败。&lt;/p&gt;
&lt;p&gt;ar测试项的参数为: export TCdat=$LTPROOT/testcases/bin; ar01　直接执行ar01即可。&lt;/p&gt;
&lt;p&gt;测试条件，系统存在ar命令。在运行config时，会进行check:如　&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4165&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;
&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4181&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="sr"&gt;/bin/&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;
&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4192&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序分析：&lt;/p&gt;
&lt;p&gt;创建用到的临时文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;LIST="file1.in file2.in file3.in file4.in file5.in file6.in file7.in file8.in file9.in file10.in"&lt;/span&gt;
&lt;span class="x"&gt;LIST="&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt;"&lt;/span&gt;

&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="x"&gt; function&lt;/span&gt;

&lt;span class="x"&gt;setup()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    for i in &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LIST&lt;/span&gt;&lt;span class="x"&gt;;do&lt;/span&gt;
&lt;span class="x"&gt;        touch &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    done&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果判定，判断子case的返回值是否为０，TCRESULT为标志位，初始值为０，出错TCRESULT置为１，不同测试内容分别返回不同的编号。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;Cleanup&lt;/span&gt;&lt;span class="x"&gt; funciton&lt;/span&gt;
&lt;span class="x"&gt;cleanup()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TCRESULT&lt;/span&gt;&lt;span class="x"&gt; = 0 ];then&lt;/span&gt;
&lt;span class="x"&gt;        echo "-----------ar command passed the system test --------"&lt;/span&gt;
&lt;span class="x"&gt;        exit 0&lt;/span&gt;
&lt;span class="x"&gt;    else&lt;/span&gt;
&lt;span class="x"&gt;        echo "-----------ar command failed the system test --------"&lt;/span&gt;
&lt;span class="x"&gt;        exit 1&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;crtest() &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -ne 0]&lt;/span&gt;
&lt;span class="x"&gt;    then&lt;/span&gt;
&lt;span class="x"&gt;        TCRESULT=1&lt;/span&gt;
&lt;span class="x"&gt;        echo "FAIL - could not create lib.a"&lt;/span&gt;
&lt;span class="x"&gt;        cleanup&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;ttest() &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -ne 0 ]&lt;/span&gt;
&lt;span class="x"&gt;then&lt;/span&gt;
&lt;span class="x"&gt;    TCRESULT=1&lt;/span&gt;
&lt;span class="x"&gt;    echo "FAIL - could not output table from lib.a to lib.a.stdout"&lt;/span&gt;
&lt;span class="x"&gt;    cleanup&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;rtest() &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -ne 0 ]&lt;/span&gt;
&lt;span class="x"&gt;    then&lt;/span&gt;
&lt;span class="x"&gt;        TCRESULT=1&lt;/span&gt;
&lt;span class="x"&gt;        echo "FAIL - could not add file into lib.a"&lt;/span&gt;
&lt;span class="x"&gt;        cleanup&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;mtest() &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    if [ &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;? -ne 0 ]&lt;/span&gt;
&lt;span class="x"&gt;    then&lt;/span&gt;
&lt;span class="x"&gt;        TCRESULT=1&lt;/span&gt;
&lt;span class="x"&gt;        echo "FAIL - could not move file into lib.a"&lt;/span&gt;
&lt;span class="x"&gt;        cleanup&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过结果判定的设置来看，主要验证ar命令的库的创建、库列表信息导出、往库中添加文件、移除库中的文件。&lt;/p&gt;
&lt;p&gt;测试代码片段：&lt;/p&gt;
&lt;p&gt;标志&amp;ldquo;a"：在 PositionName 参数标识的现有文件后安置指定的文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;ar -cr &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TCtmp&lt;/span&gt;&lt;span class="x"&gt;/lib.a file1.in file3.in&lt;/span&gt;
&lt;span class="x"&gt;crtest&lt;/span&gt;

&lt;span class="x"&gt;ar -ra file1.in &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TCtmp&lt;/span&gt;&lt;span class="x"&gt;/lib.a file2.in&lt;/span&gt;
&lt;span class="x"&gt;rtest&lt;/span&gt;

&lt;span class="x"&gt;ar -t &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TCtmp&lt;/span&gt;&lt;span class="x"&gt;/lib.a &amp;gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TCtmp&lt;/span&gt;&lt;span class="x"&gt;/lib.a.stdout&lt;/span&gt;
&lt;span class="x"&gt;tttest&lt;/span&gt;

&lt;span class="x"&gt;if diff -b &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TCtmp&lt;/span&gt;&lt;span class="x"&gt;/lib.a.exp &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;TCtmp&lt;/span&gt;&lt;span class="x"&gt;/lib.a.stdout &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
&lt;span class="x"&gt;then&lt;/span&gt;
&lt;span class="x"&gt;    echo "-)1"&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;    TCRESULT=1&lt;/span&gt;
&lt;span class="x"&gt;    echo "FAIL -ar with -a option does not place file after "posname"&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体测试内容列表：&lt;/p&gt;
&lt;p&gt;（１）The 'a' flag causes files to be placed after 'posname'.&lt;/p&gt;
&lt;p&gt;（２）The 'a' flag with the 'm' option causes files to be moved after 'posname'&lt;/p&gt;
&lt;p&gt;（３）The 'b' flag causes files to be placed before 'posname'.&lt;/p&gt;
&lt;p&gt;（４）The 'b' flag with 'm' option causes files to be moved before 'posname'.&lt;/p&gt;
&lt;p&gt;（５）-c option suppress the messages&lt;/p&gt;
&lt;p&gt;（６）The 'qc' option causes suppresion of the default message when　'afile' is created&lt;/p&gt;
&lt;p&gt;（７）The -d option deletes files from archive when names are specified.&lt;/p&gt;
&lt;p&gt;（８）The -d option does not delete files from archive when no names　are specified.&lt;/p&gt;
&lt;p&gt;（９）The -d does not affect behaviour of -s option.&lt;/p&gt;
&lt;p&gt;（10）The 'i' flag causes files to be placed before 'posname'.&lt;/p&gt;
&lt;p&gt;（11) The 'i' flag with 'm' option causes files to be moved before 'posname'.&lt;/p&gt;
&lt;p&gt;(12) m option moves the files to end of the archive&lt;/p&gt;
&lt;p&gt;(13) The -p option causes only printing of contents of file contained in archive.&lt;/p&gt;
&lt;p&gt;(14) The -p does not affect behaviour of -s option.&lt;/p&gt;
&lt;p&gt;(15) The command 'ar -q afile name' appends name to the end of 'afile'.&lt;/p&gt;
&lt;p&gt;(16) q option does not affect the behaviour of option s&lt;/p&gt;
&lt;p&gt;(17) The -s causes regeneration of symbol table even if a symbol table exists.&lt;/p&gt;
&lt;p&gt;(18) ar with -t print as desired&lt;/p&gt;
&lt;p&gt;(19) The -t does not affect behaviour of -s option.&lt;/p&gt;
&lt;p&gt;(20)The 'u' flag causes files only with later modification date than in archive are replaced.&lt;/p&gt;
&lt;p&gt;(21) ar with -v flag to print a line for each file&lt;/p&gt;
&lt;p&gt;(22) The -v option produces a verbose listing like ls -n&lt;/p&gt;
&lt;p&gt;(23) The 'v' option causes the 'x' option to display a filename for each file extracted.&lt;/p&gt;
&lt;p&gt;(24) The command 'ar -x afile ' causes all files from the archive to be extracted.&lt;/p&gt;
&lt;p&gt;(25) The command 'ar -x afile name name' causes only named files from the archive to be extracted.&lt;/p&gt;
&lt;p&gt;(26) This test will fail under pan, so it's commented out by default.&lt;/p&gt;
&lt;p&gt;(27) Signal SIGHUP&lt;/p&gt;
&lt;p&gt;(28) Signal SIGQUIT&lt;/p&gt;
&lt;p&gt;(29) Signal SIGHUP; ar should not remove archive that existed before invocation.&lt;/p&gt;
&lt;p&gt;(30) Signal SIGINIT; ar should not remove archive that existed before invocation.&lt;/p&gt;
&lt;p&gt;(31) Signal SIGQUIT; ar should not remove archive that existed before invocation.&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Thu, 02 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-06-02:2016/06/02/LTP/</guid><category>LTP</category></item><item><title>LTP－Case list</title><link>http://king32783784.github.io/2016/06/01/LTP/</link><description>&lt;body&gt;&lt;p&gt;该topic将深入分析ltp的测试内容，着重于具体每个case的测试内容及测试方法。通过对ltp case的分析，加强linux系统的理解和用例设计。本节主要整理ltp的包括测试case的类型和case列表。&lt;/p&gt;
&lt;h3 id="zheng-ti-qing-kuang"&gt;整体情况&lt;/h3&gt;
&lt;p&gt;case主要分为&amp;rdquo;commands"、&amp;ldquo;kdump"、"kernel"、"misc"、"network"、"open_posix_testsuite"、"realtime"、"lib"等部分，主要内容如下：&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;包含内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;commands&lt;/td&gt;
&lt;td&gt;ade cpio df eject gzip logrotate mail mkfs sshd tar unzip which at cron du fileutils insmod lsmod mkswap su tmp-tools wc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kernel&lt;/td&gt;
&lt;td&gt;connectors controllers firmware hotplug input ipc logging mce-test module power_management sched syscalls tracing containers device-drivers fs include io lib mem numa pty security times&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misc&lt;/td&gt;
&lt;td&gt;crash f00f math&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;network&lt;/td&gt;
&lt;td&gt;busy_poll dctcp iptables netstress nfsv4 rpc stress tcp_fstopen virt can dhcp iproute lib6 multicast nfs sockets tcp_cmds traceroute xinetd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;open_posix_testsuite&lt;/td&gt;
&lt;td&gt;functional tools bin conformance stress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;realtime&lt;/td&gt;
&lt;td&gt;perf profiles stress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kdump&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="commands"&gt;commands&lt;/h4&gt;
&lt;p&gt;主要case包括：&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ade&lt;/td&gt;
&lt;td&gt;ar file ld ldd nm objdump size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;td&gt;cpio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;td&gt;df&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;td&gt;du&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;td&gt;eject&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fileutils&lt;/td&gt;
&lt;td&gt;cp ln mkdir mv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;td&gt;insmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;td&gt;logrotate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;td&gt;lsmod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;td&gt;mail&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;td&gt;mkfs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;td&gt;mkswap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;td&gt;sssd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;td&gt;su&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;td&gt;tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tpm-tools&lt;/td&gt;
&lt;td&gt;tmp tpmtoken&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="kernel"&gt;kernel&lt;/h4&gt;
&lt;p&gt;主要case包括:&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;connectors&lt;/td&gt;
&lt;td&gt;connector pec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;containers&lt;/td&gt;
&lt;td&gt;libclone mountns mqns netns pidns share sysvipc userns utsname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;controllers&lt;/td&gt;
&lt;td&gt;cgroup cgroup_xattr cpuctl cpuset io-throttle memcg pids cgroup_fg cpuacct cpuctl_fj freezer libcontrollers memctl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;device-drivers&lt;/td&gt;
&lt;td&gt;acpi base cpufreq drm locking misc_modules pci tbio usb zram agp block dev_sim_framework nls rcu rtc uaccess v4l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firmware&lt;/td&gt;
&lt;td&gt;fw_load_kernel fw_load_user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fs&lt;/td&gt;
&lt;td&gt;acl dmapi ext4-new-features fs_blnd fs_inod fs_perms fsstress ftest iso9660 linktest mongo proc racer stram acls doio fs-bench fs_di fs_main fs_readonly fsx-linux inode lftest openfile quota_remount scsi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hotplug&lt;/td&gt;
&lt;td&gt;cpu_hotplug memory_hotplug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;io&lt;/td&gt;
&lt;td&gt;aio direct_io disktest ltp-aiodio stress_cd stress_floppy writetest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ipc&lt;/td&gt;
&lt;td&gt;pipeio semaphore&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;logging&lt;/td&gt;
&lt;td&gt;kmsg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mem&lt;/td&gt;
&lt;td&gt;cpuset mem mtest01 mtest06 oom shmt thp vma hugetlb ksm mmapstress mtest05 mtest07 page swapping tunable vmtests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;moudle&lt;/td&gt;
&lt;td&gt;create_module delete_module query_module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;numa&lt;/td&gt;
&lt;td&gt;numa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;power_management&lt;/td&gt;
&lt;td&gt;pm_ilb_test runpwtests01-06 runpwtests_exelusive01-06 pm_cpu_consolidation pm_include pm_sched_domain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pty&lt;/td&gt;
&lt;td&gt;hangup ptem pty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sched&lt;/td&gt;
&lt;td&gt;cfs-scheduler clisrv hypertherading nptl process_stress pthreads sched_stress tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;security&lt;/td&gt;
&lt;td&gt;cap_bound filecaps integrity mmc_security prot_hsymlinks securbits smack tomoyo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;syscalls&lt;/td&gt;
&lt;td&gt;abort accept accept4 access acct add_key adjtimex alarm asyncio bdflush bind brk cacheflush capget capset chdir chmod chown chroot clock_getres clock_nanosleep clock_nanosleep2 clone close cma confstr connect creat dup dup2 dup3 epoll epoll2 epoll_create1 epoll_ctl epoll_pwait epoll_wait eventfd eventfd2 execl execle execlp execv execve execvp exit exit_group faccessat fadvise fallocate fanotify fchdir fchmod fchmodat fchown fchownat fcntl fdatasync flock fmtmsg fork fpathconf fstat fstatat fstatfs fsync ftruncate futex futimesat getcontext getcpu getcwd getdents getdomainname getdtablesize getegid geteuid getgid getgroups gethostbyname_r gethostid gethostname getitimer get_mempolicy getpagesize getpeername getpgid getpgrp getpid getppid getpriority getrandom getresgid getresuid getrlimit get_robust_list getrusage getsid getsockname getsockopt gettid gettimeofday getuid getxattr inotify inotify_init io_cancel ioctl io_destroy io_getevents ioperm iopl io_setup io_submit ipc kcmp keyctl kill lchown lgetxattr link linkat listen llistxattr llseek lseek lstat madvise Makefile mallopt mbind memcmp memcpy memmap memset migrate_pages mincore mkdir mkdirat mknod mknodat mlock mlockall mmap modify_ldt mount move_pages mprotect mq_notify mq_open mq_timedreceive mq_timedsend mq_unlink mremap msync munlock munlockall munmap nanosleep newuname nftw nice open openat paging pathconf pause perf_event_open personality pipe pipe2 poll ppoll prctl pread preadv profil pselect ptrace pwrite pwritev quotactl read readahead readdir readlink readlinkat readv reboot recv recvfrom recvmsg remap_file_pages removexattr rename renameat renameat2 request_key rmdir rt_sigaction rt_sigprocmask rt_sigqueueinfo rt_sigsuspend rt_sigtimedwait sbrk sched_getaffinity sched_getattr sched_getparam sched_get_priority_max sched_get_priority_min sched_getscheduler sched_rr_get_interval sched_setaffinity sched_setattr sched_setparam sched_setscheduler sched_yield select send sendfile sendmsg sendto setdomainname setegid setfsgid setfsuid setgid setgroups sethostname setitimer setns setpgid setpgrp setpriority setregid setresgid setresuid setreuid setrlimit set_robust_list setsid setsockopt set_thread_area set_tid_address settimeofday setuid setxattr sgetmask sigaction sigaltstack sighold signal signalfd signalfd4 sigpending sigprocmask sigrelse sigsuspend sigtimedwait sigwait sigwaitinfo socket socketcall socketpair sockioctl splice ssetmask stat statfs statvfs stime string swapoff swapon switch symlink symlinkat sync sync_file_range syscall sysconf sysctl sysfs sysinfo syslog tee time timerfd timer_getoverrun timer_gettime times tkill truncate ulimit umask umount umount2 uname unlink unlinkat unshare ustat utils utime utimensat utimes vfork vhangup vmsplice wait wait4 waitid waitpid write writev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timers&lt;/td&gt;
&lt;td&gt;clock_gettime clock_settime leapsec timer_create timer_delete timer_settime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tracing&lt;/td&gt;
&lt;td&gt;ftrace&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="misc"&gt;misc&lt;/h4&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;crash&lt;/td&gt;
&lt;td&gt;crash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f00f&lt;/td&gt;
&lt;td&gt;foof&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;math&lt;/td&gt;
&lt;td&gt;abs atof float fptests nextafter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="network"&gt;network&lt;/h4&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;can&lt;/td&gt;
&lt;td&gt;filter-test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dctcp&lt;/td&gt;
&lt;td&gt;dctcp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dhcp&lt;/td&gt;
&lt;td&gt;dhcp_tests dhcp_lib  dnsmasq_tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iproute&lt;/td&gt;
&lt;td&gt;ip_tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iptables&lt;/td&gt;
&lt;td&gt;iptables_tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lib6&lt;/td&gt;
&lt;td&gt;asapi getaddrinfo in6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;multicast&lt;/td&gt;
&lt;td&gt;mc_cmds mc_commo mc_gethost mc_member mc_opts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netstress&lt;/td&gt;
&lt;td&gt;netstress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nfs&lt;/td&gt;
&lt;td&gt;fsx-linux nfslock01 nfsstat01 nfs_stress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nfsv4&lt;/td&gt;
&lt;td&gt;acl locks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rpc&lt;/td&gt;
&lt;td&gt;basic_tests rpc-tirpc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sockets&lt;/td&gt;
&lt;td&gt;socket&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stress&lt;/td&gt;
&lt;td&gt;broken_ip dns ftp http icmp interface  ipsec multicast ns-tools route ssh tcp udp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tcp_cmds&lt;/td&gt;
&lt;td&gt;arping echo ftp netstat rcp rsh sendfile tcpdump trackpath clockdiff finger host ipneigh ping rdist rlogin rwho ssh telnet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tcp_fastopen&lt;/td&gt;
&lt;td&gt;tcp_fastopen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;traceroute&lt;/td&gt;
&lt;td&gt;traceroute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;virt&lt;/td&gt;
&lt;td&gt;gre01 ipvlan macvlan macvtap vlan vxlan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xinted&lt;/td&gt;
&lt;td&gt;xinted&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="open_posix_testsuite"&gt;open_posix_testsuite&lt;/h4&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bin&lt;/td&gt;
&lt;td&gt;run-all-posix-option-group-tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conformance&lt;/td&gt;
&lt;td&gt;behavior definitions interfaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functional&lt;/td&gt;
&lt;td&gt;mqueues semaphores threads timers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stress&lt;/td&gt;
&lt;td&gt;mqueues semaphores signals threads timers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="realtime"&gt;realtime&lt;/h4&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;case&lt;/th&gt;
&lt;th&gt;包含子case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;func&lt;/td&gt;
&lt;td&gt;async_handler hrtimer-prio matrix_mult periodic_cpu_load pi-tests prio-wake rt-migrate sched_jitter thrad_clock gtod_latency measurement pi_perf prio-preempt pthread_kill_latency sched_football sched_letency&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m4&lt;/td&gt;
&lt;td&gt;m4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perf&lt;/td&gt;
&lt;td&gt;latency&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stress&lt;/td&gt;
&lt;td&gt;pi-tests&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来会深入分析每个case的具体测试目的及内容。ltp测试用例主要采用shell和Ｃ编写。&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Wed, 01 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-06-01:2016/06/01/LTP/</guid><category>LTP</category></item><item><title>Python-HOWTOS(一）</title><link>http://king32783784.github.io/2016/03/11/python/</link><description>&lt;body&gt;&lt;p&gt;Python HOWTOS 是一些单一的、特定的主题并试图覆盖python大部分内容，参考linux howto形成的集合，部分内容比python库包含更多的内容。
目前，包括这些topic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将python2代码移植到python3&lt;/li&gt;
&lt;li&gt;移植扩展模块到python3&lt;/li&gt;
&lt;li&gt;Curses编程&lt;/li&gt;
&lt;li&gt;Descriptor 使用方法&lt;/li&gt;
&lt;li&gt;函数式编程方法&lt;/li&gt;
&lt;li&gt;Logging使用方法&lt;/li&gt;
&lt;li&gt;Logging Cookbook&lt;/li&gt;
&lt;li&gt;正则表达式使用方法&lt;/li&gt;
&lt;li&gt;Socket编程方法&lt;/li&gt;
&lt;li&gt;排序使用方法&lt;/li&gt;
&lt;li&gt;Unicode使用方法&lt;/li&gt;
&lt;li&gt;如何通过urllib包获取网络资源&lt;/li&gt;
&lt;li&gt;Argparse教程&lt;/li&gt;
&lt;li&gt;IP地址模块介绍&lt;/li&gt;
&lt;li&gt;参数解析方法&lt;/li&gt;
&lt;li&gt;CPython中DTrace和SystemTap使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jiang-python2dai-ma-yi-zhi-dao-python3"&gt;将python2代码移植到python3&lt;/h3&gt;
&lt;p&gt;Python3是python的未来，与此同时，Python2仍然在使用，使用这两个主流版本的python开发项目是件好事。本指南将帮助我们如何更好的使用python2&amp;amp;3.如果想查看扩展模块级的信息，可以查看移植扩展模块到python3[].如果想了解python3的出现原因，可以查看Nick Coghlan's&lt;a href="https://ncoghlan-devs-python-notes.readthedocs.io/en/latest/python3/questions_and_answers.html"&gt;Python 3 Q&amp;amp;A&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="jian-yao-shuo-ming"&gt;简要说明&lt;/h4&gt;
&lt;p&gt;为了使你的项目兼容python2/3，基本步骤是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.只担心支持python2.7&lt;/li&gt;
&lt;li&gt;2.确保测试覆盖，（&lt;a href="https://pypi.python.org/pypi/coverage"&gt;coverage.py&lt;/a&gt;；pip install coverage)&lt;/li&gt;
&lt;li&gt;3.学习python2&amp;amp;3的不同&lt;/li&gt;
&lt;li&gt;4.使用&lt;a href="https://python-modernize.readthedocs.org/en/latest/"&gt;Modernize&lt;/a&gt;或&lt;a href="python-future.org/automatic_conversion.html"&gt;Futurize&lt;/a&gt;去更新代码（pip install modernize 或 pip install future)&lt;/li&gt;
&lt;li&gt;5.使用&lt;a href="https://pypi.python.org/pypi/pylint"&gt;Pylint&lt;/a&gt;确保没有回退到不支持python3(pip install pylint)&lt;/li&gt;
&lt;li&gt;6.使用&lt;a href="https://pypi.python.org/pypi/caniusepython3"&gt;caniusepython3&lt;/a&gt;找出哪些依赖影响了python3的使用（pip install caniusepython3)&lt;/li&gt;
&lt;li&gt;7.但这些依赖不在影响集成，需要确保可以一直兼容python2&amp;amp;3(&lt;a href="https://pypi.python.org/pypi/tox"&gt;tox&lt;/a&gt;可以帮助你应付不同版本的测试；pip install tox)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果放弃对python2的支持，在学习了python2&amp;amp;3的差异之后，可以通过&lt;a href="https://docs.python.org/3/library/2to3.html"&gt;2&amp;amp;3&lt;/a&gt;转换代码，并可以忽略其他步骤。&lt;/p&gt;
&lt;h4 id="xiang-xi-xin-xi"&gt;详细信息&lt;/h4&gt;
&lt;p&gt;同时支持python2&amp;amp;3的关键是今天你就可以开始了。尽管你的依赖现在不支持python3，并不意味着你的代码现在不支持python3.大多为了支持python3，需要清理python2的代码。&lt;/p&gt;
&lt;p&gt;另一个关键是更新python2支持python3已有大量的自动化工具。 虽然必须让一些文字数据和二进制数据API去支持Python 3，但底层的转换工作可以由自动化工具去转换。&lt;/p&gt;
&lt;p&gt;当更新代码以支持python2&amp;amp;3时，一定要记住这些要点的详细信息。&lt;/p&gt;
&lt;h4 id="drop-support-for-python-26-and-older"&gt;Drop support for Python 2.6 and older&lt;/h4&gt;
&lt;p&gt;尽管可以让python2.5支持python3,但只使用python2.7要简单的多。如果不打算放弃python2.5，&lt;a href="https://pypi.python.org/pypi/six"&gt;six&lt;/a&gt;可以帮助兼容python2.5和python3(pip install six).但这个专题，几乎不能提供帮助。&lt;/p&gt;
&lt;p&gt;如果跳过python2.5和之前版本，一些必要的修改可以让你的代码看起来像纯正的ｐｙｔｈｏｎ代码。最坏的情况需要用函数替换一些方法或import的一些内置函数。&lt;/p&gt;
&lt;p&gt;如果要尽量支持python2.7,python2.6以后将不再支持和进行bug 修复。&lt;/p&gt;
&lt;h4 id="make-sure-you-specify-the-proper-version-support-in-your-setuppy-file"&gt;Make sure you specify the proper version support in your setup.py file&lt;/h4&gt;
&lt;p&gt;在setup.py文件中，需要你在&lt;a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers"&gt;trove classifier&lt;/a&gt;指定你支持python版本。如果你的代码不支持python3，你至少应该指定　Programming Language :: Python :: 2 :: only. 例如你同样需要指定哪个主版本，Programming Language :: Python :: 2.7&lt;/p&gt;
&lt;h4 id="have-good-test-coverage"&gt;Have good test coverage&lt;/h4&gt;
&lt;p&gt;一旦你让你的代码支持python2早期的版本，你会想确保你的test suite足够覆盖你的代码。如果，你没有工具进行测试覆盖，coverage.py是个不错的选择。&lt;/p&gt;
&lt;h4 id="learn-the-differences-between-python-23"&gt;Learn the differences between Python 2&amp;amp;3&lt;/h4&gt;
&lt;p&gt;当你准备好了代码和测试就可以开始支持python3了。 但要完全理解你的代码是如何改变的，你会想学习python2到python3的变化.通常比较好的方法是读python3每个版本的更新&lt;a href="https://docs.python.org/3/whatsnew/index.html"&gt;What's New&lt;/a&gt;和&lt;a href="python3porting.com"&gt;Porting to Python3&lt;/a&gt;.还有就是查看python未来项目&lt;a href="http://python-future.org/compatible_idioms.html"&gt;cheat sheet&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="update-your-code"&gt;Update your code&lt;/h4&gt;
&lt;p&gt;当你了解了python3&amp;amp;2不同之后，就可以更新你的代码了。有两个自动移植代码的工具可以选择：Modernize 和　Futurize.两个工具选择的依据是，你想让你的代码接近python3的程度。Futurize会尽力使Python 3语法同步到ython 2，如存在向后移植的bytes在Python 3这样的类型。&lt;/p&gt;
&lt;p&gt;选好需要的工具之后，就可以开始更新代码了。你需要确保，更新之后的代码和之前的代码在功能实现是一致的。也就需要保证测试结果更新前后保持一致。尽管工具可以将大部分代码更新到支持python3，但仍然有一些不能更新，需要手动去更改，使代码完全支持python3.下面几种情况需要注意，有时调试时可能会忽略。
 　&lt;/p&gt;
&lt;h5 id="division"&gt;Division&lt;/h5&gt;
&lt;p&gt;在python3中，5/2 == 2.5而不是２；所有int之间的除法的结果都是float.这个变化实际上在2002年发布的python2.2中增加。一直鼓励用户在任何使用/和//的文件中增加"from __future__ import　division" 或-Q标志。 如果你还没有这样做，那么你将需要通过你的代码，做两件事情：
 * 1.在文件中增加"from __future__ import division"
 * 2. 使用//进行地板除，/除则得到float&lt;/p&gt;
&lt;p&gt;原因是/不能简单翻译成//,如果你的代码定义__truediv__方法而不是__floordiv__则会导致你的代码出错。&lt;/p&gt;
&lt;h5 id="text-versus-binary-data"&gt;Text versus binary data&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5 id="prevent-compatibility-regressions"&gt;Prevent compatibility regressions&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5 id="check-which-dependencies-block-your-transition"&gt;Check which dependencies block your transition&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5 id="update-your-setuppy-file-to-denote-python3-compatibility"&gt;Update your setup.py file to denote Python3 compatibility&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h5 id="use-continuous-integration-to-stay-compatible_idioms"&gt;Use continuous integration to stay compatible_idioms&lt;/h5&gt;
&lt;p&gt;待补&lt;/p&gt;
&lt;h4 id="dropping-python2-support-completely_1"&gt;Dropping Python2 support completely&lt;/h4&gt;
&lt;p&gt;待补&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Fri, 11 Mar 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-03-11:2016/03/11/python/</guid><category>Python</category></item><item><title>Python-tips01</title><link>http://king32783784.github.io/2016/01/01/effective-python/</link><description>&lt;body&gt;&lt;h3 id="que-ren-pythonban-ben"&gt;确认python版本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前两个版本活跃状态，python2和python3&lt;/li&gt;
&lt;li&gt;python有很多流行的运行环境，如cpython jython ironpython以及  pypy&lt;/li&gt;
&lt;li&gt;运行Python时，确保python是想用的版本&lt;/li&gt;
&lt;li&gt;以后项目尽量使用python3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pep8feng-ge"&gt;PEP8风格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编写python代码时，应该遵循PEP8风格指南&lt;/li&gt;
&lt;li&gt;采用通用的代码风格，便于多人协作&lt;/li&gt;
&lt;li&gt;一致的代码风格易于维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bytes-stryu-unicodede-qu-bie"&gt;bytes、str与Unicode的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python3中，bytes是一种包含8位值的序列，str是一种包含Unicode字符的序列。开发时不能以&amp;gt;或+等操作符来混同操作bytes和str实例。&lt;/li&gt;
&lt;li&gt;Python2中，str是一种包含8位值的序列，Unicode是一种包含Unicode字符的序列。如果 str只包含7位ASCII字符，可以通过想过操作符同时操作str和Unicode。&lt;/li&gt;
&lt;li&gt;对于输入的数据进行操作之前，使用辅助函数来保证字符序列的类型与开发者的期望相符。&lt;/li&gt;
&lt;li&gt;从文件中读取二进制数据或向其中写入二进制数据时，总应该以'rb'或'wb'等二进制模式来开启文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写Python程序的时候，一定要把编码和解码操作放在解码最外围做。程序的核心部分分别使用Unicode字符类型（Python3中str，Python2中的unicode),而且不要对字符编码做任何假设。
由于字符类型有别，所以Python代码经常会出现两种常见的使用情景：
&lt;em&gt; 开发者需要原始8位值，这些8位值表示UTF-8格式来编码字符
&lt;/em&gt; 开发者需要操作没有特定编码形式的Unicode字符。&lt;/p&gt;
&lt;p&gt;编写两个helper函数以便在这种情况之间转换，使得转换后的输入数据符合预期。
python3中，需要编写接受str或bytes,并总是返回 str 的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_str(bytes_or_str):
    if isinstance(bytes_or_str, bytes):
        value = bytes_or_str.decode('utf-8')
    else:
        value = bytes_or_str
    retunr value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外，需要编写接受str或bytes,总是返回bytes：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_bytes(bytes_or_str):
    if isinstance(bytes_or_str, str):
        value = bytes_or_str.encode('utf-8')
    else:
        value = bytes_or_str
    return value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python2,需要编写接受str或Unicode，总是返回Unicode的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#python2
def to_unicode(unicode_or_str):
    if isinstance(unicode_or_str, str):
        value = unicode_or_str.decode('utf-8')
    else:
        value = unicode_or_str
    return value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编写接受str或Unicode，总是返回str的方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_str(unicode_or_str):
    if isinstance(unicode_or_str, unicode):
        value = unicode_or_str.encode('unf-8')
    else:
        value = unicode_or_str
    return value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;python使用8位值与Unicode字符时，需要注意以下问题：
python2中，如果str只包含7位ASCII，Unicode和str实例成了同一种类型。
可以用+操作符把这种str和Unicode连接
可以用等价与不等价操作符，
格式化字符串中，可以用&amp;ldquo;%&amp;rdquo;形式代表Unicode。&lt;/p&gt;
&lt;p&gt;Python3中，如果通过内置的open函数获取了文件句柄，该句柄默认会采用UTF-8编码格式操作文件。而Python2中，文件默认编码格式为二进制格式。可能或出现问题。
例如，向文件中写入一些二进制数据。下面这种方法在Python2中可以正常运行，Python3不行&lt;/p&gt;
&lt;p&gt;with open（'/tmp/random.bin', 'w') as f:
       f.write(os.urandom(10))&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeError: must be str, not bytes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python3给open函数添加了名为encoding的新参数，而这个新参数的默认值却是"utf-8"。这样在文件句柄上进行read和write操作时，系统要求开发者必须传入包含Unicode字符的str实例，而不接受包含二进制的bytes实例。
为了解决这个问题，我们必须用二进制写入模式（'wb')来开启操作的文件。以下方式同时适用Python2和Python3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open('/tmp/random.bin', 'wb') as f:
    f.write(os.urandom(10))
&lt;/pre&gt;&lt;/div&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-01-01:2016/01/01/effective-python/</guid><category>Python</category></item><item><title>PyUnit(一）</title><link>http://king32783784.github.io/2016/01/01/python/</link><description>&lt;body&gt;&lt;h3 id="pyunitjian-jie"&gt;PyUnit简介&lt;/h3&gt;
&lt;p&gt;PyUnit是Python 2.1版本新增功能。&lt;/p&gt;
&lt;p&gt;Python单元测试框架，又叫PyUnit。是JUnit的Python实现，是由Kent Beck和Erich Gamma共同开发的。同样，JUnit是Kent的Smalltalk测试框架的Java实现。PyUnit和JUnit都是各自怨言的标准测试框架。&lt;/p&gt;
&lt;p&gt;PyUnit模块支持自动化测试，通用的setup和shutdown的代码，测试用例整合为测试集，还有独立的测试报告框架。PyUnit提供的类能够很容易的使以上特性应用于测试。PyUnit是借由以下概念支持单元测试的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试fixture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试fixture是指运行测试前的准备工作和运行测试后的清理工作。例如，创建临时或代理数据库、目录，或者启动服务进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试用例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试用例是最小的测试单元，检查特定的输入会产生预期的结果。PyUnit提供一个测试用例几类TestCase，继承基类可以创建新的测试用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试集是测试用例的集合，同时也可以是其他测试集的结合，或者是测试用例和测试集的混合集合。用于批量执行测试用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行器用来执行测试用例，并且把测试结果呈现给用户。执行器可以使用图形界面，文本界面，甚至特殊值来显示测试结果。&lt;/p&gt;
&lt;p&gt;测试用例和测试fixture通过TestCase和FunctionTestCase两个类来实现的。TestCase用来创建新的测试用例，而FunctionTestCase是用来把已有测试用例整合为PyUnit结构用例的（译者注：项目原来已经有测试用例了，后来想改用PyUnit测试框架，这时候就要用到FunctionTestCase了）。使用TestCase类创建新测试用例，需要覆盖setUp()和tearDown()方法，他们分别用来初始化fixture和清理fixture。而要使用FunctionTestCase类为已有函数创建测试用例，需要符合以下条件：我们不关心已有函数的测试结果，只关心正确的测试流程fixture初始化-&amp;gt;执行测试步骤-&amp;gt;测试固件清理。每个TestCase只能执行一个测试方法，所以最好每个测试用例有单独的测试fixture。&lt;/p&gt;
&lt;p&gt;TestSuite类实现测试套件功能，可以整合单独的测试用例或者其他测试套件。执行测试套件，测试套件中所有的测试用例和子测试套件都会被执行。&lt;/p&gt;
&lt;p&gt;执行器提供一个方法run()，该方法接受TestCase或者TestSuite对象最为参数，并且返回TestResult结果对象。PyUnit提供一个使用TextTestRunner执行器的例子，该例子汇报默认的标准错误流测试结果。想要更改其他环境的执行器（例如图形界面环境）并不需要派生自特定的类。&lt;/p&gt;
&lt;p&gt;另请参阅：&lt;/p&gt;
&lt;p&gt;Module doctest&lt;/p&gt;
&lt;p&gt;Another test-support module with a very different flavor.&lt;/p&gt;
&lt;p&gt;unittest2: &lt;a href="https://pypi.python.org/pypi/unittest2"&gt;A backport of new unittest features for Python 2.4-2.6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many new features were added to unittest in Python 2.7, including test discovery. unittest2 allows you to use these features with earlier versions of Python.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20150315073817/http://www.xprogramming.com/testfram.htm"&gt;Simple Smalltalk Testing: With Patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kent Beck&amp;rsquo;s original paper on testing frameworks using the pattern shared by unittest.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nose.readthedocs.io/en/latest/"&gt;Nose&lt;/a&gt; and &lt;a href="http://docs.pytest.org/en/latest/"&gt;py.test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Third-party unittest frameworks with a lighter-weight syntax for writing tests. For example, assert func(10) == 42.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy"&gt;The Python Testing Tools Taxonomy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An extensive list of Python testing tools including functional testing frameworks and mock object libraries.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lists.idyll.org/listinfo/testing-in-python"&gt;Testing in Python Mailing List&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A special-interest-group for discussion of testing, and testing tools, in Python.&lt;/p&gt;
&lt;h3 id="jian-dan-li-zi"&gt;简单例子&lt;/h3&gt;
&lt;p&gt;PyUnit模块提供了大量的工具来构造和运行测试，本部分的例子可以满足大部分用户的需求。&lt;/p&gt;
&lt;p&gt;以下脚本是测试random模块的3个函数的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSequenceFunctions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# make sure the shuffied sequence does not lose any elements&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# should raise an exception for an immutable sequence&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过继承unittest.TestCase类来创建测试用例，测试用例中３个独立的测试函数以&amp;ldquo;test"为开头命令。通过这种命名方式，执行器可以知道哪些方法是测试方法。
需要注意的是３个测试方法分别调用assertEqual()函数来检查预期结果；调用assertTure()函数来判断条件；调用assertRaises()函数来验证是否触发了预期的异常。这３个方法作为断言语句判断用例执行的正确性，以便执行器手机测试结果并产生测试报告。&lt;/p&gt;
&lt;p&gt;如果定义setUp()方法，每个测试用例执行前都会执行setUp();同样的，如果定义的tearDown()方法，每个测试用例执行完后都会执行tearDown()方法。上面的例子，setup()方法用来为每个用例创建一个新序列。&lt;/p&gt;
&lt;p&gt;例子的最后一段介绍了一种简单调用测试用例的方法－unittest.main().它为用例提供了命令行界面运行，脚本运行会输出以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
----------------------------------------------------------------------
Ran 3 tests in 0.000s

OK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连续３个点"..."表示３个测试用例都运行通过，如果运行失败显示&amp;ldquo;Ｆ&amp;rdquo;，例如&amp;ldquo;.FF"表示后２个用例运行失败。&lt;/p&gt;
&lt;p&gt;有很多更易管理，输出信息更简洁，并且不在命令行运行的方法来替代unittest.main()方法运行测试用例。例如以下方法，替换例子的最后一行unittest.main():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;suite = unittest.TestLoader().loadTestsFormTestCase(TestSequenceFunctions)
unittest.TestTestRunner(verbosity=2).run(suite)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后的脚本如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_choice (__main__.TestSequenceFunctions) ... ok
test_sample (__main__.TestSequenceFunctions) ... ok
test_shuffle (__main__.TestSequenceFunctions) ... ok
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是一个简短的例子用于测试3个字符方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestStringMethods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'FOO'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_isupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FOO'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Foo'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# check that s.split fails when the separator is not a TestStringMethods&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试用例通过继承unittest.TestCase创建。测试用例中3个独立的测试函数以"test"为开头命名。通过使用这种命名方式，执行器可以知道哪些方法是测试方法。&lt;/p&gt;
&lt;p&gt;3个测试方法同样调用assertEqual()函数来检查预期结果；调用assertTrue()函数来判断条件；调用assertRaises()函数来验证是否触发了预期的异常。这3个方法作为断言语句判断用例执行正确性，以便于执行器收集测试结果并产生测试报告。&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-01-01:2016/01/01/python/</guid><category>PyUnit</category></item><item><title>Autotest-client Package(1)</title><link>http://king32783784.github.io/2015/11/01/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h3 id="autotest_local-mo-kuai"&gt;autotest_local 模块&lt;/h3&gt;
&lt;p&gt;class autotest.client.autotest_local.AutotestLocalAPP&lt;/p&gt;
&lt;p&gt;本地自动测试，指定一个control文件启动测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;autotest.common&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;common&lt;/span&gt; &lt;span class="c1"&gt;# pylint: disable=W0611&lt;/span&gt;
    &lt;span class="n"&gt;rootdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;autodir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'client'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;autodirbin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'client'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;common&lt;/span&gt; &lt;span class="c1"&gt;# pylint: disable=W0611&lt;/span&gt;
    &lt;span class="n"&gt;autodirbin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;autodir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autodirbin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autidirbin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;autodirtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autodir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"tests"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'AUTODIR'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autodir&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'AUTODIRBIN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autidirbin&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'AUTODIRTEST'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autodirtest&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'PYTHONPATH'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;autodirbin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cmdparser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optparser&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutotestLocalAPP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;    Autotest local app runs tests locally&lt;/span&gt;

&lt;span class="sd"&gt;    Point it to a control file and let it rock&lt;/span&gt;
&lt;span class="sd"&gt;    '''&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_parsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_parsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutotestLocalOptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmdparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_cmdline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optios&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_directory&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_directory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'CUSTOM_DIR'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_directory&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"The custom directory specifed does not exist, ignoring it ..."&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Check for a control file if not in prebuild mode&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_test_setup&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Missing &lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_cmdline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;drop_caches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CLIENT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'drop_caches'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_test_setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_job&lt;/span&gt;
            &lt;span class="n"&gt;exit_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;setup_job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;exit_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exit_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# JOB: run the specifed job control file&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runjob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;drop_caches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/20/autotest/"&gt;Autotest： Autotest-Autotest Remote (Autoserv)(三）&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href=""&gt;Autotest:&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-11-01:2015/11/01/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-Autotest Remote (Autoserv)(三）</title><link>http://king32783784.github.io/2015/08/22/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h3 id="running-autotest-in-a-guest"&gt;Running Autotest In a Guest&lt;/h3&gt;
&lt;p&gt;接下来看一下虚拟机guest执行一次测试的列子。control文件有点特别的是需要在host中运行OProfile收集运行时的信息。使用oprofile前，需要在guest安装。
给KVm指定一个IP，就会有一个虚拟机生成。试图运行虚拟机里面的oprofile，但没有成功。最后，选项"opcontrol --setup"应根据host中vmlinux位置调整。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host=hosts.SSHHost("192.168.1.1")
kvm_on_remote_host= kvm.KVM(remote_host)

kvm_on_remote_host.get("/var/local/src/kvm-compiled.tar.gz")
addresses= [{"mac":"02:00:00:00:00:01", "ip":"10.0.0.1"}]
kvm_on_remote_host.install(addresses, build=False, insert_moudles=False)

qemu_options="-m 256 -hda /var/local/vdisk.img -snapshot"
g1= hosts.KVMGuest(kvm_on_remote_host, qemu_options)
g1.wait.up()

at= autotest.Autotest()
at.get("/home/foo/autotest/client")
at.install(g1)

control_file="""
#~ job.profiles.add("oprofile", events=["CPU_CLK_UNHALTED:8000"])
job.run_test("linus_stress")
"""

results_dir= "g1_results"

# --start oprofile
remote_host.run("opcontrol --shutdown")
remote_host.run("opcontrol --reset")
remote_host.run("opcontrol --setup"
    # "--vmlinux /lib/modules/#(uname -r)build/vmlinux
    "--no-vmlinx"
    "--event CPU_CLK_UNHALTED:8000")
remote_host.run("opcontrol --start")

at.run(control_file, results_dir, g1)

# --stop opofile
remote_host.run("opcontrol --stop")
tmpdir= remote_host.get_tmp_dir()
remote_host.run('opreport -l &amp;amp;&amp;gt; "%s"' %(sh_escape(os.path.join(tmpdir, "report")),))
remote_host.get_file(os.path.join(tmpdir, "repoet"), os.path.join(results_dir, "host_oprofile"))
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="changing-the-guest-kernel"&gt;Changing the Guest Kernel&lt;/h3&gt;
&lt;h4 id="usualway"&gt;Usual"Way&lt;/h4&gt;
&lt;p&gt;KVM虚拟机使用bootloader,可以运行时进行重启，可以在同一个虚拟机上安装不同的内核&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host= hosts.SSHHost("192.168.1.1")

kvm_on_remote_host= kvm.KVM(remote_host)
kvm_on_remote_host.get("/var/local/src/kvm-comiled.tar.gz")
addresses=[{"mac": "02:00:00:00:00:01", "ip": "10.0.0.1"}]
kvm_on_remote_host.install(addresses, build=False, insert_moudles=False)

qemu_options="-m 256 -hda /var/local/vdisk.img -snapshot"
g1= hosts.KVMguest(kvm_on_remote_host, qemu_options)
g1.wait_up()

print g1.run("uname -a").stdout

kernel= deb_kernel.DEBKernel()
kernel.get("/home/foo/linux-2.6.21.3-6_2.6.21.3-6_amd64.deb")

kernel.install(g1)
g1.reboot()

print g1.run("uname -a").stdout
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qemu-way"&gt;"QEMU" Way&lt;/h4&gt;
&lt;p&gt;通常可以通过qemu 的-kernel -append -initrd 选项，这些选项可以指定虚拟机内核和磁盘镜像。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host= hosts.SSHHost("192.168.1.1")

kvm_on_remote_host= kvm.KVM(remote_host)
kvm_on_remote_host.get("/var/local/src/kvm-compiled.tar.gz")
addresses=[{"mac": "02:00:00:00:00:01", "ip": "10.0.0.1"})
kvm_on_remote_host.install(addresses, build=False, install_modules=False)

kernel= deb_kernel.DEBKernel()
kernel.get("/home/foo/linux-2.6.21.3-6_2.6.21.3-6_amd64-noNeedForInitrd.deb")
kernel_dir= kernel.extract(remote_host)

qemu_options= '-m 256 -hda /var/local/vdisk.img -snapshot -kernel "%s" -append "%s"' %(sh_escape(os.path.join(kernel_dir, kernel.get_image_name()[1:])), sh_escape("root=/dev/hda1 ro console=tty0 console=ttyS0, 9600"),)

g1=hosts.KVMGuest(kvm_on_remote_host, qemu_options)
g1.wait_up()

print g1.run("uname -a").stdout
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="parallel-commands_1"&gt;Parallel commands&lt;/h3&gt;
&lt;p&gt;Autoserv 可以通过subcommand.py中的parallel()和parallel_simple()并行运行命令。
这对于一次测试多台机器和client-server测试非常有用。这里给出一个netperf2 测试的例子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_kernel(host, version, package):
    if host.run("uname -r").stdout.strip() != version:
    package.install(host)
    host.reboot()

def install_kvm(kvm_on_host_var_name, host, source, addresses):
    exec("global %(var_name)s\n"
        "%(var_name)s= kvm.KVM(host)\n"
        "%(var_name)s.get(source)\n"
        "%(var_name)s.install(addresses)\n" % {"var_name":kvm_on_host_var_name})

    remote_host1= hosts.SSHHost("192.168.1.1")
    remote_host2= hosts.SSHHost("192.168.1.2")

    kernel= deb_kernel.DEBKernel()
    kernel.get("/var/local/linux-2.6.21.3-3_2.6.21.3-3_amd64.deb")

    host1_command= subcommand(check_kernel, [remote_host1, "2.6.21.3-3", kernel])
    host2_command= subcommand(check_kernel, [remote_host2, "2.6.21.3-3", kernel])

    parallel([host1_command, host2_command])

    install_kvm("kvm_on_remote_host1", remote_host1, "/var/local/src/kvm-33.tar.gz", [{"mac": "02:00:00:00:00:01", "ip": "10.0.0.1"}]
    qemu_options= "-m 256 -hda /var/local/vdisk.img -snapshot"
    gserver= hosts.KVMGuest(kvm_on_remote_host1, qemu_options)
    gserver.wait_up()

    at= autotest.Autotest()
    at.get("/home/foo/autotest/client")
    at.install(gserver)
    at.install(remote_host2)

    server_results_dir= "results-netperf-guest-to-host-far-server"
    client_results_dir= "results-netperf-guest-to-host-far-client"

    server_control_file= 'job.run_test("netperf2", "%s", "%s", "server", tag="server")' % (sh_escape(gserver.hostname), sh_escape(remote_host2.hostname),)
    client_control_file= 'job.run_test("netperf2", "%s", "%s", "client", tag="client")' % (sh_escapt(gserver.hostname),
    sh_escape(remote_host2.hostname),)

    server_command = subcommand(at.run, [server_control_file, server_results_dir, gserver])
    client_command= subcommand(at.run, [client_control_file, client_results_dir, remote_host2])

    parallel([server_command, client_command])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/21/autotest/"&gt;Autotest： Autotest-Autotest Remote (Autoserv)(二）&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/23/autotest/"&gt;Autotest:Autotest-client Package(1)&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Sat, 22 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-22:2015/08/22/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-Autotest Remote (Autoserv)(二）</title><link>http://king32783784.github.io/2015/08/21/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h3 id="kvmzhi-chi"&gt;KVM支持&lt;/h3&gt;
&lt;p&gt;如前所述，Autoserv 支持控制虚拟机。这个对象设计的可以支持虚拟机管理/hypervisors。一开始，只支持kvm,为了支持KVM，你需要做：
    1.创建虚拟机，运行在虚拟层的机器
    2.创建KVM对象，通过get()指定源，KVM InstallableObject安装到指定的虚拟机。
    3.创建KVMGuest对象，需要指定做其他事情，KVM对象在上面已创建。
    4.使用KVMGuest对象运行一些其他类型的虚拟机命令，如改变内核，运行autotest&lt;/p&gt;
&lt;p&gt;可以通过查看server/kvm.py 和server/hosts/kvm_guest.py查看其他信息，尤其是KVM.install()的前面的函数和KVMGuest的函数构造。
下面给出一个Autoserv 控制文件的例子，第5行包括解析获取addresslist 列表，这个控制文件是由python实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host = hosts.SSHHost("192.168.1.1")

kvm_on_remote_host = kvm.KVM(remote_host)
kvm_on_remote_host.get("/var/local/src/kvm-33.tar.gz")
addresses =[{"mac": "02:00:00:00:00:%02x" %(num,), "ip": "192.168.2.%d" % (num,)} for num in range(1, 32)]
kvm_on_remote_host.install(addreses)

qemu_options= "-m 256 -hda /var/local/vdisk.img -snapshot"
g = hosts.KVMGuest(kvm_on_remote_host, qemu_options)
g.wait_up()

print g.run("unme -a").stdout.strip()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="compiling-qemu_options"&gt;Compiling qemu_options&lt;/h3&gt;
&lt;p&gt;你需要指定KVM的源码，需要从http://sourceforge.net/project/showfiles.phpgroup_id=180599获取。当KVM对象安装，需要控制2个选项：build(默认）和 insert_modules（默认为True）.
如果build为true,Autoserv 会执行configure和make创建client和导入内核模块。 make install 永不会执行，否则会影响已经安装的系统。为了内核构建成功，需要将内核源码放到（/lib/modules/$(uname -r)/bulid. 如果build为flase,configure 和 make 已经执行了，二进制可以从源码文件夹中获取。还可以重新归档，如果你想让压缩包让get()获取。&lt;/p&gt;
&lt;p&gt;如果insert_modules为True，Autoserv会移除kvm模块，包括编译的。如果KVM对象侦测到，它会移除内核中的模块。同时，Autoserv会检查内核合适的模块去插入。如果qemu或qemu-system-x86_64曾经用过，就不再检查，直接使用。如果 insert_modules为False,假设运行的内核已经拥有KVM支持,就不会再进行模块操作。&lt;/p&gt;
&lt;h3 id="kernel-considerations"&gt;Kernel Considerations&lt;/h3&gt;
&lt;p&gt;下面介绍一些内核配置项，为定制自己的内核做参考。&lt;/p&gt;
&lt;h4 id="host-kernel"&gt;Host Kernel&lt;/h4&gt;
&lt;p&gt;CONFIG_HPET_EMULATE_RTC, KVM常见问题，rtc中断丢失，客户端响应慢
KVM, KVM_AMD, KVM_INTEL, 让内核支持这部分&lt;/p&gt;
&lt;h4 id="guest-kernel"&gt;Guest Kernel&lt;/h4&gt;
&lt;p&gt;Guest kernel没有具体的需求，只要能保证在qumu运行。许多发行内核上使用IDE和ide_generic驱动程序，以便与那些不是较新的libata，避免从/dev/hda的到/dev/sda的设备名称更改。可以将它编译成模块，需要的时候插入。&lt;/p&gt;
&lt;h4 id="disk-image-coniderations"&gt;Disk Image Coniderations&lt;/h4&gt;
&lt;p&gt;镜像需要作为qemu的一个选项，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;qemu_options= "-m 256 -hda /var/local/vdisk.img -snapshot"
g= hosts.KVMGuest(kvm_on_remote_host, qemu_options)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/var/local/vdisk.img 是磁盘镜像， -snapshot指定qumu不能修改image,更改会虚拟机关闭后取消。可以参考&lt;a href="http://wiki.qemu.org/Manual"&gt;QEMU文档&lt;/a&gt;来了解QEMU信息。&lt;/p&gt;
&lt;h4 id="ip-address-configuration"&gt;IP Address Configuration&lt;/h4&gt;
&lt;p&gt;有一些要对diskimage做一些设置，在kvm.py:install()设置，虚拟机操作系统必须配置为与对应的Mac IP配置其网络。 Autoserv只能通过qemu的控制虚拟机的MAC地址，但是它将试图通过其IP联系它。你需要在install(）实现map和IP的映射，还需要确保虚拟机启动后扔采用这个IP。如果你启动一个虚拟机，可以在image中设置IP。如果想启动多台虚拟机，可以通过DHCPserver分配或则选择和mac对应的IP。一种方式如debian系统下通过/etc/network/interfaces文件去设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto eth0
mapping eth0
    script /usr/local/bin/get-mac-address.sh
    map 02:00:00:00:00:01 vhost1
    map 02:00:00:00:00:02 vhost2

iface vhost1 inet static
    address 10.0.2.1
    netmask 255.0.0.0
    geteway 10.0.0.1
iface vhost2 inet static
    address 10.0.2.2
    netmask 255.0.0.0
    geteway 10.0.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/usr/local/bin/get-mac-address.sh :&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C

&lt;span class="nv"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;mac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/sbin/ifconfig &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$iface&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -n -e &lt;span class="s1"&gt;'/^'&lt;/span&gt;.*HWaddr &lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;:xdigit:&lt;span class="o"&gt;]]&lt;/span&gt;*&lt;span class="se"&gt;\)&lt;/span&gt;.*/&lt;span class="o"&gt;{&lt;/span&gt;s//&lt;span class="se"&gt;\1&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt;y/ABCDEF/abcdef/&lt;span class="p"&gt;;&lt;/span&gt;p&lt;span class="p"&gt;;&lt;/span&gt;q&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;')&lt;/span&gt;
&lt;span class="s1"&gt;which=""&lt;/span&gt;

&lt;span class="s1"&gt;while read testmac scheme; do&lt;/span&gt;
&lt;span class="s1"&gt;    if ["$which" ]; then continue;fi&lt;/span&gt;
&lt;span class="s1"&gt;    if ["$mac" = "$(echo "$testmac" | sed -e '&lt;/span&gt;y/ABCDEF/abcdef/&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"]; then which="&lt;/span&gt;&lt;span class="nv"&gt;$scheme&lt;/span&gt;&lt;span class="s2"&gt;"; fi&lt;/span&gt;
&lt;span class="s2"&gt;done&lt;/span&gt;

&lt;span class="s2"&gt;if ["&lt;/span&gt;&lt;span class="nv"&gt;$which&lt;/span&gt;&lt;span class="s2"&gt;"]; then echo &lt;/span&gt;&lt;span class="nv"&gt;$which&lt;/span&gt;&lt;span class="s2"&gt;; exit 0; fi&lt;/span&gt;
&lt;span class="s2"&gt;exit 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;/etc/network/interfaces文件需要重复编写，替换，可以通过python脚本实现，调整map_entry, host_entry, first_value和 last_value:&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""" #This file describes the network interfaces available on your system&lt;/span&gt;
&lt;span class="s2"&gt;# and how to activate them. For more infomation, see interfaces(5).&lt;/span&gt;

&lt;span class="s2"&gt;# The loopback network interface&lt;/span&gt;
&lt;span class="s2"&gt;auto lo&lt;/span&gt;
&lt;span class="s2"&gt;iface lo inet loopback&lt;/span&gt;

&lt;span class="s2"&gt;# The primary network interface&lt;/span&gt;
&lt;span class="s2"&gt;auto eth0&lt;/span&gt;
&lt;span class="s2"&gt;mapping eth0&lt;/span&gt;
&lt;span class="s2"&gt;    script /usr/local/bin/get-mac-address.sh"""&lt;/span&gt;

&lt;span class="n"&gt;map_entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"    map 00:1a:11:00:00:&lt;/span&gt;&lt;span class="si"&gt;%02x&lt;/span&gt;&lt;span class="s2"&gt; vhost&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="n"&gt;host_entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""iface vhost&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; inet static&lt;/span&gt;
&lt;span class="s2"&gt;    address 10.0.2.&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;    netmask 255.0.0.0&lt;/span&gt;
&lt;span class="s2"&gt;    gateway 10.0.0.1"""&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;

&lt;span class="n"&gt;first_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;last_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;map_entry&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;host_entry&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="ssh-authentication"&gt;SSH Authentication&lt;/h4&gt;
&lt;p&gt;类似于SSHHost，也需要设置免密码登陆。&lt;/p&gt;
&lt;h4 id="serial-console"&gt;Serial Console&lt;/h4&gt;
&lt;p&gt;虽然对于Autoserv本身不是必要的，但对于启动qumu图形很重要，需要进行初始化。qemu的可以模拟来自视频卡的显示，也可以模拟一个串行端口。 
* grub 配置文件（/boot/grub/menu.lst)
    serial --unit=0 --speed=9600 --word=8 --parity=no --stop=1
    terminal --timeout=3 serial console&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kernel启动选项 
    console=tty0 console=ttyS0,9600&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/etc/inittab
    T0:23:respawn:/sbin/getty -L ttyS0 9600 vt100&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/20/autotest/"&gt;Autotest： Autotest-Autotest Remote (Autoserv)(一）&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/22/autotest/"&gt;Autotest:Autotest-Autotest Remote (Autoserv)(三）&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Fri, 21 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-21:2015/08/21/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-Autotest Remote (Autoserv)（一）</title><link>http://king32783784.github.io/2015/08/20/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;p&gt;Autoserv 是&amp;ldquo;自动化机器控制&amp;ldquo;的框架
Autoserv 目的是控制机器，它可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电源管理&lt;/li&gt;
&lt;li&gt;安装内核&lt;/li&gt;
&lt;li&gt;修改bootloader
*　运行任意命令&lt;/li&gt;
&lt;li&gt;运行Autotest Local(客户端）测试&lt;/li&gt;
&lt;li&gt;传输文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;被控制的机器可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本机&lt;/li&gt;
&lt;li&gt;远程机器（通过ssh 和　conmux)&lt;/li&gt;
&lt;li&gt;虚拟机(通过ＫＶＭ）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kong-zhi-wen-jian"&gt;控制文件&lt;/h2&gt;
&lt;p&gt;类似于autotest,Autoserv同样使用控制文件。这些控制文件和autotest使用不同的命令，但是像autotest一样包含一些内部的可以调研python解释器的功能。&lt;/p&gt;
&lt;p&gt;这里有一个控制文件的例子，用来控制远程host安装.dep内核。若文件存在server/目录并且命名为example.control,可以在server/目录通过./autotest-remote example.control调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote_host = host.SSHHost("192.168.1.1")
print remote_host.run("uname -a").stdout

kernel = deb_kernel.DEBKernel()
kernel.get("/var/local/linux-2.6.22.deb")

print kernel.get_version()
print kernel.get_image_name()
print kernel.get_initrd_name()

kerne.install(remote_host)

remote_host.reboot()

print remote_host.run("uname -a").stdout
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="hosts"&gt;Hosts&lt;/h2&gt;
&lt;p&gt;"Host"类是Autoserv控制文件的操作对象。这些Ｈost类通过ssh/conmux或virtual机控制机器。这些代码结构支持添加其他类型的hosts.如果想添加
其他类型的host，需要确保添加到server/hosts/&lt;strong&gt;init&lt;/strong&gt;.py文件。&lt;/p&gt;
&lt;h3 id="hostde-zhu-yao-fang-fa"&gt;Host的主要方法&lt;/h3&gt;
&lt;p&gt;以下是最常用的host的方法。每个类型的host都需要包含这些方法，起码支持列表选项中的方法。特定的host需要支持更多的命令和选项。关于这些信息，可以查看　
ａｕｔｏｔｅｓｔ子目录server/client中源码文件。下面的列表只是一个基本的汇总，不是那些源码文件的功能的头文件。特别是，需要查看一下server/hosts/ssh_host.py文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run(command)&lt;/li&gt;
&lt;li&gt;reboot()&lt;/li&gt;
&lt;li&gt;get_file(source, dest)&lt;/li&gt;
&lt;li&gt;send_file(source, dest)&lt;/li&gt;
&lt;li&gt;get_tmp_dir&lt;/li&gt;
&lt;li&gt;is_up()&lt;/li&gt;
&lt;li&gt;wait_up(timeout)&lt;/li&gt;
&lt;li&gt;wait_down(timeout)&lt;/li&gt;
&lt;li&gt;get_num_cpu()&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cmdresult-lei"&gt;CmdResult　类&lt;/h4&gt;
&lt;p&gt;run()调用的返回值是一个CmdResult类。该类包含了有关命令和其执行信息。这个类的定义和文档信息可以在server/hosts/base_classes.py文件中查看。
CmdResult类可以打印并且输出其所有的信息。它的每个字段都可以单独访问。这个字段的列表是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command: 包含命令行本身的字符&lt;/li&gt;
&lt;li&gt;exit_status: 进程整数退出代码&lt;/li&gt;
&lt;li&gt;stdout:包含程序标准输出的字符串&lt;/li&gt;
&lt;li&gt;stderr: 包含程序错误输出的字符串&lt;/li&gt;
&lt;li&gt;duration: 程序运行的持续时间&lt;/li&gt;
&lt;li&gt;aborted:　导致终端命令中止的信号（０）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hostde-zhu-yao-lei-xing_1"&gt;Host的主要类型&lt;/h3&gt;
&lt;h4 id="sshhost"&gt;SSHHost&lt;/h4&gt;
&lt;p&gt;SSHHost是非常重要和实用的host类型。它可以通过ssh会话控制远程机器。它支持所有的hosts的基本方法和run(）功能，支持超时。SSHHost通过
ssh运行命令，通过scp进行文件传输。&lt;/p&gt;
&lt;p&gt;如果想采用SSHHost，必须设置远程机器无密码登陆，如通过公共秘钥。一个SSHHost对象建立在指定的host name,任意的用户名称和端口号。&lt;/p&gt;
&lt;h4 id="conmuxsshhost"&gt;ConmuxSSHHost&lt;/h4&gt;
&lt;p&gt;ConmuxSSHHost是SSHHost的扩展。它通过Conmux来控制远程机器。可以通过hardreset()方法进行硬复位。&lt;/p&gt;
&lt;h4 id="sitehost"&gt;SiteHost&lt;/h4&gt;
&lt;p&gt;Site host 是一个空类，可以添加特殊的方法或支持所以类型hostts的属性。它定义在server/hosts/site_host_py文件中，不过可能是空的。
创建这样的一个类的灵感来自于如更新bios，侦测硬件版本或一些对普通用户不常用的操作。&lt;/p&gt;
&lt;h4 id="kvmguest"&gt;KVMGuest&lt;/h4&gt;
&lt;p&gt;KVMGuest 表示可以运行程序的KVM 虚拟机。　它必须绑定到其他host, 这些机器实际上运行于虚拟层。KVMGuest和SSHHost非常类似，但它可以通过hardreset方法（Guest中）调用hypervisor的命令去实现&amp;rdquo;硬复位&amp;ldquo;.可以通过查看&lt;a href=""&gt;KVM section&lt;/a&gt;查看更多的KVM和KVMguest信息。&lt;/p&gt;
&lt;h4 id="bootloader"&gt;Bootloader&lt;/h4&gt;
&lt;p&gt;Boottool 是一个查询和修改bootloader文件的perl脚本。Autoserv提供Bootloader类，是围绕boottool的包装。Ａutoserv 在需要时会第一时间将boottool脚本自动复制到一个临时目录。可以通过查看server/hosts/bootloader.py查看支持方法的信息。其中最重要的一个方法是add_kernel()&lt;/p&gt;
&lt;p&gt;当添加了一个新内核是，boottool会复用上一个内核的命令行及配置，来实现一个新的启动项菜单。&lt;/p&gt;
&lt;h2 id="installableobject_2"&gt;InstallableObject&lt;/h2&gt;
&lt;p&gt;InstallableObject　表示一个可以再host上安装软件包。通过下面两个方法实现：
&lt;em&gt; get(location)
&lt;/em&gt; install(host)&lt;/p&gt;
&lt;p&gt;get()表示获取安装包，它可以获取多种类型保存位置的包：
&lt;em&gt; 本地目录
&lt;/em&gt; URL地址
&lt;em&gt; python文件对象
&lt;/em&gt; 如果参数不是上述类型，get()会默认将获取的内容当为包内容&lt;/p&gt;
&lt;p&gt;get()获取的软件包，通常会放到一个临时目录。这种方式可以一次获取，安装到多台hosts上面。install()会安装包，当通常会装到一个临时目录。&lt;/p&gt;
&lt;h2 id="autotest-support"&gt;Autotest Support&lt;/h2&gt;
&lt;p&gt;Autoserv包含autotest的一些具体支持。它可以安装autotest到一个客户端，可以运行客户端的测试并且取回测试结果。这是通过autotest和运行server/autotest.py中的
类实现的。Auotest对象是一个installableＯbject.要想使用它，必须：
&lt;em&gt; 指定来源后通过get()获取，autotest对象有点特别。如果没有指定任何来源，将会自动从autotest　ＳＶＮ库自动获取。而且会在目标主机中完成。
&lt;/em&gt; 当通过install()安装时，autotest会查找一个/etc/autotest.conf的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autodir=/usr/local/autotest/
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;run()运行一个控制文件的语法如下：run(control_file, results_dir, host).control_file 参数支持get()和intallableObject相同类型的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个Autoserv控制文件和运行Autotest job的例子。测试结果会传输到server的&amp;ldquo;job_results"目录下。
    remote_host = hosts.SSHHost("192.168.1.1")&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;at = autotest.Autotest()
at.get("/var/local/autotest/client")
at.install(remote_host)

control_file = """
job.profilers.add("oprofile", events= ["CPU_CLK_UNHALED:8000"])
job.run_test("linux_stress")
"""

results_dir = "job_results"

at.run(control_file, results_dir, remote_host)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kernel-objects"&gt;Kernel Objects&lt;/h2&gt;
&lt;p&gt;Kernel Objects 是另一个类型的InstallableObjects.计划支持内核源码编译及.rpm和.deb包安装。最初，只支持.deb格式内核。现在已经支持源码格式的内核。
kernels支持依赖以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get(location)
    用户installableObject方法&lt;/li&gt;
&lt;li&gt;install(host, extra arguments to boottool).当一个内核安装在host后，会使用bootbool使它自己编程默认的启动内核。如果需要指定特别的内核参数，
需要可以添加，并传递给add_kernel()方法用来启动内核。&lt;/li&gt;
&lt;li&gt;get_version()&lt;/li&gt;
&lt;li&gt;get_image_name()&lt;/li&gt;
&lt;li&gt;get_image_name()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样，可以通过查看源码了解更多详细信息，如server/deb_kernel.py&lt;/p&gt;
&lt;p&gt;DEBKernels　有一个额外的方法，host直接提取内核。这个方法可以直接将包解压到指定的host.这样可以不经过安装，可以直接访问包的内容。这个功能比较常用的地方就是
kvm和qumu的　-kernel选项。&lt;/p&gt;
&lt;p&gt;下面给出一个Autoserv安装内核的控制文件的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rh = hosts.SSHHost("192.168.1.1")

print rh.run("uname -a").stdout

kernel = deb_kernel.DEBKernel()
kernel.get("/var/local/linux-2.6.22.deb")

kernel.install(rh)

rh.reboot()

print rh.run("uname -a").stdout
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个类似的例子使用RPM形式的kernel，并让指定启动参数（autoserv -m host1, host2 install-rpm):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not machines:
    raise "Specify the machines to run on via the -m flag"
hosts = [hosts.SSHHost(h) for h in machines]

kernel = rpm_kernel.RPMKernel()
kernel.get('/stuff/kernels/kernel-smp-2.6.18.x86_64.rpm')

for host in hosts:
    print host.run("uame -a").stdout
    kernel.install(host, default=True)
    host.reboot()
    print host.run("uname -a").stdout

print "Done"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/19/autotest/"&gt;Autotest：Autotest-others&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/21/autotest/"&gt;Autotest:Autotest-Autotest Remote (Autoserv)(二）&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Thu, 20 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-20:2015/08/20/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-others</title><link>http://king32783784.github.io/2015/08/19/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h2 id="zhi-xing-wai-bu-ce-shi"&gt;执行外部测试&lt;/h2&gt;
&lt;p&gt;autotest可以像执行自身测试一样执行外部测试．&lt;/p&gt;
&lt;h3 id="zhi-xing-ce-shi"&gt;执行测试&lt;/h3&gt;
&lt;p&gt;一个下载的测试并触发，标准方式是通过run_test方法执行，需要指定tar包地址．
　　
    job.run_test('http://www.example.com/~someone/somewhere/test.tar.bz2')&lt;/p&gt;
&lt;p&gt;这样就会执行下载，安装，解压测试．&lt;/p&gt;
&lt;h3 id="gou-jian-wai-bu-xia-zai-ce-shi"&gt;构建外部下载测试&lt;/h3&gt;
&lt;p&gt;外部下载的测试包含bz2包和测试目录．
&lt;em&gt; 1．包名　my_test.tar.bz2
&lt;/em&gt; 2. 测试脚本　my_test.py
* 3.　测试脚本中的以本身命名的类　class my_test(test.test):&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest_lib.client.bin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;my_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"INIT"&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"RUN"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar -C example_test -jcvf my_test.tar.bz2 .
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="autotest-de-keyvalwen-jian_1"&gt;Autotest 的keyval文件&lt;/h2&gt;
&lt;p&gt;在ａｕｔｏｔｅｓｔ的结果目录中有一些keyval文件，例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;key1=value1
key2=value2
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ce-shi-jie-guo-zhong-cuo-wu-xin-xi"&gt;测试结果中错误信息&lt;/h2&gt;
&lt;h3 id="debug"&gt;debug&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debug/

├── build_log.gz
├── client.DEBUG
├── client.ERROR
├── client.INFO
└── client.WARNING
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;autotest local 还有一些小的细节问题，不再一一介绍．&lt;/p&gt;
&lt;p&gt;下篇将开始介绍Remote (Former Server)．&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/18/autotest/"&gt;Autotest：Autotest-add test&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/20/autotest/"&gt;Autotest:Autotest-Autotest Remote (Autoserv)&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Wed, 19 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-19:2015/08/19/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-Linux distribution detection</title><link>http://king32783784.github.io/2015/08/18/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h2 id="linuxfa-xing-ban-jian-ce"&gt;linux发行版检测&lt;/h2&gt;
&lt;p&gt;Autotest有个功能,就是让测试清晰了解到它运行在什么样的发行版上.
这个功能是由probe类群的实现和注册实现的.
这些probe类可以检查运行的系统的信息,比如发行版的release文件,二进制信息(如包管理)等.&lt;/p&gt;
&lt;h3 id="kuai-su-jian-cha-fa-xing-ban"&gt;快速检查发行版&lt;/h3&gt;
&lt;p&gt;autotest.client.shared.distro 模块提供一些APIS,最简单的就是使用detect().
它的用法简单命了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;
    &lt;span class="n"&gt;detected_distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以返回发行版检测的结果,但是不太适用于&lt;strong&gt;UNKNOWN_DISIRO&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;release&lt;/li&gt;
&lt;li&gt;arch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;detected_distro = distro.detect()
&amp;gt;&amp;gt;&amp;gt;print detected_distro.name
redhat
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wei-zhi-fa-xing-ban"&gt;未知发行版&lt;/h3&gt;
&lt;p&gt;当检测机制不能检测到发行版,仍会返回一个LinuxDistro实例,但是它的name,version等信息比较特殊.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; autotest.clientshared.distro.UNKNOWN_DISIRO
 =&amp;lt;LinuxDistro: name=unnknown, version=0, realease=0, arch=unknown&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意味着,这个发行版不能找到对应的匹配信息.&lt;/p&gt;
&lt;h3 id="bian-xie-yi-ge-fa-xing-ban-probe"&gt;编写一个发行版probe&lt;/h3&gt;
&lt;p&gt;为目标发行版编写一个probe最简单的方式就是使用现有的Probe类的功能.
如果,不打算采用Probe的话,也应该尽量继承probe类,或则提供类似的接口.&lt;/p&gt;
&lt;h4 id="jian-cha-fa-xing-ban-de-ming-zi"&gt;检查发行版的名字&lt;/h4&gt;
&lt;p&gt;最简单的探针就是查看存在的文件并返回发行版的名字.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReadHatProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/etc/redhat-realease'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'redhat'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要使用probe,需要先注册:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;
    &lt;span class="n"&gt;distro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个有效的例子，但只有发行版的名字,通常你的目标应该是更多的信息，如版本号。&lt;/p&gt;
&lt;h4 id="zhen-ce-fa-xing-ban-de-ming-zi-he-ban-ben"&gt;侦测发行版的名字和版本&lt;/h4&gt;
&lt;p&gt;如果,你需要侦测发行版的版本信息,可以使用Probe类的 Probe.CHECK_VERSION_REGEX&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Probe.CHECK_VERSION_REGEX=None
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zhu-ce-zi-ji-de-probes"&gt;注册自己的probes&lt;/h4&gt;
&lt;p&gt;Autotest不仅仅可以使用自带的probes,而且可以添加自己的probes用于系统的侦测.
注册的简单方式就剩调用register_probe():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autotest.client.shared.distro.register_probe(probe_class)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意,要注册的自己的probes必须是probe的子类.&lt;/p&gt;
&lt;h3 id="apican-kao_1"&gt;API参考&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;LinuxDistro&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;class autotest.client.shared.distro.LinuxDistro(name, version, release, arch) &lt;a href="#linuxdistro"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;收集linux发行版信息的简单方式.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Probe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;class autotest.client.shared.distro.Probe  &lt;a href="#Probe"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CHECK_FILE=None&lt;/p&gt;
&lt;p&gt;CHECK_FILE_CONTAINS=None&lt;/p&gt;
&lt;p&gt;CHECK_FILE_DISTRO_NAME =None&lt;/p&gt;
&lt;p&gt;CHECK_VERSION_REGEX = None&lt;/p&gt;
&lt;p&gt;Check_name_for_file()&lt;/p&gt;
&lt;p&gt;check_name_for_file_contains()&lt;/p&gt;
&lt;p&gt;check_release()&lt;/p&gt;
&lt;p&gt;check_version()&lt;/p&gt;
&lt;p&gt;get_distro()&lt;/p&gt;
&lt;p&gt;name_for_file()&lt;/p&gt;
&lt;p&gt;name_for_file_contains()&lt;/p&gt;
&lt;p&gt;release()&lt;/p&gt;
&lt;p&gt;version()&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;register&lt;/strong&gt;_&lt;strong&gt;probe()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;autotest.client.shared.distro.register_probe(probe_class) &lt;a href="#register_probe"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注册probe&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;detect()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;autotest.client.shared.distro.detect() &lt;a href="#detect"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;尝试检测这台机器上的Linux发行版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source code for autotest.client.shared.distro&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    This module provides the client facilities to detect the Linux Distribution&lt;/span&gt;
&lt;span class="sd"&gt;    it's running under.&lt;/span&gt;

&lt;span class="sd"&gt;    This is a replacement for the get_os_vendor() function from the utils modules.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;


    &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'LinuxDistro'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'UNKNOWN_DISTRO_NAME'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'UNKNOWN_DISTRO_VERSION'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'UNKNOWN_DISTRO_RELEASE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'UNKNOWN_DISTRO_ARCH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'Probe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'register_probe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'detect'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# [__all__用法]()&lt;/span&gt;

    &lt;span class="c1"&gt;# pylint: disable=R0903&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;LinuxDistro&lt;/strong&gt; &lt;span id="linuxdistro"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        Simple collection of infomation for a Linux Distribution&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;            Initalizes a new Linux Distro&lt;/span&gt;
&lt;span class="sd"&gt;            :param name: 一个简单的区别于其他发型版的名字&lt;/span&gt;
&lt;span class="sd"&gt;            :type name : 字符&lt;/span&gt;
&lt;span class="sd"&gt;            :parm vesion:发行版的主版本.&lt;/span&gt;
&lt;span class="sd"&gt;            :type vesion: 字符&lt;/span&gt;
&lt;span class="sd"&gt;            :param release: 发行版的发型号或子版本.&lt;/span&gt;
&lt;span class="sd"&gt;            :type vesion:字符&lt;/span&gt;
&lt;span class="sd"&gt;            :parm arch: 发行版的平台架构信息,如interl/amd 32bit/64bit&lt;/span&gt;
&lt;span class="sd"&gt;            :type arch: 字符&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# [Difference between __str__ and __repr__ in Python](http://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;LinuxDistro: name=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, version=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, release=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, arch=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="n"&gt;UNKNOWN_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'unknown'&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO_ARCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'unknown'&lt;/span&gt;   &lt;span class="c1"&gt;# 定义未知发行版默认信息&lt;/span&gt;

    &lt;span class="c1"&gt;#: 未知发行版,反馈以下信息&lt;/span&gt;
    &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNKNOWN_DISTRO_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;UNKNOWN_DISTRO_ARCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Probe&lt;/strong&gt; &lt;span id="Probe"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        探测机器信息并且确认是否存在的发行版&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;
        &lt;span class="c1"&gt;#:指定运行机器上发行版中的文件.&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;#:设置指向文件的检查内容,默认为None,只检查是否存在&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;#:如果文件指定,指定发行版名字&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="c1"&gt;#:指定发行版版本&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_name_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;            查找一个文件并返回distro.确认是否指定了特定文件&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;            获取distro名称,如果"CHECK_FILE"设置并且存在&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;            该类查找text并返回distro.&lt;/span&gt;
&lt;span class="sd"&gt;            The conditions that must be true include the file that identifies the&lt;/span&gt;
&lt;span class="sd"&gt;            distro file being set (:attr:`CHECK_FILE`), the text to look for&lt;/span&gt;
&lt;span class="sd"&gt;            inside the distro file (:attr:`CHECK_FILE_CONTAINS`) and the name&lt;/span&gt;
&lt;span class="sd"&gt;            of the distro to be returned (:attr:`CHECK_FILE_DISTRO_NAME`)&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;             获取distro如果CHECK_FILE指定并且有效&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;             检查在文件中是否找到regex并返回distro&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_version_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;            返回匹配备注文件中的版本信息&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;version_file_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version_file_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
             &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;             返回distro的版本信息&lt;/span&gt;
&lt;span class="sd"&gt;             '''&lt;/span&gt;
             &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;
             &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_version_match&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;            检查是否存在符合条件的版本号&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;             返回 distro的版本号&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
             &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt;
             &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_version_match&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_distro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;            返回 class:'LinuxDistro' probe detected&lt;/span&gt;
&lt;span class="sd"&gt;            '''&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;
            &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_RELEASE&lt;/span&gt;
            &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_ARCH&lt;/span&gt;

            &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name_for_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name_for_file_contains&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_version&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_release&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="c1"&gt;# 实在想不到比这更好的方式&lt;/span&gt;
            &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="c1"&gt;# 名字是首先要侦测的.它可以告诉我们是哪个发行版.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StdLibProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;         Probe是使用python库内建的probe.&lt;/span&gt;
&lt;span class="sd"&gt;         这个Probe得分比较低,作为备用probe.&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_distro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO_VERSION&lt;/span&gt;
            &lt;span class="n"&gt;realease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKONWN_DISTRO_RELEASE&lt;/span&gt;
            &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKONWN_DISTRO_ARCH&lt;/span&gt;

            &lt;span class="n"&gt;d_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d_codename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_name&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;d_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d_release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_version&lt;/span&gt;
                &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_release&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d_version_release&lt;/span&gt;

             &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinuxDistro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;

             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;distro&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        红帽发行版版本检查&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/etc/redhat=release'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Red Hat'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'redhat'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;r'Red Hat Enterprise Linux Server release(\d{1,2})\.(\d{1,2}).*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CentosProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        Centos系统检测&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;

        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/etc/redhat-release'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'CentOS'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'centos'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r'CentOS release(\d{1,2})\.(\d{1,2}).*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FedoraProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        Probe with version checks for Fedora systems&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/etc/fedora-release'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Fedora'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'fedora'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r'Fedora release (\d{1,2}).*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DebianProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        Simple probe with file checks for Debian systems&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/etc/debian-version'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'debian'&lt;/span&gt;


    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UbuntuProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        Simple probe with file checks for Ubuntu systems&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/etc/os-release'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_CONTAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Ubuntu'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ubuntu'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r'VERSION_ID="(\d+.\d+)"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SuseProbe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Probe&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/etc/SuSE-release'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_FILE_DISTRO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'sles'&lt;/span&gt;
        &lt;span class="n"&gt;CHECK_VERSION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r'SUSE.*\nVERSION = (.*)\nPATCHLEVEL = (.*)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c1"&gt;#: 已注册probes列表&lt;/span&gt;
    &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;register_probe&lt;/strong&gt; &lt;span id="register_probe"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probe_class&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        注册probe&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;probe_class&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probe_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RedHatProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CentosProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FedoraProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DebianProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UbuntuProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SuseProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;register_probe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StdLibProbe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;detect&lt;/strong&gt; &lt;span id="detect"&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        尝试在机器上侦测发行版&lt;/span&gt;
&lt;span class="sd"&gt;　　    '''&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;probe_class&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;REGISTERED_PROBES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;probe_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probe_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;didtro_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probe_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_distro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;distro_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;distro_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;probe_instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;distro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_DISTRO&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dostro&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;'''&lt;/span&gt;
&lt;span class="sd"&gt;        发行版最低发行要求&lt;/span&gt;
&lt;span class="sd"&gt;　　　　 '''&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;min_release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_version&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_release&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/17/autotest/"&gt;Autotest：Autotest-Using and developing job profilers&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/19/autotest/"&gt;Autotest:Autotest-others&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Tue, 18 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-18:2015/08/18/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-Using and developing job profilers</title><link>http://king32783784.github.io/2015/08/17/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h2 id="shi-yong-he-tian-jia-ce-shi-fen-xi-qi"&gt;使用和添加测试分析器&lt;/h2&gt;
&lt;p&gt;添加一个分析器和添加一个测试项目类似.每个分析器都有自己的子目录(client/profilers或你可以查看profilers/),一个标准例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个控制文件. profilers/myprofiler/control&lt;/li&gt;
&lt;li&gt;分析器控制脚本. profilers/myprofiler.py&lt;/li&gt;
&lt;li&gt;分析器的源码(如果不仅仅是控制脚本)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看一下已有的分析器. autotest提供readprofile,尽管这不是个最简单的方式,但是能够看到你想了解的全部信息.readprofile支持编译近内核.&lt;/p&gt;
&lt;p&gt;控制文件非常简单,像这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.profilers.add('readprofile')
job.run_test('sleeptest', 1)
job.profilers.delete('readprofile')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只是说明"请再以下测试中使用readprofile".一次测试,如果想添加多个分析器,可以多次调用profilers.add.&lt;/p&gt;
&lt;p&gt;还有源码包"util-linux-2.12r.tar.bz2",将会解压到src/.python控制脚本将定义,分析器要做的大部分事情.通过查看readprofile.py,我们可以看到
profiler主类,定义版本.可以看到以下个函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup()  它会在第一次用profiler时执行,并且编译源码.&lt;/li&gt;
&lt;li&gt;intialize() 将在导入profiler时执行&lt;/li&gt;
&lt;li&gt;start() 启动分析&lt;/li&gt;
&lt;li&gt;stop() 停止分析&lt;/li&gt;
&lt;li&gt;report() 利用profiler数据生成报告&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来 看一下这些方法的细节.&lt;/p&gt;
&lt;h3 id="setup"&gt;Setup&lt;/h3&gt;
&lt;p&gt;setup(),在版本变动之前,每次测试只执行一次.它会解压util-linux-2.12r.tar.bz2至src/,并且编译.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#http://www.kernel.org/pub/linux/util-linux/util-linux-2.12r.tar.bz2
def setup(self, tarball = 'util-linux-2.12r.tar.bz2'):
    self.tarball = unmap_url(self.bindir, tarball, self.tmpdir)
    extract_tarball_to_dir(self.tarball, self.srcdir)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注释信息告诉我们去哪得到源码.函数定义的参数,定义了使用什么版本的源码.接下来,使用unmap_url下载源码,并且返回一个源码的保存路径.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;os.chdir(self.srcdir)
system('./configure')
os.chdir('sys-utils')
system('make readprofile)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先是切换目录到self.srcdir.切换后,执行./configure,然后执行编译.这里使用的system()(不是os.system(),system()是一个包装后的os.system()).如果返回值
不是0,它将会自动抛出异常.&lt;/p&gt;
&lt;h3 id="initialize"&gt;Initialize&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def initialize(self):
    try:
        system('grep -iq" profile = "/proc/cmdline")
    except:
        raise CmdError, 'readprofile not enabled'

self.cmd = self.srcdir + '/sys-utils/readprofile'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它会在我们导入profiler后执行,用来检查 readprofile是否使能.&lt;/p&gt;
&lt;h3 id="start"&gt;Start&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def start(self, test):
    system(self.cmd + '-r')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动profiler, 只是执行readprofile -r&lt;/p&gt;
&lt;h3 id="stop"&gt;Stop&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def stop(self, test):
    # There's no real way to stop readprofile, so we stash the 
    # rad data at this point instead. BAD EXAMPLE TO COPY!;-)
    self.rawprofile = test.profdir + '/profile.raw'
    print "STOP"
    shutil.copyfile('/proc/profile', self.rawprofile)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般的话,只运行readprofile --stop即可.但是如果启用的多个分析器,我们这样做为了区分每个的分析数据,使他们不相互影响.&lt;/p&gt;
&lt;h3 id="report"&gt;Report&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def report(self, test):
    args = ' -n'
    args += ' -m' + get_systemmap()
    args += ' -p' + self.rawprofile
    cmd = self.cmd + ' ' + args
    txtprofile = test.profdir + '/profile.text'
    system(cmd + ' | sort -nr &amp;gt; ' + txtprofile)
    system('bzip2' + self.rawprofile)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将分析数据转成txt. 我们需要找到kernel的Sytem.map和用户空间产生的结果(a test file).我们将结果保存在test子目录下的profiling/,这个目录在set up时已自动创建.&lt;/p&gt;
&lt;h3 id="tian-jia-zi-ji-de-profiler"&gt;添加自己的profiler&lt;/h3&gt;
&lt;p&gt;只需要在profilers下创建一个新目录,然后添加自己的控制文件,源码和控制脚本.最简单的方式是直接复制已有的readprofile.py为mytest.py,并且修改顶部的类名.&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/16/autotest/"&gt;Autotest：Autotest-add test&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/18/autotest/"&gt;Autotest:Autotest-Linux distribution detection&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Mon, 17 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-17:2015/08/17/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-add test</title><link>http://king32783784.github.io/2015/08/16/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h2 id="ce-shi-mo-kuai-kai-fa"&gt;测试模块开发&lt;/h2&gt;
&lt;p&gt;测试模块必需是独立的单元，包含测试需要的所有内容（除了调用测试框架的）&lt;/p&gt;
&lt;p&gt;测试模块需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以跨多硬件架构&lt;/li&gt;
&lt;li&gt;可以支持不同的发行版&lt;/li&gt;
&lt;li&gt;至少一个维护者&lt;/li&gt;
&lt;li&gt;提供一个默认的简单例子&lt;/li&gt;
&lt;li&gt;对自己目录外的东西不做修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tian-jia-ce-shi-xiang"&gt;添加测试项&lt;/h2&gt;
&lt;p&gt;增加一个测试项，可能是最容易的开发工作了．&lt;/p&gt;
&lt;p&gt;每一个测试项都有一个自己的子目录（client 端的是client/tests,server端的是server/tests),一个标准的目录包括
&lt;em&gt; 一个control 文件（tests/mytest/control)
&lt;/em&gt; 一个测试包装脚本（tests/mytest/mytest.py)
* 如果不仅仅是python脚本中实现的，还需要补充测试源码&lt;/p&gt;
&lt;p&gt;可以查看已有的测试，比如tests/dbench.首先包括测试目录tests/dbench,测试控制脚本dbench.py,  包括其中命名为dbench的类．这些这新开发的测试中
也必须要有．&lt;/p&gt;
&lt;p&gt;control文件至少是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test('dbench')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子只包含了基本的参数，通过这个去了解一些新测试项的基本的设置，随后可以自己扩展其他的东西．&lt;/p&gt;
&lt;p&gt;目录下同样有个测试工具源码包dbench-3.04.tar.gz,随后会解压源码在src／
大多要执行的测试都包括在python脚本．可以看一下dbench.py.你会看到继承至test类，并且定义版本．你可以看到４个功能：
&lt;em&gt; initialize() -这个是每个测试前执行的，而且每次都要执行．
&lt;/em&gt; setup()- 这个会在第一次测试时执行，并且会进行源码的编译
&lt;em&gt; run_once()- 可以调用job.run_test N 次，其中Ｎ是通过run_test的iterations参数指定的.它同时也会启动分析器,如果你已经使能了一些分析器
&lt;/em&gt; postprocess_iteration() -此处理由测试迭代产生的任何结果，并写出来变成KEYVAL。 它一般不要求的分析迭代．&lt;/p&gt;
&lt;p&gt;测试结果输出一个PASS,你可以抛出一个异常，当一个测试失败，警告，或ｅｒｒｏｒ．绝大数出错时，ｐｙｔｈｏｎ都会抛出一个异常．所以不必担心这个，你可以处理之外的一些事情．下面说一下这些funtions的细节．
&lt;strong&gt;setup&lt;/strong&gt;
一次测试需要执行一次的setup.除非版本变动，不然只允许一次．在本文的例子中，解压dbench-3.04.tar.gz至src/,并且进行编译．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#http://samba.org/ftp/tridge/dbench/dbench-3.04.tar.gz
def setup(self, tarball='dbench-3.04.tar.gz'):
    tarball = utils.unmap_url(self.bindir, tarball, self.tmpdir)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注释告诉我们测试程序源码的下载地址．函数开头定义了源码包的名字（你可以通过不同control文件采用不同源码版本）最后，采用unmap_url(重写的url),它会下载源码，并返回localｐａｔｈ．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;utils.extract_taball_to_dir(tarball, self.srcdir)
os.chdir(self.srcdir)
utils.system('./configure')
utils.system('make')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压源码到指定目录self.srcdir.然后切换目录src.然后运行./configure; make 去建立测试环境;
我们使用了本地的system(),而不是os.system&lt;/p&gt;
&lt;p&gt;如果返回值不是0,会自动抛出一个异常.
除了编译源码包外,你可以通过software_manager模块去进行系统依赖包的安装.
如何使用?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;autotest.client.shared&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;software_manager&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;software_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SoftwareManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'package_name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;run_once&lt;/strong&gt;
它是实际执行测试的.核心只是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.results.append(utils.system_output(cmd))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行dbench,输出到self.results。 需要记录测试记录,以便以后进行结果处理.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;postprocess_iteration&lt;/strong&gt;
对于性能基准,我们希望产生一个键值文件key=value ,来描述运行的情况.key只是一个字符,值是整点或浮点值.比如dbench
只有两个参数,"throughout","nprocs".这个函数,每次iteration调用一次.最后会出现一个文件结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;throughout = 217
nprocs = 4
throughout =220
nprocs = 4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta-fang-fa"&gt;其他方法&lt;/h3&gt;
&lt;p&gt;这些方法没有用在dbench,但是可以进行添加
&lt;strong&gt;warmup&lt;/strong&gt;
在正式性能测试前,可以进行一次验证测试,确保结果有效;可以在设置之后,进行调用job.run_test来执行一次测试.
&lt;strong&gt;cleanup&lt;/strong&gt;
测试后的清理工作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;execute&lt;/strong&gt;
通过调用warmup, run_once,postprocess用于测试.提供的基本的test类已实现了支持使能分析器和并行运行.如果需要支持自定义行为,就需要重写.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加自己的测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只需创建测试下一个新的子目录，并添加自己的控制文件，源代码和包装。 比较简单的做法是,复制dbench.py ​​为mytest.py ,然后对它进行编辑.&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/15/autotest/"&gt;Autotest：Autotest-Control file specification&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/17/autotest/"&gt;Autotest:Using and developing job profilers&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-16:2015/08/16/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-Control file specification</title><link>http://king32783784.github.io/2015/08/15/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h2 id="control-file-specification"&gt;Control file specification&lt;/h2&gt;
&lt;p&gt;该篇主要介绍control文件的标准.该标准主要为了使自定义的control文件能够提供前端或测试所需要的信息,并且能够通过前端修改.
主要内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名control文件&lt;/li&gt;
&lt;li&gt;常用变量&lt;/li&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="controlwen-jian-ming-ming"&gt;control文件命名&lt;/h3&gt;
&lt;p&gt;control文件命名必须是control.xxxx,xxxx是你定义或则代码评审定义．　例如，５００次硬重启测试，一个正规的定义就是　control.hard500&lt;/p&gt;
&lt;h3 id="chang-yong-bian-liang"&gt;常用变量&lt;/h3&gt;
&lt;p&gt;下面是一个常用变量的列表&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*AUTHOR&lt;/td&gt;
&lt;td&gt;测试编写的个人或公司信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ＤEPENENCIES&lt;/td&gt;
&lt;td&gt;测试依赖信息，比如"CONSOLE"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*DOC&lt;/td&gt;
&lt;td&gt;描述测试包括哪些参数的说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXPERIMENTAL&lt;/td&gt;
&lt;td&gt;如果定义为True,测试忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*NAME&lt;/td&gt;
&lt;td&gt;前端识别测试的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RUN_VERIFY&lt;/td&gt;
&lt;td&gt;定义scheduler是否执行验证，默认为True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SYNC_COUNT&lt;/td&gt;
&lt;td&gt;次数，接受大于等于１的参数，默认为１&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*TIME&lt;/td&gt;
&lt;td&gt;说明测试时长，　ＳＨＯＲＴ&amp;lt;15m, MEDIUM &amp;lt; 4H ,LONG &amp;gt;4H&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEST_CLASS&lt;/td&gt;
&lt;td&gt;描述类属于类型，如内核．硬件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEST_CATEGORY&lt;/td&gt;
&lt;td&gt;描述测试的类型，如压力，功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*TEST_TYPE&lt;/td&gt;
&lt;td&gt;测试类型：client server&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;标*是每个control文件的必填．并且提供一个脚本用于检查utils/check_control_file_vars.py&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AUTHOR(必填)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设计者的信息是必填，用来后续追踪测试和修改bug,邮箱地址是必须的．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DEPENDENCIES（可选，默认：none)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相关性是描述你需要运行测试什么类型硬件的一种方式。 依赖是说,比如你需要测试蓝牙：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEPENDENCY =&amp;ldquo;bluetooth&amp;rdquo;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中， Bluetooth是在自动测试创建并已添加到一台机器,自动测试或者通过CLI或Django管理界面的确切标签。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DOC(必需)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文档需要说明测试项测试时需要的条件，确认测试正常运行．以及如果进行调整和修改．同时def execute()调用的参数代表什么含义．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPERIMENTAL(可选默认：False)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果设置，前端会忽略这些测试生产自动测试服务器测试导入过程。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NAME(必需)&lt;/strong&gt;
指定的名字，前端会用来显示，这对于不同测试文件为了同一测试的不同验证需求非常有用．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RUN_VERIFY(可选，默认TRUE)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用来定义scheduler是否进行验证&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SYNC_COUNT(可选默认１)&lt;/strong&gt;
　１代表的是可以异步执行，大于１代表需同步执行
如果一个测试需要两台机器，SYNC_COUNT=2.autotest就会判断是否满足条件
例如，发布向２３台机器发布任务，单只有２２个可以执行，单独的那个会失败．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIME(Required)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测试需要的时间，不包括设置时间．&lt;/p&gt;
&lt;table class="table table-hover table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SHORT&lt;/td&gt;
&lt;td&gt;小于１５分钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUM&lt;/td&gt;
&lt;td&gt;少于４Ｈ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LONG&lt;/td&gt;
&lt;td&gt;大于４Ｈ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;TEST_CATEGORY(必需)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义测试属于哪一类
例如　功能性或压力&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST_CLASS(必需)&lt;/strong&gt;
　xxxx描述类类型的测试。 如果你有不同类型的要过滤的测试，这是非常有用的。
如果一个测试中加入一个TEST_CLASS，前端如果不存在这个类，就要补充这个类。
示例测试类
&lt;em&gt;内核
&lt;/em&gt;硬件 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST_TYPE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个要告诉前端什么类型的测试．有效值是server或client.&lt;/p&gt;
&lt;h3 id="shi-li"&gt;示例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIME ='MEDIUM'
AUTHOR = 'Scott Zawalski ( scott@xxx.com )'
TEST_CLASS = 'Hardware'
TEST_CATEGORY = 'Functional'
NAME = 'Hard Reboot'
SYNC_COUNT = 1
TEST_TYPE = 'server'
TEST_CLASS = 'Hardware'
DEPENDCIES = 'POWER, CONSOLE'

DOC = """
Tests the reliability of platforms when rebooted. This test allows
you to do a hard reboot or a software reboot.

Args:
type: can be "soft" or "hard", default is "hard"
e.g. job.run_test('reboot', machine, type="soft")
This control file does a HARD reboot
"""

def run(machine):
job.run_test('reboot', machine, type="hard")
parallel_simple(run, machines)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/14/autotest/"&gt;Autotest:Autotest-client control&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/16/autotest/"&gt;Autotest:Autotest-add test&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-15:2015/08/15/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-client control</title><link>http://king32783784.github.io/2015/08/14/autotest/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h2 id="client-control-files"&gt;Client Control files&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主要内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jobs 例子&lt;/li&gt;
&lt;li&gt;扩展测试&lt;/li&gt;
&lt;li&gt;流程控制&lt;/li&gt;
&lt;li&gt;系统信息抓取&lt;/li&gt;
&lt;li&gt;分析器&lt;/li&gt;
&lt;li&gt;创建文件系统&lt;/li&gt;
&lt;li&gt;job执行期间重启&lt;/li&gt;
&lt;li&gt;并行运行多个测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;control file定义了一次test job 关键信息,它定义了一次测试的方方面面.control文件是一个python脚本,它驱动这个测试.&lt;/p&gt;
&lt;h2 id="jobli-zi"&gt;job例子&lt;/h2&gt;
&lt;p&gt;可以添加一个job对象用来驱动测试和一些服务支持.一个job例子可以是这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test('kernbench')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数只有测试的名字(kernbench).autotest有很多测试用例,每个测试都有一个简单的control文件(tests/&lt;testname&gt;/control
在autotestclient端的顶层目录下,你可以执行测试:&lt;/testname&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ client/autotest-local &amp;lt;control_file_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在control文件中同样可以指定测试参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test('kernbench', iterations=2, threads=5)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数是测试名称;&lt;/li&gt;
&lt;li&gt;第二个参数是执行次数和线程数,大多数你可以执行它的默认参数.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以指定一个tag参数,用来给测试结果目录命名:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.run_test('kernbench', iterations=2, threads=5, tag='mine')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试时会创建结果目录"kernbench.mine"来替代之前的"kernbench".这个功能非常重要,当你执行了多次测试,可以用来区分测试结果.&lt;/p&gt;
&lt;h2 id="kuo-zhan-ce-shi"&gt;扩展测试&lt;/h2&gt;
&lt;p&gt;当开发一个测试时,为了让它能正常的下载和执行时,需要符合扩展测试的要求.&lt;/p&gt;
&lt;h2 id="liu-cheng-kong-zhi"&gt;流程控制&lt;/h2&gt;
&lt;p&gt;真正掌握一门语言用于脚本控制是学会它的控制结构和错误检查机制.这里给出一个kernbench运行不同threads的例子.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for t in [8, 16, 32]:
    job.run_test('kernbench', iterations=2, threads=t, tag='%d' % t)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="xi-tong-xin-xi-zhua-qu"&gt;系统信息抓取&lt;/h2&gt;
&lt;p&gt;每次重启和测试时,autotest都会生成一个目录用来保存系统的信息.比如/proc/meminfo文件内容,"uname-a"的输出信息.可以在测试结果目录找那个查看.
sysinfo/(每次重启前的数据), &lt;testname&gt;/sysinfo(每次测试前的数据)
每次收集的信息列表的内容,可以通过查看&lt;strong&gt;clent/bin/base_sysinfo.py&lt;/strong&gt;.当然autotest也提供了自定义收集系统信息的机制.可以通过这个方式进行自定义
的系统信息收集:&lt;/testname&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.add_sysinfo_file("/proc/vmstat")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以设置每次重启后,收集/proc/vmstat的信息.可以通过on_every_test参数实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.add_sysinfo_file("/proc/vmstat", on_ervey_test=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外一种方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.add_sysinfo_command("lspci -v", logfile="lspci.txt")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样每次重启都可以执行lspci -v,并把信息导入到lspci.txt. logfile的参数是可选的.如果不指定它,就会默认以lspci_ -v作为名字.这个方法,同样是每次reboot都会
 执行.&lt;/p&gt;
&lt;h2 id="shi-yong-fen-xi-qi"&gt;使用分析器&lt;/h2&gt;
&lt;p&gt;你可以启用一个或多个分析器.下面是添加和移除的例子:
    job.profilers.add('oprofile')
    job.run_test('sleeptest')
    job.profilers.delete('oprofile')&lt;/p&gt;
&lt;p&gt;多个测试使用方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.profilers.add('oprofile')
job.run_test('kernbench')
job.run_test('dbench')
job.profilers.delete('oprofile')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它会为每个测试生成独立的分析结果,以免不影响性能结果.分析结果会在测试结果目录下的&lt;testname profiling=""&gt;
当然,在profilers/&lt;profiler-name&gt;/control下有所有的示例.&lt;/profiler-name&gt;&lt;/testname&gt;&lt;/p&gt;
&lt;h2 id="chuang-jian-wen-jian-xi-tong"&gt;创建文件系统&lt;/h2&gt;
&lt;p&gt;autotest内建支持创建文件系统.用来支持在不同文件系统中进行fsx测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# uncomment this line, and replace the device with something sensible
# for you ...
# fs = job.filesystem('/dev/hda2', job.tmpdir)

for fstype in ('ext2', 'ext3'):
    fs.mkfs(fstype)
    fs.mount()
    try:
        job.run_test('fsx', job.tmpdir, tag=fstype)
    finally:
        fs.unmount()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样支持为不同的文件系统添加不同的挂载参数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fs = job.filesystem('/dev/sda3', job.tmpdir)
iters=10
for fstype, mountopts, tag in (('ext2', '', 'ext2'),
                               ('ext3', '-o data=writeback', 'ext3writeback'),
                               ('ext3', '-o data=ordered', 'ext3ordered'),
                               ('ext3', '-o data=journal', 'ext3journal')):
    fs.mkfs(fstype)
    fs.mount(args=mountopts)
    try:
        job.run_test('fsx', job.tmpdir, tag=tag)
        job.run_test('iozone', job.tmpdir, iterations=iters, tag=tag)
        job.run_test('dbench', iterations=iters, dir=job.tmpdir, tag=tag)
        job.run_test('tiobench', dir=job.tmpdir, tag=tag)
    finally:
        fs.umount()
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jobce-shi-zhong-zhong-qi"&gt;job测试中重启&lt;/h2&gt;
&lt;p&gt;当一个job需要重启时,比如导入一个新的内核.这样就会导致control脚本执行中断.这样就需要分布执行的模块.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def step_init():
    job.next_step([step_test])
    testkernel = job.kernel('2.6.18')
    testkernel.config('http://mbligj.org/congig/opteron2')
    testkernel.build()
    testkernel.boot()  #does autotest by default

def step_test():
    job.run_test('kernbench', iterations=2, threads=5)
    job.run_test('dbench', iterations=5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过指定&lt;strong&gt;step_init&lt;/strong&gt;表明控制脚本已一种分布模式执行.在执行中断时(如reboot)会保存测试环境.&lt;/p&gt;
&lt;p&gt;一个重要的提示是分布执行引擎并不意味支持这个测试过程的分步执行.只能支持再控制文件级别中实现.因为在测试程序执行时一些返回值.实现自动测试过程中中断测试
不太现实.如果出现超时,会杀死子线程.
因此,代码插入到control文件中是正确的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; def step_init():
     job.next_step([step_test])
     testkernel = job.kernel('testkernel.rpm')
     testkernel.install()
     testkernel.boot()

def step_test()
     job.run_test('ltp')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关代码插入到测试模块中,是不行的.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Kerneltest&lt;/span&gt;(&lt;span class="n"&gt;test&lt;/span&gt;.&lt;span class="n"&gt;test&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;testkernel&lt;/span&gt; = &lt;span class="n"&gt;job&lt;/span&gt;.&lt;span class="n"&gt;kernel&lt;/span&gt;(&lt;span class="s"&gt;'testkernel.rpm'&lt;/span&gt;)
        &lt;span class="n"&gt;testkernel&lt;/span&gt;.&lt;span class="n"&gt;boot&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接的,当使用分布引擎时,控制文件不是简单的执行一次.而是循环执行,直到测试完成.在一个独立的情况下，当一个控制文件存在，在重启之后会自动启动执行.在托管环境中管理服务器将执行相同的作用.
当面对分步执行时,循环会变得更加困难.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def step_init():
    step_test(1)

def step_test(iteration):
    if (iteration &amp;lt; 5):
        job.next_step([step_test, iteration + 1])

    print "boot: %d" % iteration

    job.run_test('kernbench', tag="%s" % i)
    job.reboot()
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="bing-xing-yun-xing"&gt;并行运行&lt;/h2&gt;
&lt;p&gt;job对象同样提供一个并行运行多个测试的方法. 该方法采用可变数量的参数，分别代表不同的任务并行运行。 每个参数应该是一个列表，其中该列表中的第一项是一个函数的调用和所有其余元素都将被传递给函数被调用时的参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def first_task():
    job.run_test('kernbench')

def second_task():
    job.run_test('dbench')

job.parallel([first_task], [second_task])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;控制文件会同时执行kernbench和dbench.代码还可以如此写:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;job.parallel([job.run_test, 'kernbench', [job.run_test, 'dbench'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你想这样更复杂的东西在你的任务中,而不是要求单一的功能，那么你就必须定义自己的函数来做到这一点，如在第一个例子。&lt;/p&gt;
&lt;p&gt;并行任务执行在自己的地址空间,你不比担心.但是毕竟是运行在同一台物理机中.仍然需要主要避免访问同一资源,如相同的文件.&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/13/autotest02/"&gt;Autotest：Autotest-Local&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/15/autotest/"&gt;Autotest：Autotest-Control file specification&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Fri, 14 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-14:2015/08/14/autotest/</guid><category>自动化测试</category></item><item><title>Autotest-Local</title><link>http://king32783784.github.io/2015/08/13/autotest02/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h2 id="local-former-client"&gt;Local (Former Client)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主要内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速入门&lt;/li&gt;
&lt;li&gt;client端控制文件&lt;/li&gt;
&lt;li&gt;测试模块开发&lt;/li&gt;
&lt;li&gt;如何添加测试到autotest&lt;/li&gt;
&lt;li&gt;使用和开发job profilers&lt;/li&gt;
&lt;li&gt;linux发行版检测&lt;/li&gt;
&lt;li&gt;API 参考&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kuai-su-ru-men"&gt;快速入门&lt;/h3&gt;
&lt;p&gt;Autotest 客户端需要很少的依赖,需要安装python2.4或以上版本.推荐使用虚拟机或测试机验证,避免出现异常.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载client端&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --recursive git://github.com/autotest/autotest.git
cd autotest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试例子&lt;/strong&gt;
比如autotest中的sleeptest,sleeptest是一个简单的sleep几秒测试.可以从autotest目录启动(/usr/local/autotest/client):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-local --verbose run sleeptest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过以下方式,进行任何独立测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-local run &amp;lt;testname&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以通过control文件启动测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-local client/tests/sleeptest/control
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一些测试可能需要root权限,比如rtc测试.当提示结果为"permission denied error"时,意味着权限不足,你需要以root执行.
&lt;strong&gt;如果以root身份执行client端,后又切回到普通用户,一些重要的目录,可能是root用户的,再进行测试可能会出错.这时你可以删除这些目录:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo rm -rf client/tmp
sudo rm -rf client/results
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在client/samples目录下面有一些测试例子,非常适合练习.kbuile_and_tests/control会下载一个内核,并且编译,而且会重启后进入该内核.
可以以root身份执行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client/autotest-loacl --verbose client/samples/kbuild_and_tests/control
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意,尽量在一个测试机或虚拟机执行,不然会丢失之前系统的启动设置.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/08/12/Autotest01/"&gt;Autotest：Autotest-summary&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/08/14/autotest/"&gt;Autotest：Autotest-client control&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Thu, 13 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-13:2015/08/13/autotest02/</guid><category>自动化测试</category></item><item><title>Autotest-summary</title><link>http://king32783784.github.io/2015/08/12/Autotest01/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/autotestlogo.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;p&gt;Autotest是一个开源的自动化测试框架.设计目的是为了测试Linux内核,同样可以用来检查新的硬件,虚拟化测试以及linux平台用户空间程序.它遵循GPL协议,并有大量的开发组织成员,其中包括像谷歌,IBM,红帽等.
Avocado,是Autotest开发组,开发的下一代的自动化测试框架.详细信息参考&lt;a href="http://avocado-framework.github.io/"&gt;Avocado&lt;/a&gt;,后续有时间会再对Avocado进行介绍.
本专题主要介绍以下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* 基本信息
* 客户端介绍
* 服务端介绍
* 前端介绍
* 系统管理
* 调度模块
* 如何开发
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本文主要介绍关于Autotest的一些基本信息.主要内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* Autotest主要结构
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Autotest项目主页:&lt;a href="http://autotest.github.io/"&gt;Autotest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href="https://github.com/autotest/autotest"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="autotestzhu-yao-jie-gou"&gt;Autotest主要结构&lt;/h2&gt;
&lt;p&gt;下图是Autotest框架简化图:&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/Autotest1.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;h3 id="webjie-kou-he-ming-ling-xing-jie-kou"&gt;Web接口和命令行接口&lt;/h3&gt;
&lt;p&gt;Web接口和命令行接口是相辅相成的方式去连接Autotest并创建job.这两则具有相同的功能,意在方便用户.你可以用这些接口做以下事情:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* 管理jobs,如创建,监控,中止等
* 管理客户端
* 查看测试结果
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前端会通过向mysql数据库中创建记录的方式将jobs插入服务端.&lt;/p&gt;
&lt;h3 id="fu-wu-duan"&gt;服务端&lt;/h3&gt;
&lt;p&gt;服务端主要包括3个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个Mysql数据库,该数据库保存了所有的job,客户端(测试物理机),用户,测试项目等信息&lt;/li&gt;
&lt;li&gt;调度程序(monitor_db),从数据库中选择jobs 运行.它对数据库的操作,主要是为了启动autoserv进程去调用服务请求.&lt;ul&gt;
&lt;li&gt;通常一台测试机一个调度进程&lt;/li&gt;
&lt;li&gt;客户机端的jobs是异步的(设置客户端机变为可用)&lt;/li&gt;
&lt;li&gt;服务器端的jobs是同步的(它启动前要等待所有客户端机)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoserv: 服务端通过autoserv程序管理客户端,每个运行的job都会有一个autoserv进程.每个autoserv进程:&lt;ul&gt;
&lt;li&gt;控制和监控一个或多个客户端&lt;/li&gt;
&lt;li&gt;确认客户端是否工作正常,如果确认失败,会尝试修复.&lt;/li&gt;
&lt;li&gt;管理job的执行&lt;/li&gt;
&lt;li&gt;在开始测试前,更新客户端的autotest程序.(如新增了测试项)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外,mysql数据库可用部署在不同的机器上进行调度,虽然有一定的调度负载,但每个可用管理几千个客户端.所以没必要部署在不同机器上.&lt;/p&gt;
&lt;h3 id="ke-hu-duan"&gt;客户端&lt;/h3&gt;
&lt;p&gt;启动一个job后,client端做了大部分的工作.它的调用方式有:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;手动执行:通过client/autotest-local &amp;lt;control_file_name&amp;gt;命令启动
通过服务端调用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个典型的工作流程如下:&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/Autotest2.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简要说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户创建job(可以通过web端或命令行)或自动事件触发;将job信息记录插入前端数据库;调度器(monitor_db)将job匹配到空闲机器;调度器创建autoserv进程启动job;Autoserv确认客户端或修复;Autoserv在测试机器上安装或更新autotest客户端;Autoserv监控客户端状态,监视问题;
客户机器触发autotest客户端执行测试(已开发测试项目)-运行control文件-log模块记录测试信息-setup-执行测试-测试结果文件由autoserv回收;分析机器新的job;log结果信息处理;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果目录&lt;/strong&gt;:按照一定格式结果目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果数据库&lt;/strong&gt;:一个简单的数据库保存每个测试的job信息 测试结果 性能指标等&lt;/p&gt;
&lt;p&gt;随着前面的介绍,下图是更容易理解的基本框架图:&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://github.com/king32783784/king32783784.github.io/blob/master/tmpfile/Autotest3.png?raw=true" width="480"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简要说明:&lt;/strong&gt;
Autotest通过 Web 前端或者命令行工具提交测试任务， Autotest Server 通过调度器将任务分发到不同的 Client（测试机）， Client 端任务执行完之后，再将结果返回到结果分析后端，Web 前端与命令行接口即可查看测试结果
.
主要构成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local：在测试机Client上执行测试的引擎&lt;/li&gt;
&lt;li&gt;Remote：从Server端推送测试代码到客户测试机，触发测试执行，监控测试状态，并且把测试结果从测试机反馈到服务器。&lt;/li&gt;
&lt;li&gt;Scheduler：根据用户输入分配测试任务，为每个任务创建服务进程，存储结果到测试数据库&lt;/li&gt;
&lt;li&gt;Frontends：允许用户运行作业并且方便地使测试结果可视化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2015/08/13/autotest02/"&gt;Autotest：Autotest-Local&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Wed, 12 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-08-12:2015/08/12/Autotest01/</guid><category>自动化测试</category></item><item><title>selenium-Sample(三）</title><link>http://king32783784.github.io/2015/01/25/selenium/</link><description>&lt;body&gt;&lt;h4 id="shi-li-5-tuo-fang-draghe-drop"&gt;示例５　拖放drag和drop&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://192.168.32.3/"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"forgot_link_bottom"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//*[@id='quicksearch_main']"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;action_chains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;action_chains&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drag_and_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"find"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element = self.driver.find_element_by_id("forgot_link_bottom")　＃获取源元素
target = self.driver.find_element_by_xpath("//*[@id='quicksearch_main']")　#获取移动到的元素
action_chains = ActionChains(self.driver)
action_chains.drag_and_drop(element, target).perform()　#执行拖放
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="shi-li-6-dan-chu-dui-hua-kuang-shi-li"&gt;示例6 弹出对话框示例&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://192.168.32.3/"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"find"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;alert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch_to_alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="c1"&gt;#获取警告对话框&lt;/span&gt;
        &lt;span class="n"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　＃确定警告对话框&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Testdrog_drop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testdrop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="shi-li-7-li-shi-ji-lu-he-wei-zhi-shi-li"&gt;示例７　历史记录和位置示例&lt;/h4&gt;
&lt;p&gt;代码
    #!/bin/bash/env python
    # -&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://192.168.32.3/"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"enter_bug"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testhistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testhistory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testhistory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testhistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：　&lt;/p&gt;
&lt;p&gt;self.driver.back()和self.driver.forward()　实现了页面的返回和前进。&lt;/p&gt;
&lt;h4 id="shi-li-8-cookiestian-jia"&gt;示例８　Cookies添加&lt;/h4&gt;
&lt;p&gt;代码：
    #!/bin/bash/env python
    # &lt;em&gt;-&lt;/em&gt; coding: utf-8 &lt;em&gt;-&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getcookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://www.baidu.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cookieslist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cookies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookieslist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addcookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'test01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'test02'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cookieslist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cookies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookieslist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;testcookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestCookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;testcookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addcookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：  cookie格式为字典包括"name"和&amp;ldquo;value"两个键值对。add_cookie方法将cookie添加到cookies中。&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="380" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/WBB0EXYSWE.jpg" width="420"/&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/24/selenium/"&gt;selenium-Sample(二)&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/26/selenium/"&gt;selenium-Sample(四)&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Sun, 25 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-25:2015/01/25/selenium/</guid><category>Selenium</category></item><item><title>selenium-Sample(二）</title><link>http://king32783784.github.io/2015/01/24/selenium/</link><description>&lt;body&gt;&lt;h3 id="chang-jian-ying-yong-de-shi-li"&gt;常见应用的示例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Sample List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;填写表单示例1-自动设置bugzilla Simple Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;填写表单示例2-自动设置bugzilla Advanced Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拖放drag和drop示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;窗口和框架之间移动示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;弹出对话框示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;历史记录和位置示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookies示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元素定位不同方式示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ID定位
名称定位
Xpath定位
链接文本定位超链接
Tag Name定位
class name定位
css选择器定位
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;等待-不同条件显示等待示例-待定&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;title_is
title_contains
presence_of_element_locate
visibility_of_element_located
visibility_of
presence_of_all_elements_located
text_to_be_present_in_element_value
text_to_be_present_in_element
frame_to_be_available_and_switch_to_it
invisibility_of_element_located
elements_to_be_clickable-it is Displayed and Enabled
staleness_of
element_to_be_selected
element_located_to_be_selected
element_selection_state_to_be
element_located_selection_state_to_be
arelt_is_present
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;等待-等待示例-隐式等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页面对象设计模式示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;... ...&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/RGBIHR91YT.jpg" width="420"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例3. 填写表单示例1-自动设置bugzilla Simple Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;code:&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="c1"&gt;# test网址&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://192.168.32.3/"&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;


    &lt;span class="c1"&gt;# 导航到samplesearch页面&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;simplesearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searchdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"tab_specific"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sampledriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchdriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simplesearch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sampledriver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;statusvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'__all__'&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bug_status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;statusvalues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;productvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'iSoft_Desktop_v4.0_for loongson'&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'product'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productvalues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchbutton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//*[@id='search']"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchbutton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;分析：
doclick方法实现对选定元素的点击。&lt;/p&gt;
&lt;p&gt;getSearchpage 方法获取简单搜索页面&lt;/p&gt;
&lt;p&gt;dosearch方法是流程控制&lt;/p&gt;
&lt;p&gt;重点讲一下setseclect方法，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def setseclect(self, driver, name, values):
    select = Select(driver.find_element_by_name(name))) # 通过Select类的调用，获取下拉框
    for value in values: # 进行指定下拉框选项的设定
        select.select_by_value(value)
    return driver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现对下拉框的定位和下拉框值的设定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例4. 填写表单示例2-自动设置bugzilla Advanced Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;code:&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="c1"&gt;# bugzilla address&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://192.168.32.3/"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AdvanceSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchdriver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;searchdriver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selects&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;selects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;selectlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;selectlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iSoft_Desktop_v4.x_x86-64'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iSoft_Desktop_v4.0_x86-64'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;selects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'product'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
        &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSearchpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;setselect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setseclect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchbutton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;setselect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Search'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doclick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setselect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchbutton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;autosearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AdvanceSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;autosearch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dosearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;分析：
　　大部分和上一个例子代码类似。其中setseclect方法不同&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def setseclect(self, driver, selects):
    for k, v in selects.iteritems():
        selectlist = Select(driver.find_element_by_name(k))
        for value in v:
            selectlist.select_by_value(value)
    return driver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过一个字典将选择框的name属性和要选择的项目列表传入。通过遍历，将两个项目复选。&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/23/selenium/"&gt;selenium-Sample(一)&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/25/selenium/"&gt;selenium-Sample(二)&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Sat, 24 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-24:2015/01/24/selenium/</guid><category>Selenium</category></item><item><title>selenium-Sample(一）</title><link>http://king32783784.github.io/2015/01/23/selenium/</link><description>&lt;body&gt;&lt;h3 id="ying-yong-shi-li"&gt;应用示例&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.通过selenium爬取"https://stocksnap.io/"上的图片。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简要说明，通过selenium打开firefox浏览器，导航到指定网址；然后定位到图片源地址，并保存；然后调用urllib模块，下载图片到指定位置。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#!/bin/bash/env python&lt;/span&gt;
    &lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

    &lt;span class="c1"&gt;# 爬取页面地址  &lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://stocksnap.io/"&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetpicHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gethtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximize_window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;img_url_dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 模拟滚动窗口以浏览下载更多图片  &lt;/span&gt;
            &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# 图片编号  &lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="c1"&gt;# 每次下滚500  &lt;/span&gt;
                &lt;span class="n"&gt;js&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"document.documentElement.scrollTop=&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;elemlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//*[@id='main']/a[*]/img"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;elemlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;img_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;img_url&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;img_url_dic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                
                        &lt;span class="n"&gt;img_url_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img_url&lt;/span&gt;
                        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;img_url_dic&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_list&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_dir&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;downloadfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; Download error:"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;control&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r"https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/(.+?).jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;".jpg"&lt;/span&gt;
                &lt;span class="n"&gt;localname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downloadfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;getsrc&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetpicHtml&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;urllist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getsrc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethtml&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;downloadpic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DownloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/home/isoft_lp/tmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.execute_script(js)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用execute_scripts执行JavaScript脚本，随后会重点说明该方法；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elemlist= self.driver.find_elements_by_xpath("//*[@id='main']/a[*]/img")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过xpath获取图片元素；&lt;/p&gt;
&lt;p&gt;元素内容&amp;rdquo;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"&amp;lt;img src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/9XCA8GIDBS.jpg" height="280" width="420"&amp;gt;"；
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/9XCA8GIDBS.jpg" width="420"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;img_url = elem.get_attribute('src')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取图片源地址；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;filename = re.findall(r"https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/(.+?).jpg", v)[0] + ".jpg"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取图片文件的原名字；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;response = urllib2.urlopen(url)
urllib.urlretrieve(url, localname)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定url和本地地址，进行文件的下载&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;２．自动登陆https://github.com/&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简要说明，通过selenium打开firefox浏览器，导航到指定网站，点击Sign in,自动输入账号密码，实现自动登陆。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.action_chains&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;

&lt;span class="c1"&gt;# 登陆网址&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/"&lt;/span&gt;

&lt;span class="c1"&gt;# 账号密码&lt;/span&gt;

&lt;span class="n"&gt;loginname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"xxxx@xx"&lt;/span&gt;
&lt;span class="n"&gt;passwordvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"xxxxx"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoLoginGithub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# 导航到github登陆页面&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getloginpage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 定位signin按钮&lt;/span&gt;
        &lt;span class="n"&gt;signin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/header/div/div/div/a[2]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 点击signin按钮，进入登陆页面&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#　移动光标至sigin按钮 &lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;autologin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="err"&gt;　　　&lt;/span&gt;&lt;span class="c1"&gt;#　获取新的页面对象&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getloginpage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;＃　定位账号输入框&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"login_field"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　输入账号信息&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　定位密码输入框&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　输入密码信息&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passwordvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　定位登陆按钮&lt;/span&gt;
        &lt;span class="n"&gt;dologin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//*[@id='login']/form/div[4]/input[3]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;＃　点击登陆按钮&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dologin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dologin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoLoginGithub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;autologin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autologin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;代码说明：&lt;/p&gt;
&lt;p&gt;以下代码，实现按钮的点击&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;actions = ActionChains(self.driver)
#　移动光标至sigin按钮 
actions.move_to_element(signin)
actions.click(signin)
actions.perform()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/22/selenium/"&gt;Selenium主题10&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/24/selenium/"&gt;selenium-Sample(二)&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Fri, 23 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-23:2015/01/23/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题10</title><link>http://king32783784.github.io/2015/01/22/selenium/</link><description>&lt;body&gt;&lt;h3 id="1chang-jian-wen-ti"&gt;1.常见问题&lt;/h3&gt;
&lt;h4 id="11-ru-he-shi-yong-chromedriver"&gt;1.1 如何使用ChromeDriver?&lt;/h4&gt;
&lt;p&gt;下载最新的chromedriver&lt;a href="https://sites.google.com/a/chromium.org/chromedriver/downloads"&gt;chromedriver from download page&lt;/a&gt;,解压文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unzip chromedriver_linux32_x.x.x.x.zip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压后，会看到chromedriver的二进制文件。然后可以像这样创建Chrome WebDriver实例：
　
    driver = webdriver.Chrome(executable_path="/path/to/chromedriver")&lt;/p&gt;
&lt;h4 id="12-selenium-2shi-fou-zhi-chi-xpath20"&gt;1.2　Selenium 2是否支持XPath2.0?&lt;/h4&gt;
&lt;p&gt;参考&lt;a href="http://www.seleniumhq.org/docs/03_webdriver.jsp#how-xpath-works-in-webdriver"&gt; http://seleniumhq.org/docs/03_webdriver.html#how-xpath-works-in-webdriver&lt;/a&gt;
Selenium 将XPath查询委派给浏览器自己的XPath引擎查询，所以Selenium支持的XPath取决于浏览器的支持。如果浏览器没有XPath引擎（如IE6,7,8)，则Selenium就支持XPath1.0.&lt;/p&gt;
&lt;h4 id="13-ru-he-gun-dong-dao-ye-mian-di-bu"&gt;1.3　如何滚动到页面底部&lt;/h4&gt;
&lt;p&gt;参考&lt;a href="http://blog.varunin.com/2011/08/scrolling-on-pages-using-selenium.html"&gt;http://blog.varunin.com/2011/08/scrolling-on-pages-using-selenium.html&lt;/a&gt;
可以使用execute_script方法执行加载页面中的javascript.因此，可以调用JavaScript API滚动只页面底部或任意位置。
这里给出一个滚动到页面底部的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://www.w3schools.com/jsref/obj_window.asp"&gt;window&lt;/a&gt;DOM对象中有&lt;a href="http://www.w3schools.com/jsref/met_win_scrollto.asp"&gt;scrollTo&lt;/a&gt;方法可以滚动到打开窗口的任意位置。&lt;a href="www.w3schools.com/jsref/dom_obj_all.asp"&gt;scrollHeight&lt;/a&gt;是所有元素的公共部分。document.body.scrollHeight会提供页面的整个高度。&lt;/p&gt;
&lt;h4 id="14-firefox-profileru-he-zi-dong-bao-cun-wen-jian"&gt;1.4 Firefox profile如何自动保存文件？&lt;/h4&gt;
&lt;p&gt;参考：&lt;a href="http://stackoverflow.com/questions/1176348/access-to-file-download-dialog-in-firefox"&gt;http://stackoverflow.com/questions/1176348/access-to-file-download-dialog-in-firefox&lt;/a&gt;
参考：&lt;a href="https://blog.codecentric.de/en/2010/07/file-downloads-with-selenium-mission-impossible/"&gt;http://blog.codecentric.de/en/2010/07/file-downloads-with-selenium-mission-impossible/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一步要确定要保存文件的类型
要确定自动下载的内容类型，可以使用&lt;a href="https://curl.haxx.se/"&gt;curl&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -I URL | grep "Content -Type"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一种方式是通过&lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt;模块去找到文本类型，可以像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://www.python.org'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当content类型被识别后，可以用来进行firefox的偏好设置：
    browser.helperApps.neverAsk.saveToDisk&lt;/p&gt;
&lt;p&gt;示例如下：
　　
    import os&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirefoxProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"browser.download.folerList"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"browser.download.manager.showWhenStarting"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"browser.download.dir"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"browser.helperApps.nerverAsk.saveToDisk"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"application/octet-stream"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://pypi.python.org/pypi/selenium"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_partial_link_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"selenium-2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="err"&gt;在上面的例子中，&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;octet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="err"&gt;用作&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="err"&gt;类型。&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="err"&gt;选项指定需要下载文件的目录。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="15-ru-he-shang-chuan-wen-jian-dao-wen-jian-shu-ru"&gt;1.5 如何上传文件到文件输入？&lt;/h4&gt;
&lt;p&gt;选择&lt;input typ="file"/&gt;元素并调用send_keys()方法传递路径，相对test scipt的相对路径，或绝对路径。注意Windows和unix系统直接路径的差异性。&lt;/p&gt;
&lt;h4 id="16-ru-he-shi-yong-firefoxzhong-de-firebug"&gt;1.6 如何使用Firefox中的firebug？&lt;/h4&gt;
&lt;p&gt;首先下载Firebug XPI文件，然后调用add_extension方法进行firefox profile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirefoxProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'firebug-1.8.4.xpi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_preference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"extensions.firebug.currentVersion"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"1.8.4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Avoid startup screen&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="17-ru-he-huo-qu-dang-qian-chuang-kou-de-jie-ping"&gt;1.7 如何获取当前窗口的截屏&lt;/h4&gt;
&lt;p&gt;使用webdriver提供的save_screenshot方法获取。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://www.python.org/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'screenshot.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/21/selenium/"&gt;Selenium主题9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2015/01/23/selenium/"&gt;selenium-Sample(一)&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Thu, 22 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-22:2015/01/22/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题9</title><link>http://king32783784.github.io/2015/01/21/selenium/</link><description>&lt;body&gt;&lt;h3 id="remote-webdriver"&gt;Remote WebDriver&lt;/h3&gt;
&lt;p&gt;WebDriver实现。&lt;/p&gt;
&lt;p&gt;class selenium.webdriver.remote.webdriver.WebDriver(command_executor='http://127.0.0.1:4444/wd/hub', desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False, file_detector=None)&lt;/p&gt;
&lt;p&gt;Bases: object
控制浏览器向remote server发送命令。Remote server 运行的协议定义为&lt;a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol"&gt;https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol&lt;/a&gt;.
属性：
    * session_id- webdriver用于打开和控制浏览器窗口的ＩＤ字符串
    * capabilities- Dictionaty of effective capabilities of this browser session as returned
    　　　remote server,见&lt;a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities"&gt;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&lt;/a&gt;
    * command_executor -远程链接。RemoteConnection对象执行命令。
    * error_handler- errorhandler. ErrorHandler对象用于处理错误。
    　　　
add_cookie(cookie_dict)&lt;/p&gt;
&lt;p&gt;添加cookie到当前会话。
Args: * cookie_dict:字典对象，具有所需要的秘钥－&amp;rdquo;name"和&amp;ldquo;value".
keys选项　&amp;rdquo;path", "domain", "secure", "expiry"&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.add_cookie({'name':'foo', 'value':'bar'}) driver.add_cookie({'name':'foo', 'value':
'bar', 'path':'/'}) driver.add_cookie({'name':'foo', 'value':'bar','path':'/','secure':True})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;back()&lt;/p&gt;
&lt;p&gt;浏览器历史记录中后退一步
用法：driver.back()&lt;/p&gt;
&lt;p&gt;close()&lt;/p&gt;
&lt;p&gt;关闭当前窗口
用法：driver.close()&lt;/p&gt;
&lt;p&gt;create_web_element(element_id)&lt;/p&gt;
&lt;p&gt;创建指定元素id的web元素&lt;/p&gt;
&lt;p&gt;delete_all_cookies()&lt;/p&gt;
&lt;p&gt;删除会话中所有的cookies
用法：driver.delete_all_cookies&lt;/p&gt;
&lt;p&gt;delete_cookies(name)&lt;/p&gt;
&lt;p&gt;删除给出名字的单一cookie
用法：driver.delete_cookie('my_cookie')&lt;/p&gt;
&lt;p&gt;execute(driver_command, params=None)&lt;/p&gt;
&lt;p&gt;通过 command.CommandExecutor发送命令
参数：
    * driver_command: 执行命令名称的字符串
    * params: 使用命令发送的命名参数的字典
返回：命令的json导入到字典对象&lt;/p&gt;
&lt;p&gt;excute_async_scipt(scipt, *args)&lt;/p&gt;
&lt;p&gt;异步执行当前窗口／框架中的javascript
Args:
    * script: 要执行的javascript
    * *ags: 任何javascript适用的参数
用法：driver.execute_async_script('document.title')&lt;/p&gt;
&lt;p&gt;execute_script(script, *args)&lt;/p&gt;
&lt;p&gt;同步执行当前窗口/框架中的javascript
Args: 
    * script: 要执行的javascript
    * *ags: 任何javascript适用的参数
用法：driver.execute_scipt('document.title')&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_detector_context(*args, **kwds)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在limited　context覆盖当前的file　detector. 确保original file detector已设置。
例如：
    with webdriver.file_detector_context(UselessFileDetector):
        someinput.send_keys('/etc/hosts')&lt;/p&gt;
&lt;p&gt;参数：　file_detector_clss－ 如果类不同，需要提供文件检测器的类&lt;/p&gt;
&lt;p&gt;从当前file_detector，那么该类用args和kwargs实例化，并在上下文管理器的持续时间期间用作文件检测器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;args－ 期间需要传递给file detector的可选参数
kwargs - 关键字参数，传递方式和args相同
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;find_element(by='id', value=None)&lt;/p&gt;
&lt;p&gt;'Private'方法由find_element_by_&lt;em&gt;方法们使用
用法：　使用相应的find_element_by_&lt;/em&gt; 替换
返回：　WebElement&lt;/p&gt;
&lt;p&gt;find_element_by_class_name(name)&lt;/p&gt;
&lt;p&gt;按类名查找元素
参数：　name-要查找元素的类名
用法：　driver.find_element_by_class_name("foo")&lt;/p&gt;
&lt;p&gt;find_element_by_css_selector(css_selector)&lt;/p&gt;
&lt;p&gt;通过css selector查找元素
参数：css_selector 查找元素使用的css selector
用法：driver.find_element_by_css_selector('#foo')&lt;/p&gt;
&lt;p&gt;find_element_by_id(id_)&lt;/p&gt;
&lt;p&gt;通过id查找元素
参数： id  查找元素的id
用法： driver.find_element_by_id('foo')&lt;/p&gt;
&lt;p&gt;find_element_by_link_text(link_text)&lt;/p&gt;
&lt;p&gt;通过link text查找元素
参数：　link_text 查找元素的link_text
用法：　driver.find_element_by_link_text('Sign ln')&lt;/p&gt;
&lt;p&gt;find_element_by_name(name)&lt;/p&gt;
&lt;p&gt;通过name查找元素
参数：　name: 查找元素的name
用法：　driver.find_element_by_name('foo')&lt;/p&gt;
&lt;p&gt;find_element_by_xpath(xpath)&lt;/p&gt;
&lt;p&gt;通过xpath查找元素
args: xpath 查找元素的xpath定位器
用法：driver.find_element_by_xpath('//div/td/[1]')&lt;/p&gt;
&lt;p&gt;find_element(by='id', value=None)&lt;/p&gt;
&lt;p&gt;find_elements_by_&lt;em&gt;methods使用的'Pvivate'方法
用法：　使用符合要求的find_elements_by_&lt;/em&gt;替换现有的
返回类型：　WebElement列表&lt;/p&gt;
&lt;p&gt;find_elements_by_class_name(name)&lt;/p&gt;
&lt;p&gt;按类名查找元素
参数name: 查找元素的类名
用法：driver.find_elements_by_class_name('foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_css_selector(css_selector)&lt;/p&gt;
&lt;p&gt;按css selector查找元素
css_selector: 查找元素使用的css selector
用法：driver.find_element_by_css_selector('.foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_id(id_)&lt;/p&gt;
&lt;p&gt;按id查找多个元素
id_:要查找元素的id&lt;/p&gt;
&lt;p&gt;find_elements_by_link_text(text)&lt;/p&gt;
&lt;p&gt;通过链接文本查找元素
link_text: 查找元素的链接文本
driver.find_elements_by_link_text('Sign In')&lt;/p&gt;
&lt;p&gt;find_elements_by_name(name)&lt;/p&gt;
&lt;p&gt;按名称查找元素
name:查找元素的名称
driver.find_elements_by_name('foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_partial_link_text(link_text)&lt;/p&gt;
&lt;p&gt;通过部分匹配链接文本查找元素。
link_text: 查找元素部分匹配的链接文本
driver.find_element_by_partial_link_text('Sign')&lt;/p&gt;
&lt;p&gt;find_elements_by_tag_name(name)&lt;/p&gt;
&lt;p&gt;通过tag　name查找元素
name: 查找元素使用的tag name
driver.find_elements_by_tag_name('foo')&lt;/p&gt;
&lt;p&gt;find_elements_by_xpath(xpath)&lt;/p&gt;
&lt;p&gt;通过xpath查找多个元素
xpath: 要查找元素的xpath的定位符
driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")&lt;/p&gt;
&lt;p&gt;forward()&lt;/p&gt;
&lt;p&gt;回退一次浏览器历史记录
driver.forward()&lt;/p&gt;
&lt;p&gt;get(url)&lt;/p&gt;
&lt;p&gt;在当前浏览器窗口加载网页&lt;/p&gt;
&lt;p&gt;get_cookie(name)&lt;/p&gt;
&lt;p&gt;按名称找到单个cookie,如果找到，返回cookie,没有返回None
driver.get_cookie('my_cookie')&lt;/p&gt;
&lt;p&gt;get_cookies()&lt;/p&gt;
&lt;p&gt;返回一组字典，对应当前会话可用的cookies&lt;/p&gt;
&lt;p&gt;driver.get_cookies()&lt;/p&gt;
&lt;p&gt;get_log(log_type)&lt;/p&gt;
&lt;p&gt;获取给定log类型的log
log_type:返回log的log类型
用法：driver.get_log('browser') driver.get_log('driver')
driver.get_log('client') driver.get_log('server')&lt;/p&gt;
&lt;p&gt;get_screenshot_as_base64()&lt;/p&gt;
&lt;p&gt;获取当前窗口截屏的base64编码字符串
这个在嵌入图像到html时非常有用。
用法：driver.get_screentshot_as_base64()&lt;/p&gt;
&lt;p&gt;get_screenshot_as_file(filename)&lt;/p&gt;
&lt;p&gt;获取当前窗口的截屏。如果存在，返回False
任何IOError，否则返回True.在filename中使用绝对路径
filename: 将屏幕截图保存到的完整路径。
driver.get_screenshot_as_file('/Screenshots/foo.png')&lt;/p&gt;
&lt;p&gt;get_screenshot_as_png()&lt;/p&gt;
&lt;p&gt;获取当前窗口的截屏，并保存为二进制数据。
driver.get_screenshot_as_png()&lt;/p&gt;
&lt;p&gt;get_window_position(windowHandle='current')&lt;/p&gt;
&lt;p&gt;获取当前窗口的x,y位置
driver.get_window_position()&lt;/p&gt;
&lt;p&gt;get_window_size(windowHandle='current')&lt;/p&gt;
&lt;p&gt;获取当前窗口的宽和高
driver.get_window_size()&lt;/p&gt;
&lt;p&gt;implicitly_wait(time_to_wait)&lt;/p&gt;
&lt;p&gt;设置固定超时时间等待元素被找到，或命令完成
这个方法只需要在每个对话框执行一次。设置timeout需要调用execute_async_script.
time_to_wait:等待的时间
driver.implicitly_wait(30)&lt;/p&gt;
&lt;p&gt;maximize_window()&lt;/p&gt;
&lt;p&gt;将当前webdriver的窗口最大化&lt;/p&gt;
&lt;p&gt;quit()&lt;/p&gt;
&lt;p&gt;退出dirver并关闭每一个关联的窗口
driver.quit()&lt;/p&gt;
&lt;p&gt;refresh()&lt;/p&gt;
&lt;p&gt;刷新当前的窗口
driver.refresh()&lt;/p&gt;
&lt;p&gt;save_screenshot(filename)&lt;/p&gt;
&lt;p&gt;同 get_screenshot_as_file.&lt;/p&gt;
&lt;p&gt;set_page_load_timeout(time_to_wait)&lt;/p&gt;
&lt;p&gt;设置等待网页加载完成的时间（抛出异常之前）
time_to_wait:等待的时间
driver.set_page_load_timeout(30)&lt;/p&gt;
&lt;p&gt;set_script_timeout(time_to_wait)&lt;/p&gt;
&lt;p&gt;设置脚本运行的时间，直到抛出异常之前
time_to_wait:等待时间
driver.set_script_timeout(30)&lt;/p&gt;
&lt;p&gt;set_window_position(x,y, windowHandle='current')&lt;/p&gt;
&lt;p&gt;设置当前窗口的x,y
driver.set_window_position(0,0)
        　　　
set_window_size( width, height, windowHandle='current')&lt;/p&gt;
&lt;p&gt;设置当前窗口的高和宽
driver.set_window_size(800,600)&lt;/p&gt;
&lt;p&gt;start_client()&lt;/p&gt;
&lt;p&gt;启动新窗口前调用。这个方法使用时可以重写。&lt;/p&gt;
&lt;p&gt;start_session(desired_capabilities, browser_profile=None)&lt;/p&gt;
&lt;p&gt;创建所需功能的新会话
browser_name : 浏览器请求的名称
vesion: 哪些浏览器版本要求。
platform: 哪个平台要求在浏览器上。
javascript_enabled :新回话是否应支持JavaScript。
browser_profile : 一个selenium.webdriver.firefox.firefox_profile.FirefoxProfile对象。只有当被请求的Firefox使用。&lt;/p&gt;
&lt;p&gt;stop_client()&lt;/p&gt;
&lt;p&gt;执行quit命令后调用。用户可以根据需要自定义shutdown行为方法&lt;/p&gt;
&lt;p&gt;switch_to_active_element()&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.active_element&lt;/p&gt;
&lt;p&gt;switch_to_alert()&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.alert&lt;/p&gt;
&lt;p&gt;switch_to_default_content()&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.default_content&lt;/p&gt;
&lt;p&gt;switch_to_frame(frame_reference)&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.frame&lt;/p&gt;
&lt;p&gt;switch_to_window(window_name)&lt;/p&gt;
&lt;p&gt;Deprecated use driver.switch_to.window&lt;/p&gt;
&lt;p&gt;application_cache&lt;/p&gt;
&lt;p&gt;返回一个与浏览器的应用程序缓存交互的ApplicationCache对象&lt;/p&gt;
&lt;p&gt;current_url&lt;/p&gt;
&lt;p&gt;获取当前页的URL
driver.current_url&lt;/p&gt;
&lt;p&gt;current_window_handle&lt;/p&gt;
&lt;p&gt;返回当前窗口的handle
driver.current_window_handle&lt;/p&gt;
&lt;p&gt;desired_capabilities&lt;/p&gt;
&lt;p&gt;返回正在使用当前所需功能的驱动程序 
        　　　
file_detector&lt;/p&gt;
&lt;p&gt;log_types&lt;/p&gt;
&lt;p&gt;获取可用log types的列表
driver.log_types&lt;/p&gt;
&lt;p&gt;mobile&lt;/p&gt;
&lt;p&gt;name
返回此实例中底层浏览器的名称
driver.name&lt;/p&gt;
&lt;p&gt;orientation
获取当前设备的当前位置
orientation = driver.orientation&lt;/p&gt;
&lt;p&gt;page_source
获取当前页面的源码
driver.page_source&lt;/p&gt;
&lt;p&gt;switch_to&lt;/p&gt;
&lt;p&gt;title
返回当前页面的ｔｉｔｌｅ
driver.title&lt;/p&gt;
&lt;p&gt;window_handles
返回当前会话中所有窗口的句柄
driver.window_handles&lt;/p&gt;
&lt;h3 id="webelement"&gt;WebElement&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.remote.webelement.WebElement(parent, id_, w3c=False)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="err"&gt;表示一个&lt;/span&gt;&lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="err"&gt;元素&lt;/span&gt;
&lt;span class="err"&gt;通常与一个文档交互的所有有趣操作将通过该接口来执行&lt;/span&gt;
&lt;span class="err"&gt;所有方法调用前会做一个&lt;/span&gt;&lt;span class="n"&gt;freshness&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;确保引用元素仍然有效。这实际上是检查元素是否仍然连接到&lt;/span&gt;&lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;如果检测测试失败，将会抛出&lt;/span&gt;&lt;span class="n"&gt;StaleElementReferenceException&lt;/span&gt;&lt;span class="err"&gt;异常，并且所有调用都会失败。&lt;/span&gt;

&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

    &lt;span class="err"&gt;清除文本，如果是一个文本输入元素。&lt;/span&gt;

&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

    &lt;span class="err"&gt;点击元素&lt;/span&gt;

&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;find_element_by_class_name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;通过子元素的类名查找元素&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;查找元素的类名&lt;/span&gt;

&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_selector&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;通过子元素的&lt;/span&gt;&lt;span class="n"&gt;CSS&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="err"&gt;查找元素&lt;/span&gt;
    &lt;span class="n"&gt;css_selector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CSS&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="err"&gt;例如&amp;lsquo;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nav&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;

&lt;span class="s1"&gt;find_element_by_id(id_)&lt;/span&gt;

&lt;span class="s1"&gt;    通过子元素的ID查找元素&lt;/span&gt;
&lt;span class="s1"&gt;    id_: 用于定位的子元素的ID&lt;/span&gt;

&lt;span class="s1"&gt;find_elements_by_partial_link_text(link_text)&lt;/span&gt;
&lt;span class="s1"&gt;    通过子元素的link text查找元素的列表&lt;/span&gt;
&lt;span class="s1"&gt;    link_text：元素的Link text&lt;/span&gt;

&lt;span class="s1"&gt;find_element_by_tag_name(name)&lt;/span&gt;
&lt;span class="s1"&gt;    通过子元素的tag　name查找元素的列表&lt;/span&gt;
&lt;span class="s1"&gt;    name - html的tag的name（如h1,a,span)&lt;/span&gt;

&lt;span class="s1"&gt;find_elements_by_xpath(xpath)&lt;/span&gt;

&lt;span class="s1"&gt;    通过xpath查找元素&lt;/span&gt;
&lt;span class="s1"&gt;    xpath:xpath位置字符&lt;/span&gt;
&lt;span class="s1"&gt;    基本路径相对于这个元素的位置&lt;/span&gt;
&lt;span class="s1"&gt;    这将选择此元素下的所有链接。&lt;/span&gt;
&lt;span class="s1"&gt;        myelement.find_elements_by_xpath(".//a")&lt;/span&gt;

&lt;span class="s1"&gt;    然而，将会选择该页面本身的所有links&lt;/span&gt;
&lt;span class="s1"&gt;        myelement.find_elements_by_xpath("//a")&lt;/span&gt;

&lt;span class="s1"&gt;    get_attribute(name)&lt;/span&gt;

&lt;span class="s1"&gt;        获取给定元素的属性或特性&lt;/span&gt;
&lt;span class="s1"&gt;        这个方法会首先尝试返回给定名字的属性的值。如果具有该名称的属性不存在，它返回具有相同名称的属性值。如果什么都没有，返回None&lt;/span&gt;
&lt;span class="s1"&gt;        name:检索的属性的名字&lt;/span&gt;
&lt;span class="s1"&gt;        例如：&lt;/span&gt;
&lt;span class="s1"&gt;            #check if the "active" CSS class is applied to an element.&lt;/span&gt;
&lt;span class="s1"&gt;            is_active = "active" in target_element.get_attribute("class")&lt;/span&gt;

&lt;span class="s1"&gt;    is_displayed()&lt;/span&gt;
&lt;span class="s1"&gt;         判断该元素是否对用户可见。      &lt;/span&gt;

&lt;span class="s1"&gt;    is_enabled()&lt;/span&gt;
&lt;span class="s1"&gt;         返回元素是否已启用&lt;/span&gt;

&lt;span class="s1"&gt;    is_selected()&lt;/span&gt;
&lt;span class="s1"&gt;        返回元素是否已选择&lt;/span&gt;
&lt;span class="s1"&gt;        可以用来检查复选框或单选框是否已选择&lt;/span&gt;

&lt;span class="s1"&gt;    Screenshot(filename)&lt;/span&gt;

&lt;span class="s1"&gt;        获取当前元素的截屏。如果出现任何IOError,返回False,否则返回True。filename使用绝对路径。&lt;/span&gt;
&lt;span class="s1"&gt;        filename: 保存截屏文件的绝对路径&lt;/span&gt;
&lt;span class="s1"&gt;        用法：element.Screenshot('&lt;/span&gt;&lt;span class="sr"&gt;/Screenshots/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;png&lt;/span&gt;&lt;span class="s1"&gt;')&lt;/span&gt;

&lt;span class="s1"&gt;    send_keys(*value)&lt;/span&gt;
&lt;span class="s1"&gt;        模拟键入元素&lt;/span&gt;
&lt;span class="s1"&gt;        value: 键入字符串，或设置表单。设置文件输出，可以为文件的绝对路径&lt;/span&gt;

&lt;span class="s1"&gt;        可以用来发送简单的按键事件或填充表单：&lt;/span&gt;
&lt;span class="s1"&gt;           form_textfield = driver.find_element_by_name('&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="s1"&gt;')&lt;/span&gt;
&lt;span class="s1"&gt;           form_textfield.send_keys("admin")&lt;/span&gt;

&lt;span class="s1"&gt;        同样可以用于设置文件输入。&lt;/span&gt;

&lt;span class="s1"&gt;            file_input = driver.find_element_by_name('&lt;/span&gt;&lt;span class="n"&gt;profilePic&lt;/span&gt;&lt;span class="s1"&gt;')&lt;/span&gt;
&lt;span class="s1"&gt;            file_input.send_keys("path/to/profilepic.gif")&lt;/span&gt;
&lt;span class="s1"&gt;            #Generally it'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;cross&lt;/span&gt; &lt;span class="n"&gt;OS&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;file_input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send_keys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abspath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"path/to/profilepic.gif"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;提交表单&lt;/span&gt;

    &lt;span class="n"&gt;value_of_css_property&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;property_name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;CSS&lt;/span&gt;&lt;span class="err"&gt;属性的值&lt;/span&gt;

    &lt;span class="n"&gt;id&lt;/span&gt;
        &lt;span class="n"&gt;selenium&lt;/span&gt; &lt;span class="err"&gt;使用的内部编号&lt;/span&gt;
        &lt;span class="err"&gt;主要内部用户使用。可以用于简单检查&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;个元素是否为同一元素，可以使用&amp;ldquo;&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="err"&gt;&amp;rdquo;：&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;element1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;element2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"These 2 are equal"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt;
        &lt;span class="err"&gt;在渲染画布中元素的位置&lt;/span&gt;

    &lt;span class="n"&gt;location_once_scrolled_into_view&lt;/span&gt;
        &lt;span class="err"&gt;元素可能在没有提示的情况下修改。用它可以找到我们可以点击的元素。此方法可以将元素滚动到视图。&lt;/span&gt;
        &lt;span class="err"&gt;返回屏幕上的顶部左侧角落的位置，或者&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="err"&gt;如果该元素是不可见的。&lt;/span&gt;

    &lt;span class="n"&gt;parent&lt;/span&gt;
      &lt;span class="n"&gt;Internal&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebDriver&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

    &lt;span class="n"&gt;rect&lt;/span&gt;
       &lt;span class="err"&gt;元素的位置和大小的字典&lt;/span&gt;

    &lt;span class="n"&gt;screenshot_as_base64&lt;/span&gt;
        &lt;span class="err"&gt;获取当前元素截屏的&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="err"&gt;位编码&lt;/span&gt;
        &lt;span class="err"&gt;用法：&lt;/span&gt;&lt;span class="n"&gt;img_b64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;screenshot_as_base64&lt;/span&gt;

    &lt;span class="n"&gt;screensh_as_png&lt;/span&gt;
        &lt;span class="err"&gt;获取当前元素截屏的二进制&lt;/span&gt;
        &lt;span class="err"&gt;用法：&lt;/span&gt;&lt;span class="n"&gt;element_png&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;screensh_as_png&lt;/span&gt;

    &lt;span class="n"&gt;size&lt;/span&gt; 
        &lt;span class="err"&gt;元素的大小&lt;/span&gt;

    &lt;span class="n"&gt;tag_name&lt;/span&gt; 
        &lt;span class="err"&gt;元素的&lt;/span&gt;&lt;span class="n"&gt;tagname&lt;/span&gt;&lt;span class="err"&gt;属性&lt;/span&gt;

    &lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="err"&gt;元素的文本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ui-support"&gt;UI Support&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.support.select.Select(webelement)
    deselect_all()
        清除所有选中的条目。只对选中多个支持的选择有效。如果SELECT如果不支持复合选择，则抛出NotImplementedError.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deselect_by_index(index)
    取消给定索引出的选项。通过元素的&amp;ldquo;index&amp;rdquo;属性进行，不仅仅通过计数。
    index: 被取消选项的索引
    如果指定的index没有SELECT,将抛出&amp;ldquo;NoSuchElementException"异常。

deselect_by_value(value)
   取消匹配参数值的选项。例如给点参数&amp;rdquo;foo"，将取消这样的选项：
       &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;

   value: 要匹配的值
   如果没有选项匹配给定的参数值，将抛出&amp;ldquo;NoSuchElementException"异常。

deselect_by_visible_text(text)
       取消同参数值匹配的可见文本的选择项。例如给出&amp;rdquo;Bar"，这样的选项就会取消：
           &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;

           text:要匹配的可见文本

select_by_index(index)
    选择指定索引的选项。通过元素的index属性进行，不是通过counting.
    index:被选中选项的索引
    如果给定的索引指定的选项不存在，将抛出&amp;rdquo;NoSuchElementException"异常

select_by_value(value)
    选择匹配参数值的所有选项。例如，给定&amp;ldquo;foo"，这样的选项将会选中：
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        vale:需要匹配的值
    如果没有选项匹配给定的参数值，将抛出&amp;rdquo;NoSuchElementException"异常。

select_by_visible_text(text)
    选择所有匹配可视文本的选项。例如给定参数&amp;ldquo;Bar"，这样的选项将会选中：
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        text:要匹配的可见文本
    如果没有选项匹配给定的参数值，将会抛出StaleElementReferenceException异常。

all_selected_options
   返回属于这个选项标签的所有选择选项的列表

first_selected_option
   返回选项标签的第一个选项（或则当前已选中的选项）

options 
返回属于这个选择标签的所有选项的列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.wait.WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)
    Bases:object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;until(method, message=")
    Calls the method provided with the driver as an argument until the return value is not False.

until_not(method, message='')

    Calls the method provided with the driver as an argument until the return value is False.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="color-support"&gt;Color Support&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.support.color.Color(red, green, blue, alpha=1)
    Bases:object
    颜色转换支持类。
    例如：
    from selenium.webdriver.support.color import Color&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    print(Color.from_string('#00ff33').rgba)
    print(Color.from_string('rgb(1, 255, 3)').hex)
    print(Color.from_string('blue').rgba)

    static from_string(str_)

    hex
    rgb
    rgba
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="expected-conditions-support"&gt;Expected conditions Support&lt;/h3&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.alert_is_present
    Bases:object
    弹出预期alert&lt;/p&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_located_selection_state_to_be(locator, is_selected)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;is_selected&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_located_to_be_selected(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_selection_state_to_be(element, is_selected)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;is_selected&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;rdquo;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_to_be_clickable(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;Expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;click&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.element_to_be_selected(element)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.frame_to_be_available_and_switch_to_it(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;whether&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;switches&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.invisibility_of_element_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;Expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="n"&gt;invisible&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.presence_of_all_elements_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;WebElements&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.presence_of_element_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;necessarily&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.staleness_of(element)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;Wait&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;attached&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;still&lt;/span&gt; &lt;span class="n"&gt;attached&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.text_to_be_present_in_element(locator, text_)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.text_to_be_present_in_element_value(locator, text_)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="err"&gt;&amp;rsquo;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.title_contains(title)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sensitive&lt;/span&gt; &lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.title_is(title)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exact&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.visibility_of(element)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;known&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Visibility&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;displayed&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.visibility_of_any_elements_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;WebElements&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class selenium.webdriver.support.expected_conditions.visibility_of_element_located(locator)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;expectation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DOM&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Visibility&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;displayed&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;located&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;visible&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/20/selenium/"&gt;Selenium主题8&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/22/selenium/"&gt;Selenium主题10&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Wed, 21 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-21:2015/01/21/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题8</title><link>http://king32783784.github.io/2015/01/20/selenium/</link><description>&lt;body&gt;&lt;h3 id="alert"&gt;Alert&lt;/h3&gt;
&lt;p&gt;警告相关的实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;common&lt;/span&gt;.&lt;span class="n"&gt;alert&lt;/span&gt;.&lt;span class="n"&gt;Alert&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;)
    &lt;span class="n"&gt;Bases:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;
    &lt;span class="n"&gt;允许使用alerts&lt;/span&gt;.
    &lt;span class="n"&gt;使用这个类作为与alert互动的接口&lt;/span&gt;。&lt;span class="n"&gt;它包括dismissing&lt;/span&gt;(&lt;span class="n"&gt;忽略&lt;/span&gt;），&lt;span class="n"&gt;accepting&lt;/span&gt;(&lt;span class="n"&gt;接受&lt;/span&gt;），&lt;span class="n"&gt;inputting&lt;/span&gt;（&lt;span class="n"&gt;输入&lt;/span&gt;）&lt;span class="n"&gt;和获取警告提示的文本信息的方法&lt;/span&gt;。
    &lt;span class="n"&gt;接受&lt;/span&gt;／&lt;span class="n"&gt;忽略警报信息&lt;/span&gt;：
        &lt;span class="n"&gt;Alert&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;).&lt;span class="n"&gt;accpet&lt;/span&gt;()
        &lt;span class="n"&gt;Alert&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;).&lt;span class="n"&gt;dismiss&lt;/span&gt;()

    &lt;span class="n"&gt;往警报信息中输入&lt;/span&gt;：
        &lt;span class="n"&gt;name_prompt&lt;/span&gt; = &lt;span class="n"&gt;Alert&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;)&lt;span class="n"&gt;name_prompt&lt;/span&gt;.&lt;span class="n"&gt;send_keys&lt;/span&gt;(&lt;span class="s"&gt;"Willian Shakesphere"&lt;/span&gt;)
        &lt;span class="n"&gt;name_prompt&lt;/span&gt;.&lt;span class="n"&gt;accept&lt;/span&gt;()

    &lt;span class="n"&gt;读取警报信息作为验证&lt;/span&gt;：
        &lt;span class="n"&gt;alert_text&lt;/span&gt; = &lt;span class="n"&gt;Alert&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;).&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;assertEqual&lt;/span&gt;(&lt;span class="s"&gt;"Do you wish to quit?"&lt;/span&gt;, &lt;span class="n"&gt;alert_text&lt;/span&gt;)

    &lt;span class="n"&gt;accept&lt;/span&gt;()
        &lt;span class="n"&gt;接受可用的警报信息&lt;/span&gt;
        &lt;span class="n"&gt;Usage::&lt;/span&gt; &lt;span class="n"&gt;Alert&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;).&lt;span class="n"&gt;accept&lt;/span&gt;() &lt;span class="c c-Singleline"&gt;# 确认一个警告提示框&lt;/span&gt;

    &lt;span class="n"&gt;authenticate&lt;/span&gt;(&lt;span class="n"&gt;username&lt;/span&gt;, &lt;span class="n"&gt;password&lt;/span&gt;)
        &lt;span class="n"&gt;发送用户名&lt;/span&gt;／&lt;span class="n"&gt;密码到身份验证框&lt;/span&gt;（&lt;span class="n"&gt;例如Basic&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt; &lt;span class="n"&gt;Auth&lt;/span&gt;),&lt;span class="n"&gt;隐性发送&lt;/span&gt;&amp;ldquo;&lt;span class="n"&gt;clicks&lt;/span&gt; &lt;span class="nb"&gt;ok&lt;/span&gt;"
        &lt;span class="n"&gt;用法::&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;.&lt;span class="n"&gt;switch_to&lt;/span&gt;.&lt;span class="n"&gt;alert&lt;/span&gt;.&lt;span class="n"&gt;authenticate&lt;/span&gt;(&lt;span class="s"&gt;'cheese'&lt;/span&gt;, &lt;span class="s"&gt;'secretGouda'&lt;/span&gt;)
        &lt;span class="n"&gt;参数&lt;/span&gt;：　－&lt;span class="n"&gt;username:&lt;/span&gt; &lt;span class="n"&gt;用户名对话框的字符串&lt;/span&gt;　-&lt;span class="n"&gt;password:&lt;/span&gt;　&lt;span class="n"&gt;密码对话框的字符串&lt;/span&gt;

    &lt;span class="n"&gt;dismiss&lt;/span&gt;()
        &lt;span class="n"&gt;忽略警报&lt;/span&gt;

    &lt;span class="n"&gt;send_keys&lt;/span&gt;(&lt;span class="n"&gt;keysToSend&lt;/span&gt;)
        &lt;span class="n"&gt;向Alert发送键&lt;/span&gt;
        &lt;span class="n"&gt;Aargs:&lt;/span&gt; *&lt;span class="n"&gt;keysToSend:&lt;/span&gt; &lt;span class="n"&gt;发送给Alert的文本&lt;/span&gt;

    &lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;获取警报的文本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="te-shu-jian"&gt;特殊键&lt;/h3&gt;
&lt;p&gt;该键实现如下
　
    class selenium.webdriver.common.keys.Keys&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Bases: object
    一套特殊的键码：
    ADD=u'\ue025'
    ALT=u'\ue00a'
    ARROW_DOWN=u'\ue015'
    ARROW_RIGHT=u'\ue014'
    ARROW_UP=u'\ue013'
    BACKSPACE=u'\ue003'
    BACK_SPACE=u'\ue003'
    CHANCE=u'\ue001'
    CLEAR=u'\ue005'
    COMMAND=u'\ue03d'
    CONTROL=u'\ue009'
    DECIMAL=u'\ue028'
    DELETE=u'\ue017'
    DIVIDE=u'\ue029'
    DOWN=u'\ue015'
    END=u'\ue010'
    ENTER=u'\ue007'
    EQUALS=u'\ue019'
    ESCAPE=u'\ue00c'
    F1=u'\ue031'
    F10=u'\ue03a'
    F11=u'\ue03b'
    F12=u'\ue032'
    F2 = u'\ue032'
    F3 = u'\ue033'
    F4 = u'\ue034'
    F5 = u'\ue035'
    F6 = u'\ue036'
    F7 = u'\ue037'
    F8 = u'\ue038'
    F9 = u'\ue039'
    HELP = u'\ue002'
    HOME = u'\ue011'
    INSERT = u'\ue016'
    LEFT = u'\ue012'
    LEFT_ALT = u'\ue00a'
    LEFT_CONTROL = u'\ue009'
    LEFT_SHIFT = u'\ue008'
    META = u'\ue03d'
    MULTIPLY = u'\ue024'
    NULL = u'\ue000'
    NUMPAD0 = u'\ue01a'
    NUMPAD1 = u'\ue01b'
    NUMPAD2 = u'\ue01c'
    NUMPAD3 = u'\ue01d'
    NUMPAD4 = u'\ue01e'
    NUMPAD5 = u'\ue01f'
    NUMPAD6 = u'\ue020'
    NUMPAD7 = u'\ue021'
    NUMPAD8 = u'\ue022'
    NUMPAD9 = u'\ue023'
    PAGE_DOWN = u'\ue00f'
    PAGE_UP = u'\ue00e'
    PAUSE = u'\ue00b'
    RETURN = u'\ue006'
    RIGHT = u'\ue014'
    SEMICOLON = u'\ue018'
    SEPARATOR = u'\ue026'
    SHIFT = u'\ue008'
    SPACE = u'\ue00d'
    SUBTRACT = u'\ue027'
    TAB = u'\ue004'
    UP = u'\ue013
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ding-wei-yuan-su"&gt;定位元素&lt;/h3&gt;
&lt;p&gt;有很多特征可以用于元素定位，实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;common&lt;/span&gt;.&lt;span class="nb"&gt;by&lt;/span&gt;.&lt;span class="n"&gt;By&lt;/span&gt;
    &lt;span class="n"&gt;Bases:object&lt;/span&gt;

    &lt;span class="n"&gt;CLASS_NAME&lt;/span&gt;=&lt;span class="s"&gt;'class name'&lt;/span&gt;

    &lt;span class="n"&gt;CSS_SELECTOR&lt;/span&gt;=&lt;span class="s"&gt;'css selector'&lt;/span&gt;

    &lt;span class="n"&gt;ID&lt;/span&gt;=&lt;span class="s"&gt;'id'&lt;/span&gt;

    &lt;span class="n"&gt;LINK_TEXT&lt;/span&gt;=&lt;span class="s"&gt;'link text'&lt;/span&gt;

    &lt;span class="n"&gt;NAME&lt;/span&gt;=&lt;span class="s"&gt;'name'&lt;/span&gt;

    &lt;span class="n"&gt;PARTIAL_LINK_TEXT&lt;/span&gt;=&lt;span class="s"&gt;'partial link text'&lt;/span&gt;

    &lt;span class="n"&gt;TAG_NAME&lt;/span&gt;=&lt;span class="s"&gt;'tag name'&lt;/span&gt;

    &lt;span class="n"&gt;XPATH&lt;/span&gt;=&lt;span class="s"&gt;'xpath'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="desired-capabilities"&gt;Desired Capabilities&lt;/h3&gt;
&lt;p&gt;Desired Capabilities实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desired_capabilities&lt;/span&gt;
    &lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;

    &lt;span class="err"&gt;设置默认支持的所需功能&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="err"&gt;以此为起点创建&lt;/span&gt;&lt;span class="n"&gt;desired&lt;/span&gt; &lt;span class="n"&gt;capbilities&lt;/span&gt;&lt;span class="err"&gt;对象用于连接&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="err"&gt;服务器或&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="n"&gt;webdrivers&lt;/span&gt;&lt;span class="err"&gt;请求&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="err"&gt;例如：&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
        &lt;span class="n"&gt;selenium_grid_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://198.0.0.1:4444/wd/hub"&lt;/span&gt;
        &lt;span class="c1"&gt;# Creat a desired capabilities object as a starting point. capabilities = &lt;/span&gt;
        &lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FIREFOX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"WINDOWS"&lt;/span&gt;
        &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"10"&lt;/span&gt;

        &lt;span class="c1"&gt;# Instantiate an instance of Remove WebDriver with the desired capabilities. driver = &lt;/span&gt;
        &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;selenium_grid_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="err"&gt;注：&lt;/span&gt;&lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="err"&gt;对象始终使用&amp;ldquo;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s2"&gt;"，避免出现改变全局类实例的副作用。&lt;/span&gt;

        &lt;span class="n"&gt;ANDROID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'ANDROID'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'andorid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;",'javascriptEnabled':True}&lt;/span&gt;

        &lt;span class="n"&gt;CHROME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'ANY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'chrome'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;", 'javascriptEnabled': True}&lt;/span&gt;

        &lt;span class="n"&gt;EDGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'WINDOWS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'broserNAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'MicrosoftEdge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"}&lt;/span&gt;

        &lt;span class="n"&gt;FIREFOX&lt;/span&gt; 
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'ANY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'firefox'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;",'marionette':False,'javascriptEnabled':True}&lt;/span&gt;

        &lt;span class="n"&gt;HTMLUNIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'ANY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'htmlunit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"}&lt;/span&gt;

        &lt;span class="n"&gt;HTMLUNITWITHJS&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'ANY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'htmlunit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'firefox'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'javascriptEnabled'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;INTERNETEXPLORER&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'WINDOWS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'internet explorer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;", 'javascriptEnabled':True}&lt;/span&gt;

        &lt;span class="n"&gt;IPAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'MAC'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;", 'javascriptEnabled':True}&lt;/span&gt;

        &lt;span class="n"&gt;IPHONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'MAC'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;", 'javascriptEnabled':True}&lt;/span&gt;

        &lt;span class="n"&gt;OPERA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'ANY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'opera'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;". 'javascriptEnabled':True}&lt;/span&gt;

        &lt;span class="n"&gt;PHANTOMJS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'ANY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'phantomjs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;", 'javascriptEnabled':True}&lt;/span&gt;

        &lt;span class="n"&gt;SAFART&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platform'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'MAC'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'browserName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'safari'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'version'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;",'javascriptEnabled':True}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gong-gong-bu-fen"&gt;公共部分&lt;/h3&gt;
&lt;p&gt;Utils 方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;selenium.webdriver.common.utils.find_connectable_ip(host, port=None)

    将hostname解析为ip,建议ipv4.
    之所以建议ipv4,不是因为只支持ipv4,是因为一些dirvers（如firfoxdriver)不支持ipv6连接。
    如果提供了可选的端口号，仅监听给定端口号的ip.
    参数：
        * host - hostname
        * port - 可选的端口号

    返回值：
        一个单一的ip地址，字符串类型。如果找到任意ipv4地址，就会返回。或则，找到任意的ipv6地址，也会返回。如果都没有找到，返回None.


selenium.webdriver.common.utils.free_port()

    确定一个使用套接字的空闲端口

selenium.webdriver.common.utils.is_connectable(port, host='localhost')

    尝试通过端口连接server,查看server是否在运行。
    参数：* port:　连接的端口

selenium.webdriver.common.utils.is_url_connectable(port)

    尝试通过端口连接到／status HTTP server，查看HTTPserver是否响应。
    参数：　*port: 连接的端口

selenium.webdriver.common.utils.join_host_port(host, port)

    将hostname和port拼接到一起
    这是一个小的实现用于应对ipv6,如：
    _join_host_port('::1',80) == '[::1]:80'.

    参数：
       *host - hostname
       *port - 整数端口

    selenium.webdriver.common.utils.keys_to_typing(value)

        处理元素键入的值
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="firefox-webdriver"&gt;Firefox WebDriver&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;firefox&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;WebDriver&lt;/span&gt;(&lt;span class="n"&gt;firefox_profile&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;, &lt;span class="n"&gt;firefox_binary&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;,
&lt;span class="n"&gt;timeout&lt;/span&gt;=&lt;span class="mi"&gt;30&lt;/span&gt;, &lt;span class="n"&gt;capabilities&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;, &lt;span class="n"&gt;proxy&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;, &lt;span class="n"&gt;executable_path&lt;/span&gt;=&lt;span class="s"&gt;'wires'&lt;/span&gt;, &lt;span class="n"&gt;firefox_options&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)

    &lt;span class="n"&gt;Base:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;remote&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;WebDriver&lt;/span&gt;
    &lt;span class="n"&gt;quit&lt;/span&gt;()
       &lt;span class="n"&gt;退出driver并每一个相关窗口&lt;/span&gt;

    &lt;span class="n"&gt;set_context&lt;/span&gt;(&lt;span class="nb"&gt;context&lt;/span&gt;)

    &lt;span class="n"&gt;NATIVE_EVENTS_ALLOWED&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;firefox_profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="chrome-webdriver"&gt;Chrome WebDriver&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;chrome&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;WebDriver&lt;/span&gt;(&lt;span class="n"&gt;executable_path&lt;/span&gt;=&lt;span class="s"&gt;'chromedriver'&lt;/span&gt;, &lt;span class="n"&gt;prot&lt;/span&gt;=&lt;span class="mi"&gt;0&lt;/span&gt;,
&lt;span class="n"&gt;chrome_options&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;, &lt;span class="n"&gt;service_args&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;, &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;, &lt;span class="n"&gt;service_log_path&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)

    &lt;span class="n"&gt;Bases:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;remote&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;WebDriver&lt;/span&gt;

    &lt;span class="n"&gt;控制ChromeDriver&lt;/span&gt;,&lt;span class="n"&gt;并允许drive&lt;/span&gt;　&lt;span class="n"&gt;browser&lt;/span&gt;.
    &lt;span class="n"&gt;Chromedriver下载地址&lt;/span&gt;[&lt;span class="n"&gt;http:&lt;/span&gt;//&lt;span class="n"&gt;chromedriver&lt;/span&gt;.&lt;span class="n"&gt;storage&lt;/span&gt;.&lt;span class="n"&gt;googleapis&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;index&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt;](&lt;span class="n"&gt;http:&lt;/span&gt;//&lt;span class="n"&gt;chromedriver&lt;/span&gt;.&lt;span class="n"&gt;storage&lt;/span&gt;.&lt;span class="n"&gt;googleapis&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;index&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt;)

    &lt;span class="n"&gt;create_options&lt;/span&gt;()

    &lt;span class="n"&gt;launch_app&lt;/span&gt;(&lt;span class="n"&gt;id&lt;/span&gt;)
       &lt;span class="n"&gt;启动由id指定的Chrome&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;.

    &lt;span class="n"&gt;quit&lt;/span&gt;()
       &lt;span class="n"&gt;关闭浏览器和关闭启动ChromeDriver时启动的ChromeDriver&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/19/selenium/"&gt;Selenium主题7&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/21/selenium/"&gt;Selenium主题9&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Tue, 20 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-20:2015/01/20/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题7</title><link>http://king32783784.github.io/2015/01/19/selenium/</link><description>&lt;body&gt;&lt;h3 id="webdriver-api"&gt;WebDriver API&lt;/h3&gt;
&lt;p&gt;注：这不是官方API文档，官方在这：&lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/api.html"&gt;Selenium Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇覆盖了Selenium Webdriver的所有接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐导入样式&lt;/strong&gt;
本节API展示了类的绝对位置。推荐的导入风格如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，可以访问的类如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webdriver.Firefox
webdriver.FirefoxProfile
webdriver.Chrome
webdriver.ChromeOptions
webdriver.Ie
webdriver.Opera
webdriver.PhantomJS
webdriver.Remote
webdriver.DesiredCapabilities
webdriver.ActionChains
webdriver.TouchActions
webdriver.Proxy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特殊键类（keys)可以这样导入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;异常类可以这样导入（以实际的类名替换TheNameOfTheExceptionClass):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TheNameOfTheExceptionClass&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;API使用约定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些属性（如方法）是可调用的，一些属性（如properties)是不可调用的，所有可调用的属性均以圆括号结尾。&lt;/p&gt;
&lt;p&gt;属性的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;current_url
当前加载页面的URL
Usage:
    driver.current_url&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法的例子：
* close()
选择关闭的窗口
Usage:
    driver.close()&lt;/p&gt;
&lt;h4 id="yi-chang"&gt;异常&lt;/h4&gt;
&lt;p&gt;所有的webdriver代码都可能会触发异常&lt;/p&gt;
&lt;p&gt;exception Selenium.common.exceptions.ElementNotSelectableException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;InvalidElementStateException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;试图选择一个不能选择的元素时抛出
例如，选择&amp;ldquo;script"元素&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ElementNotVisibleException(msg=None,screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; Bases:selenium.common.exceptions.InvalidElementStateException
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当一个元素存在于DOM中，但是不可访问的，如果试图与之互动，则会触发该异常。
大多数情况是试图点击或读取试图中隐藏的元素的文本&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ErrorInResponseException(response, msg)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务端发生错误时抛出
当和firefox插件或remote driver server通信时可能会触发&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ImeActivationFailedException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当激活输入法引擎失败时触发&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.ImeNotAvailableException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IME支持不可用时。当平台上任何依赖IME的方法，调用IME不可用时，均会触发。&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.InvalidCookieDomainException(msg=None, srceen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;试图在超出当前URL的不同域添加一个cookie时触发&lt;/p&gt;
&lt;p&gt;exceptin selenium.common.exceptions.InvalidElementStateException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exception selenium.common.exceptions.InvalidSelectorException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NoSuchElementException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当selector被用来查找返回一个不是WebElement时触发。
目前只用在当selector查找一个无效的 xpath或 xpath指向的不是一个WebElements.&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.InvalidSwitchToTargetException(msg=None, screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当切换到的frame或窗口目标不存在时触发&lt;/p&gt;
&lt;p&gt;exeption selenium.common.exceptions.MoveTargetOutOfBoundsException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当供给ActionsChains move() 方法的目标无效时触发，如超出文本&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoAlertPresentException(msg=None, screen=None,
stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当切换到没有弹出警告时触发。
当通过调用Alert()类的操作后，屏幕中未弹出警告窗口时触发。&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoSuchAttributeException(msg=None,screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当元素的属性找不到时抛出
可能会检查测试时浏览器中属性。在不同浏览器中，相同的属性可能会有不同的名称。&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptionsNoSuchElemention(msg=None, screen=None,stacktrace)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当元素找不到时抛出该异常。
如果遇到此异常，可能要检查以下内容：
    * 检查find_by...使用的selector
    * 元素在查找时没有在页面上
    页面可能仍在加载中，需要使用wait方法去等待&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoSuchFrameException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;InvalidSwitchToTargetException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当切换的Frame不存在时触发&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.NoSuchWindowException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;InvalidSwitchToTargetException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当切换的窗口不存在时触发
要想获取当前活动窗口的句柄，可以通过下面的方法获取活动窗口的句柄列表：
        print driver.windown_handles&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.RemoteDriverServerException(msg=None, screen=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exception selenium.common.exceptions.StaleElementReferenceException(msg=None. screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当引用一个过期的元素时触发该异常
过期的意思是不再在页面的ＤＯＭ中出现。
触发StaleElementReferenceException的原因包括，但不限于：
    * 很长时间没有操作页面，当定位元素时，页面已经更新。
    * 元素出现后，该元素可能被删除后重新添加到屏幕的。这可能发生在javascript框架更新和节点重建时。
    * 元素可能在iframe中，或文本内容已更新&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.TimeoutException(msg=Noe, scren=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当已命令没有在规定时间内完成时会触发该异常&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.UnableToSetCookieException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exeptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当driver设置cookie失败时抛出&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.UnexpectdAlertPresentException(msg=None, screen=None, stacktrace=None, alert_text=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当未知的警告窗口弹出时抛出
通常阻止执行许多预期命令的webdriver时抛出&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.UnexpectedTagNameException(msg=None, scren=None,stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;selenium&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WebDriverException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当支持的类没有得到预期的web元素时抛出&lt;/p&gt;
&lt;p&gt;exception selenium.common.exceptions.WebDriverException(msg=None, screen=None, stacktrace=None)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bases&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Exception&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Webdriver　基本异常&lt;/p&gt;
&lt;h3 id="dong-zuo-lian_1"&gt;动作链&lt;/h3&gt;
&lt;p&gt;该动作链实施，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;selenium&lt;/span&gt;.&lt;span class="n"&gt;webdriver&lt;/span&gt;.&lt;span class="n"&gt;common&lt;/span&gt;.&lt;span class="n"&gt;action_chains&lt;/span&gt;.&lt;span class="n"&gt;ActionChains&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;)
    &lt;span class="n"&gt;Base:object&lt;/span&gt;
    &lt;span class="n"&gt;ActionChains是底层自动化交互&lt;/span&gt;，&lt;span class="n"&gt;比如鼠标移动&lt;/span&gt;，&lt;span class="n"&gt;鼠标按键操作&lt;/span&gt;，&lt;span class="n"&gt;按键和上下文交互菜单&lt;/span&gt;。&lt;span class="n"&gt;可以用来做一些负责的动作比如悬停和拖放等&lt;/span&gt;。
    &lt;span class="n"&gt;生成用户操作&lt;/span&gt;
    &lt;span class="n"&gt;当你调用ActionChains&lt;/span&gt; &lt;span class="n"&gt;类的一些方法实现动作&lt;/span&gt;，&lt;span class="n"&gt;这些动作可以存储到ActionChains类中&lt;/span&gt;。&lt;span class="n"&gt;当你调用perform&lt;/span&gt;(),&lt;span class="n"&gt;这些事件会顺序发射执行&lt;/span&gt;。
    &lt;span class="n"&gt;action_chains可以在链模式中使用&lt;/span&gt;：

        &lt;span class="n"&gt;menu&lt;/span&gt; = &lt;span class="n"&gt;driver&lt;/span&gt;.&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;(&lt;span class="s"&gt;".nav"&lt;/span&gt;)
        &lt;span class="n"&gt;hidden_submenu&lt;/span&gt; = &lt;span class="n"&gt;driver&lt;/span&gt;.&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;(&lt;span class="s"&gt;".new #submen1"&lt;/span&gt;)
    　　　　
        &lt;span class="n"&gt;action_chains&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;).&lt;span class="n"&gt;move_to_element&lt;/span&gt;(&lt;span class="n"&gt;menu&lt;/span&gt;).&lt;span class="n"&gt;click&lt;/span&gt;(&lt;span class="n"&gt;hidden_submenu&lt;/span&gt;).&lt;span class="n"&gt;perform&lt;/span&gt;()
    　　　　
    &lt;span class="n"&gt;或动作一个接一个顺序执行&lt;/span&gt;：
    　　&lt;span class="n"&gt;menu&lt;/span&gt; = &lt;span class="n"&gt;driver&lt;/span&gt;.&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;(&lt;span class="s"&gt;".nav"&lt;/span&gt;)
    　　&lt;span class="n"&gt;hidden_submenu&lt;/span&gt; = &lt;span class="n"&gt;driver&lt;/span&gt;.&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;(&lt;span class="s"&gt;".nav #submenu1"&lt;/span&gt;)
    　　
    　　&lt;span class="n"&gt;actions&lt;/span&gt; = &lt;span class="n"&gt;ActionChains&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;)
    　　&lt;span class="n"&gt;actions&lt;/span&gt;.&lt;span class="n"&gt;move_to_elment&lt;/span&gt;(&lt;span class="n"&gt;menu&lt;/span&gt;)
    　　&lt;span class="n"&gt;actions&lt;/span&gt;.&lt;span class="n"&gt;click&lt;/span&gt;(&lt;span class="n"&gt;hidden_submenu&lt;/span&gt;)
    　　&lt;span class="n"&gt;actions&lt;/span&gt;.&lt;span class="n"&gt;perform&lt;/span&gt;()
    　　
    &lt;span class="n"&gt;无论哪种方式&lt;/span&gt;，&lt;span class="n"&gt;这些动作都会顺序调用执行&lt;/span&gt;。

    &lt;span class="n"&gt;click&lt;/span&gt;(&lt;span class="n"&gt;on_element&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)
        &lt;span class="n"&gt;点击一个元素&lt;/span&gt;

        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;on_element:&lt;/span&gt; &lt;span class="n"&gt;鼠标点击元素&lt;/span&gt;，&lt;span class="n"&gt;如果没有&lt;/span&gt;，&lt;span class="n"&gt;点击当前鼠标的位置&lt;/span&gt;。

    &lt;span class="n"&gt;click_and_hold&lt;/span&gt;(&lt;span class="n"&gt;on_elememt&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)
        &lt;span class="n"&gt;按住在元素上按住鼠标左键&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;on_element:&lt;/span&gt; &lt;span class="n"&gt;鼠标点击元素&lt;/span&gt;，&lt;span class="n"&gt;没有&lt;/span&gt;，&lt;span class="n"&gt;点击当前鼠标的位置&lt;/span&gt;

    &lt;span class="n"&gt;context_click&lt;/span&gt;(&lt;span class="n"&gt;on_element&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)

        &lt;span class="n"&gt;在元素上右击&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;on_element:&lt;/span&gt; &lt;span class="n"&gt;上下文点击该元素&lt;/span&gt;，&lt;span class="n"&gt;如果没有&lt;/span&gt;，&lt;span class="n"&gt;点击鼠标当前的位置&lt;/span&gt;

    &lt;span class="n"&gt;double_click&lt;/span&gt;(&lt;span class="n"&gt;on_element&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)

        &lt;span class="n"&gt;双击元素&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;on_element:&lt;/span&gt; &lt;span class="n"&gt;双击该元素&lt;/span&gt;，&lt;span class="n"&gt;如果&lt;/span&gt;，&lt;span class="n"&gt;双击鼠标当前的位置&lt;/span&gt;

    &lt;span class="n"&gt;drag_and_drop&lt;/span&gt;(&lt;span class="n"&gt;source&lt;/span&gt;, &lt;span class="n"&gt;target&lt;/span&gt;)
        &lt;span class="n"&gt;在source&lt;/span&gt;　&lt;span class="n"&gt;element&lt;/span&gt;　&lt;span class="n"&gt;左击并保持&lt;/span&gt;
        &lt;span class="n"&gt;然后移动到目标元素并且是否鼠标&lt;/span&gt;

        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;source:&lt;/span&gt; &lt;span class="n"&gt;鼠标按下的元素&lt;/span&gt;
            　* &lt;span class="n"&gt;target:&lt;/span&gt;　&lt;span class="n"&gt;鼠标移动到元素&lt;/span&gt;
            　
    &lt;span class="n"&gt;drag_and_drop_by_offset&lt;/span&gt;(&lt;span class="n"&gt;source&lt;/span&gt;, &lt;span class="n"&gt;xoffset&lt;/span&gt;, &lt;span class="n"&gt;yoffset&lt;/span&gt;)
        &lt;span class="n"&gt;左击点击source&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;,
        &lt;span class="n"&gt;然后&lt;/span&gt;，&lt;span class="n"&gt;移动到目标偏移地址&lt;/span&gt;，&lt;span class="n"&gt;并释放鼠标&lt;/span&gt;

        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;source:&lt;/span&gt; &lt;span class="n"&gt;鼠标点击的元素&lt;/span&gt;
              * &lt;span class="n"&gt;xoffset:&lt;/span&gt; &lt;span class="n"&gt;元素移动的X偏移量&lt;/span&gt;
              * &lt;span class="n"&gt;yoffset:&lt;/span&gt; &lt;span class="n"&gt;元素移动的Ｙ偏移量&lt;/span&gt;

    &lt;span class="n"&gt;key_down&lt;/span&gt;(&lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;element&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)
        &lt;span class="n"&gt;仅发送一个按键&lt;/span&gt;，&lt;span class="n"&gt;不释放&lt;/span&gt;(&lt;span class="n"&gt;多用于组合键&lt;/span&gt;）
        &lt;span class="n"&gt;需要和修饰键一起使用&lt;/span&gt;（&lt;span class="n"&gt;控制&lt;/span&gt;，&lt;span class="n"&gt;alt和shift&lt;/span&gt;)
        &lt;span class="n"&gt;Aargs:&lt;/span&gt;
            * &lt;span class="n"&gt;value:&lt;/span&gt; &lt;span class="n"&gt;被发送的修饰键&lt;/span&gt;，&lt;span class="n"&gt;在Keys类中定义&lt;/span&gt;
            * &lt;span class="n"&gt;element:&lt;/span&gt; &lt;span class="n"&gt;发送键作用的元素&lt;/span&gt;。&lt;span class="n"&gt;如果为空&lt;/span&gt;，&lt;span class="n"&gt;则向作用于当前焦点元素&lt;/span&gt;

        &lt;span class="n"&gt;例如&lt;/span&gt;，&lt;span class="n"&gt;按下ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c:&lt;/span&gt;
            &lt;span class="n"&gt;ActionChains&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;).&lt;span class="n"&gt;key_down&lt;/span&gt;(&lt;span class="n"&gt;Keys&lt;/span&gt;.&lt;span class="k"&gt;CONTROL&lt;/span&gt;).&lt;span class="n"&gt;send_keys&lt;/span&gt;(&lt;span class="s"&gt;'c'&lt;/span&gt;).&lt;span class="n"&gt;key_up&lt;/span&gt;(&lt;span class="n"&gt;Keys&lt;/span&gt;.&lt;span class="k"&gt;CONTROL&lt;/span&gt;).&lt;span class="n"&gt;perform&lt;/span&gt;()

    &lt;span class="n"&gt;key_up&lt;/span&gt;(&lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;element&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)
        &lt;span class="n"&gt;释放修饰键&lt;/span&gt;
        &lt;span class="n"&gt;Aargs:&lt;/span&gt; 
            * &lt;span class="n"&gt;value:&lt;/span&gt; &lt;span class="n"&gt;发送的修饰键盘&lt;/span&gt;，&lt;span class="n"&gt;在Keys类中定义&lt;/span&gt;。
            * &lt;span class="n"&gt;element:&lt;/span&gt; &lt;span class="n"&gt;作用于的元素&lt;/span&gt;，&lt;span class="n"&gt;如果为空&lt;/span&gt;，&lt;span class="n"&gt;默认作用于当前焦点元素&lt;/span&gt;
        &lt;span class="n"&gt;例如&lt;/span&gt;，&lt;span class="n"&gt;按下ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c:&lt;/span&gt;
            &lt;span class="n"&gt;ActionChains&lt;/span&gt;(&lt;span class="n"&gt;driver&lt;/span&gt;).&lt;span class="n"&gt;key_down&lt;/span&gt;(&lt;span class="n"&gt;Keys&lt;/span&gt;.&lt;span class="k"&gt;CONTROL&lt;/span&gt;).&lt;span class="n"&gt;send_keys&lt;/span&gt;(&lt;span class="s"&gt;'c'&lt;/span&gt;).&lt;span class="n"&gt;key_up&lt;/span&gt;(&lt;span class="n"&gt;Keys&lt;/span&gt;.&lt;span class="k"&gt;CONTROL&lt;/span&gt;).&lt;span class="n"&gt;perform&lt;/span&gt;()

    &lt;span class="n"&gt;move_by_offset&lt;/span&gt;(&lt;span class="n"&gt;xoffset&lt;/span&gt;, &lt;span class="n"&gt;yoffset&lt;/span&gt;)
        &lt;span class="n"&gt;从当前鼠标位置&lt;/span&gt;，&lt;span class="n"&gt;移动一定的偏移位置&lt;/span&gt;
        &lt;span class="n"&gt;Aargs:&lt;/span&gt;
            * &lt;span class="n"&gt;xoffset:&lt;/span&gt; &lt;span class="n"&gt;X偏移量&lt;/span&gt;，&lt;span class="n"&gt;可以为正或负的整数&lt;/span&gt;
            * &lt;span class="n"&gt;yoffset:&lt;/span&gt; &lt;span class="n"&gt;y偏移量&lt;/span&gt;，&lt;span class="n"&gt;可以为正或负的整数&lt;/span&gt;

    &lt;span class="n"&gt;move_to_element&lt;/span&gt;(&lt;span class="n"&gt;to_element&lt;/span&gt;)
        &lt;span class="n"&gt;移动鼠标到元素的中间&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;to_element:&lt;/span&gt; &lt;span class="n"&gt;移动的目标WebElement&lt;/span&gt;

    &lt;span class="n"&gt;move_to_element_with_offset&lt;/span&gt;(&lt;span class="n"&gt;to_element&lt;/span&gt;, &lt;span class="n"&gt;xoffset&lt;/span&gt;, &lt;span class="n"&gt;yoffset&lt;/span&gt;)
        &lt;span class="n"&gt;指定元素偏移一定量&lt;/span&gt;
            &lt;span class="n"&gt;偏移量相对于元素的左上角&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;to_elemnt:&lt;/span&gt; &lt;span class="n"&gt;被移动的WebElement&lt;/span&gt;
              * &lt;span class="n"&gt;xoffset:&lt;/span&gt; &lt;span class="n"&gt;x偏移量&lt;/span&gt;
              * &lt;span class="n"&gt;yoffset:&lt;/span&gt; &lt;span class="n"&gt;y偏移量&lt;/span&gt;

    &lt;span class="n"&gt;perform&lt;/span&gt;()
        &lt;span class="n"&gt;执行所有存储的操作&lt;/span&gt;

    &lt;span class="n"&gt;release&lt;/span&gt;(&lt;span class="n"&gt;on_element&lt;/span&gt;=&lt;span class="n"&gt;None&lt;/span&gt;)
        &lt;span class="n"&gt;释放作用于元素的按键&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;on_element:&lt;/span&gt; &lt;span class="n"&gt;指定作用的元素&lt;/span&gt;，&lt;span class="n"&gt;如果为空&lt;/span&gt;，&lt;span class="n"&gt;释放当前鼠标作用的位置&lt;/span&gt;

    &lt;span class="n"&gt;send_keys&lt;/span&gt;(*&lt;span class="n"&gt;keys_to_send&lt;/span&gt;)
        &lt;span class="n"&gt;发送按键到当前焦点元素&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;keys_to_send:&lt;/span&gt; &lt;span class="n"&gt;发送的按键&lt;/span&gt;。&lt;span class="n"&gt;修饰键常量可以在&lt;/span&gt;&amp;lsquo;&lt;span class="n"&gt;Keys'类中找到&lt;/span&gt;

    &lt;span class="n"&gt;send_keys_to_element&lt;/span&gt;(&lt;span class="n"&gt;element&lt;/span&gt;, *&lt;span class="n"&gt;keys_to_send&lt;/span&gt;)
        &lt;span class="n"&gt;发送按键到一个元素&lt;/span&gt;
        &lt;span class="n"&gt;Args:&lt;/span&gt; * &lt;span class="n"&gt;element:&lt;/span&gt; &lt;span class="n"&gt;发送按键作用的元素&lt;/span&gt;
              * &lt;span class="n"&gt;keys_to_send:&lt;/span&gt; &lt;span class="n"&gt;发送的按键类型&lt;/span&gt;，&lt;span class="n"&gt;修饰键常量可以在&lt;/span&gt;&amp;ldquo;&lt;span class="n"&gt;Keys'类中找到&lt;/span&gt;。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/18/selenium/"&gt;Selenium主题6&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/20/selenium/"&gt;Selenium主题8&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Mon, 19 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-19:2015/01/19/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题6</title><link>http://king32783784.github.io/2015/01/18/selenium/</link><description>&lt;body&gt;&lt;h3 id="ye-mian-dui-xiang"&gt;页面对象&lt;/h3&gt;
&lt;p&gt;该篇是介绍页面对象设计模式的方法。页面对象是Web应用程序用户界面的区域，测试时主要在此区域。&lt;/p&gt;
&lt;p&gt;使用页面对象模式的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建多测试用例共用的可重复代码&lt;/li&gt;
&lt;li&gt;减少重复的代码&lt;/li&gt;
&lt;li&gt;如果用户界面发生改变，只需修改一次对应部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ce-shi-yong-li"&gt;测试用例&lt;/h4&gt;
&lt;p&gt;以下是一个测试python.org搜索字符串的用例，并且确保可以查到一些结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;page&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PythonOrgSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''A sample teest class to show how page object works'''&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://www.python.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_in_python_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Tests python.org search feature. searchs for the word "pycon" then verified that some results show up.&lt;/span&gt;
&lt;span class="sd"&gt;        Note that it does not look for any particular test in search results page. This test verifies that the &lt;/span&gt;
&lt;span class="sd"&gt;        results were not empty.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;

        &lt;span class="c1"&gt;# Load the main page. In this case the home page of Python.org.&lt;/span&gt;
        &lt;span class="n"&gt;main_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#Checks if the word "python" is in title&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;main_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_title_matches&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;"python.org title desn't match."&lt;/span&gt;
        &lt;span class="c1"&gt;#Sets the text of search textbox to "pycon"&lt;/span&gt;
        &lt;span class="n"&gt;main_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_text_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pycon"&lt;/span&gt;
        &lt;span class="n"&gt;main_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click_go_button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;search_results_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchResultsPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#Verifies that the results page is not empty&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;search_results_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_results_found&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;"No results found."&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="page-dui-xiang-lei"&gt;Page　对象类&lt;/h4&gt;
&lt;p&gt;Page 对象模式是为每个页面创建一个对象。按照此方法，创建一个测试代码与技术实施之间的隔离层。
page.py可以为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;element&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BasePageElement&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MainPageLocators&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchTextElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePageElement&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;""" This class gets search text from the specified locator"""&lt;/span&gt;

    &lt;span class="c1"&gt;# The locator for search box where search string is entered&lt;/span&gt;
    &lt;span class="n"&gt;locator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'q'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;""" Base class to initialize the base page that will be called from all pages"""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Home page action methods come here. I.e. Python.org"""&lt;/span&gt;
    &lt;span class="c1"&gt;#Declares a variable that will contain the retrieved text&lt;/span&gt;
    &lt;span class="n"&gt;search_text_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchTextElement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_title_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Verifies that the hardcoded text "Python" appers in page title"""&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Python"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;click_go_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Triggers the search"""&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MainPageLocators&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GO_BUTTON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchResultsPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Search results page action methods come here"""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_results_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Probably should search for this text in the specific page&lt;/span&gt;
        &lt;span class="c1"&gt;# element, but as for now it works fine&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"No results found."&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="page-elements"&gt;Page elements&lt;/h4&gt;
&lt;p&gt;element.py 可以是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasePageElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Base page class that is initialized on every page object class."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Sets the text to the value supplied"""&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="locators"&gt;Locators&lt;/h4&gt;
&lt;p&gt;一种方式为将locators字符串和使用的地方分离。下面的例子，同一页面的locators属于同一个类。
locators.py：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPageLOcators&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""A class for main page locators. All main page locators should come here"""&lt;/span&gt;
    &lt;span class="n"&gt;GO_BUTTON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'submit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchResultPageLocators&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""A class for search results locators. All search results locators should come here"""&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/17/selenium/"&gt;Selenium主题5&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/19/selenium/"&gt;Selenium主题7&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Sun, 18 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-18:2015/01/18/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题5</title><link>http://king32783784.github.io/2015/01/17/selenium/</link><description>&lt;body&gt;&lt;h3 id="deng-dai"&gt;等待&lt;/h3&gt;
&lt;p&gt;目前大多数网络应用都在使用AJAX技术。当浏览器加载一个页面，页面上的元素可能分多次进行加载。这会导致元素定位困难，如果元素没有在DOM中出现，则会触发ElementNotVisibleException异常。通过等待，我们可以解决这个问题。等待提供了设置操作间的时间间隔－元素定位直接或其他元素操作。&lt;/p&gt;
&lt;p&gt;Selenium Webdriver 提供了等待的两种类型，implicit和explicit。显式等待是使webdriver在操作之间有确定的时间等待。隐式等待是使WebDriver 去间隔的轮询DOM，尝试定位到元素。&lt;/p&gt;
&lt;h4 id="xian-shi-deng-dai"&gt;显式等待&lt;/h4&gt;
&lt;p&gt;显式等待是代码中定义一定的条件，等待条件达成，继续执行。最差的方式是time.sleep(),通过设置等待时间间隔实现。有一些便利方法，会帮助设置等待时间。WebDriverWait与ExpectedCondition组合就是其中一种实现方式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;expected_conditions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt;


&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://somedomain/url_that_delays_loading"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presence_of_element_located&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"myDynamicElement"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例代码，默认等待１０s或则在１０s内找到元素，否则触发TimeoutException异常。默认情况下，WebDriverWait等待500ms就会触发异常，直到成功返回元素.ExpectedCondition成功的返回值是布尔值true或非空代表其他值的异常类型。&lt;/p&gt;
&lt;h5 id="yu-qi-tiao-jian"&gt;预期条件&lt;/h5&gt;
&lt;p&gt;以下列举了浏览器自动化测试常用的条件。Python＆selenium提供了一些便利方法，所以不必自己编写一个expected_condition类或为他们创建自己的工具包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title_is&lt;/li&gt;
&lt;li&gt;title_contains&lt;/li&gt;
&lt;li&gt;presence_of_element_located&lt;/li&gt;
&lt;li&gt;visibility_of_element_located&lt;/li&gt;
&lt;li&gt;visibility_of&lt;/li&gt;
&lt;li&gt;presence_of_all_elements_located&lt;/li&gt;
&lt;li&gt;text_to_be_present_in_element&lt;/li&gt;
&lt;li&gt;text_to_be_present_in_element_value&lt;/li&gt;
&lt;li&gt;frame_to_be_available_and_switch_to_it&lt;/li&gt;
&lt;li&gt;invisibility_of_element_located&lt;/li&gt;
&lt;li&gt;element_to_be_clickable-it is Displayed and Enabled&lt;/li&gt;
&lt;li&gt;staleness_of&lt;/li&gt;
&lt;li&gt;element_to_be_selected&lt;/li&gt;
&lt;li&gt;element_located_to_be_selected&lt;/li&gt;
&lt;li&gt;element_selection_state_to_be&lt;/li&gt;
&lt;li&gt;element_located_selection_state_to_be&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alert_is_present&lt;/p&gt;
&lt;p&gt;from selenium.webdriver.support import expected_conditions as EC&lt;/p&gt;
&lt;p&gt;wait = WebDriverWait(driver, 10)
element = wait.until(EC.element_to_be_clickable(By.ID, 'someid')))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该预期条件模块包含了通过WebDriverWait实现的预期条件。&lt;/p&gt;
&lt;h4 id="yin-shi-deng-dai-shi-shi-webdriver_1"&gt;隐式等待是使WebDriver&lt;/h4&gt;
&lt;p&gt;隐式等待让WebDriver试图找单个元素或多个元素失败后，在一定时间间隔下轮询DOM.默认设置为０。一旦设置，隐式等待会伴随WebDriver对象的整个生命周期。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implicitly_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# seconds&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://somedomain/url_that_delays_loading"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;myDynamicElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"myDynamicElement"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/16/selenium/"&gt;Selenium主题4&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/18/selenium/"&gt;Selenium主题6&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Sat, 17 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-17:2015/01/17/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题4</title><link>http://king32783784.github.io/2015/01/16/selenium/</link><description>&lt;body&gt;&lt;h3 id="yuan-su-ding-wei"&gt;元素定位&lt;/h3&gt;
&lt;p&gt;提供很多种方式去定位页面的元素。可以从中选择一个适合的用于测试。Selenium 提供了以下方法用于定位页面元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*find_element_by_id
*find_element_by_name
*find_element_by_xpath
*find_element_by_link_text
*find_element_by_partial_link_text
*find_element_by_tag_name
*find_element_by_class_name
*find_element_By_css_selector
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要找到多个元素（这些方法将返回一个列表）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*find_elements_by_name
*find_elements_by_xpath
*find_elements_by_link_text
*find_elements_by_partial_link_text
*find_elements_by_tag_name
*find_elements_by_class_name
*find_elements_by_css_selector
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了上面列出的公共方法外，还有两个用于页面对象定位器的私有方法。这两个私有方法是：find_element 和　find_elements.
用法例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'//button[test()="Some text"]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XPATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'//button'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些都是类可用的属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ID = "id"
XPATH = "xpath"
LINK_TEXT = "link text"
PARTIAL_LINK_TEXT = "partial link text"
NAME = "name"
TAG_NAME = "tag name"
CLASS_NAME = "class name"
CSS_SELECTOR = "css selector"
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="shi-yong-idding-wei"&gt;使用ID定位&lt;/h4&gt;
&lt;p&gt;当你知道元素的id属性时，可以用ＩＤ定位。这种方式，将返回第一个和ＩＤ属性匹配的元素。如果没有匹配的元素，将会触发NoSuchElementException异常.
例如，参考这个页面的源代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loginForm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"continue"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过下面方式定位form元素：
　
    login_form = driver.find_element_by_id('loginForm')&lt;/p&gt;
&lt;h4 id="shi-yong-ming-cheng-ding-wei"&gt;使用名称定位&lt;/h4&gt;
&lt;p&gt;当知道元素的名称属性时，可以通过名称的方式定位。这种方式，将返回第一个和name属性匹配的元素。如果没有匹配的元素，将触发NoSuchElementException异常。
例如，参考页源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt; &lt;span class="s"&gt;"loginForm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"continue"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"continue"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Clear"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;username和password元素可以通过下面的方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username = driver.find_element_by_name('username')
password = driver.find_element_by_name('password')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样在&amp;ldquo;Clear"按钮之前，&amp;ldquo;login&amp;rdquo;按钮将先被获取：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;continue = driver.find_element_by_name('continue')
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="shi-yong-xpathding-wei"&gt;使用Xpath定位&lt;/h4&gt;
&lt;p&gt;Xpath是ＸＭＬ文档中定于节点的语言。ＨTML可以看做是XML的一种实现，Selenium可以通过这一强大的语言去定位web应用的元素。XPath定位方法超过了id和name定位方法，它可以实现一些更多的定位可能，比如定位页面中第三个复选框。&lt;/p&gt;
&lt;p&gt;使用Xpath定位一个很大原因是需要定位一个没有合适的is/name的元素。XPath可以定位相对路径的元素，还可以定位有id/name的元素。Xpath还可以用于指定通过id/name定位的元素。&lt;/p&gt;
&lt;p&gt;XPaths可以获取所有root(html)中的元素的位置，虽然结果可能会失败，但对ＡＰＰ基本不会造成影响。可以借助通过id/name定位目标元素临近的元素的相对关系去定位目标元素。这种方式一般不太会改变，所有能增加测试的鲁棒性。&lt;/p&gt;
&lt;p&gt;例如，参考下面的页源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loginForm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"continue"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"continue"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Clear"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;form元素可以通过以下方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;login_form = driver.find_element_by_xpath("/html/body/form[1]")
login_form = driver.find_element_by_xpath("//form[1]")
login_form = driver.find_element_by_xpath("//form[@id='loginForm']")
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;1.绝对路径（只对HTML可能造成轻微影响）&lt;/li&gt;
&lt;li&gt;2.HTML中第一个form元素&lt;/li&gt;
&lt;li&gt;3.通过表单元素的id定位值为&amp;rdquo;loginForm&amp;ldquo;的表单元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;username元素可以通过以下方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username = driver.find_element_by_xpath("//form[input/@name='username']")
username = driver.find_element_by_xpath("//form[@id='loginForm']/input[1]")
username = driver.find_element_by_xpath("//input[@name='username']")
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;1.通过第一个form元素的input子元素中name属性为"username"的元素定位&lt;/li&gt;
&lt;li&gt;2.通过name属性为"loginForm"的form元素的input元素的第一个子元素定位&lt;/li&gt;
&lt;li&gt;3.通第一个name属性为&amp;rdquo;username"的input元素定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Clear"元素可以通过以下方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;clear_button = driver.find_element_by_xpath("//input[@name='continue'][@type='button']")
clear_button = driver.find_element_by_xpath("//form[@id='loginForm']/input[4]")
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;1.通过name属性为&amp;rdquo;continue"的input元素中name属性为"button"的元素定位。&lt;/li&gt;
&lt;li&gt;2.通过id值为'loginForm'的form元素的第４个input子元素定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的例子基本覆盖了基本用法，如果想了解更多，可以参考一下链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.w3schools.com/xsl/xpath_intro.asp"&gt;W3Schools Xpath Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/xpath/"&gt;W3C Xpath Recommendition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zvon.org/comp/r/tut-XPath_1.html"&gt;XPath Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也有几个非常有用的附加组件，可帮助通过XPath定位元素：
&lt;em&gt; &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/?id=1095"&gt;XPath Checker&lt;/a&gt;
&lt;/em&gt; &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/"&gt;Firebug&lt;/a&gt;
* &lt;a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl"&gt;XPath Helper&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="tong-guo-lian-jie-wen-ben-ding-wei-chao-lian-jie"&gt;通过链接文本定位超链接&lt;/h4&gt;
&lt;p&gt;当你知道一个锚点的链接文本，可以通过下面方式定位。这种方式，会返回第一个匹配的位置。如果没有匹配的元素，将会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;参考一下页源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Are you sure you want to do this?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"continue.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Continue&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"cancel.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;continue.html的链接可以这样定位：
　
    continue_link = driver.find_element_by_link_text('Continue')
    continue_link = driver.find_element_by_partial_link_text('Conti')&lt;/p&gt;
&lt;h4 id="tong-guo-tag-nameding-wei-yuan-su"&gt;通过Tag Name定位元素&lt;/h4&gt;
&lt;p&gt;当知道tag name的情况下，可以通过tag name去定位元素。同样，这个方式只会返回第一个匹配tagname的元素。如果找不到，同样会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;页源码参考如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Site content goes here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;h1元素可以这样定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heading1 = driver.find_element_by_tag_name('h1')
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="tong-guo-class-nameding-wei-yuan-su"&gt;通过class name定位元素&lt;/h4&gt;
&lt;p&gt;下面的方式可以通过class name属性去定位元素。同样会返回第一个匹配的元素。如果找不到元素，就会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;页源码参考如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Site content goes here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;元素&amp;ldquo;p"可以通过下面的方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;content = driver.find_element_by_class_name('content')
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="tong-guo-cssxuan-ze-qi-ding-wei-yuan-su"&gt;通过CSS选择器定位元素&lt;/h4&gt;
&lt;p&gt;使用下面的方式，可以通过CSS选择器去定位元素。同样，该方式也是返回第一个匹配CSS选择器的元素。如果没有匹配的元素，则触发NoSuchElementException异常。
页面源码参考如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Site content goes here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;元素&amp;rdquo;p"可以通过下面的方式定位：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;content = driver.find_element_by_css_selector('p.content')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/15/selenium/"&gt;Selenium主题3&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/17/selenium/"&gt;Selenium主题5&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Fri, 16 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-16:2015/01/16/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题3</title><link>http://king32783784.github.io/2015/01/15/selenium/</link><description>&lt;body&gt;&lt;h3 id="dao-hang"&gt;导航&lt;/h3&gt;
&lt;p&gt;使用WebDriver第一件想做的事情就是导航到指定链接。通常可以调用get方法去实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get("http://www.google.com")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;driver.get方法会导航到url指定的页面。webdriver会等待页面完全加载后，把控制权还给test脚本。需要注意的是，如果页面中使用了大量的AJAX负载过大，webdriver可能不知道什么时间加载完成。如果你想确保页面加载完全可以使用wait.&lt;/p&gt;
&lt;h4 id="ye-mian-jiao-hu"&gt;页面交互&lt;/h4&gt;
&lt;p&gt;只是导航到指定链接并不是很有用。我们想做的页面上的交互，准确的说是页面的元素操作。首先，我们要先找到它。webdriver提供了很多方法去找到元素，例如，元素定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;input type="text" name="passwd" id="passwd-id" /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以使用下面方法找到该元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element = driver.find_element_by_id("passwd-id")
element = driver.find_element_by_name("passwd")
element = driver.find_element_by_xpath("//input[@id='passwd-id']")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以通过文本去找到链接，但要小心。该文本必须完全匹配。同样需要小心使用XPATH. 如果有多个元素匹配，只有第一个会返回。如果都没有找到，则会触发NoSuchElementException异常。&lt;/p&gt;
&lt;p&gt;WebDriver有一个&amp;rdquo;Object-based"API;所有类型的元素使用相同的接口。这意味着，虽然使用IDE自动补全功能会看到大量可用的方法，但是并不是所有的都可用或有效。不必担心，Webdriver 会尽量去做正确的事情，如果调用了一个没有意义的方法，会触发异常。&lt;/p&gt;
&lt;p&gt;获取了元素之后，就可以输入文本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.send_keys("some text")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以通过&amp;ldquo;Key"类模拟使用方向键：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.send_keys(" and some", Keys.ARROW_DOWN)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;send_keys可以将键盘快捷键应用到任何元素中，例如Gmail.但有一个副作用是输入的文本区的内容不能自动清除。相反，输入的内容会追加到输入区。可以clear方法容易的清除这些内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.clear()
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="tian-xie-biao-dan"&gt;填写表单&lt;/h4&gt;
&lt;p&gt;前面已经说了如何在输入区输入文本，但其他元素呢？可以使用"toggle"下拉状态，使用&amp;ldquo;setSelected"进行选择框的设置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element = driver.find_element_by_xpath("//select[@name='name']"
all_options = element.find_element_by_tag_name("option")
for option in all_options:
    print("Value is: %s" % option.get_attribute("value"))
    option.click()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它会找到第一个&amp;rdquo;SELECT"元素，并且循环打印每个选项的值，并且选中。
这不是处理SELECT元素最有效的方式。WebDriver支持一个&amp;ldquo;Select"类，这个类提供了处理这些的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_visible_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WebDriver 同样提供取消所有选项的功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select = Select(driver.find_element_by_id('id'))
select.deselect_all()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这会取消页面上第一个SELECT中选项。&lt;/p&gt;
&lt;p&gt;假设在一次测试中，我们需要所有默认选项的列表。Select类提供的方法可以返回一个列表。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select = Select(driver.find_element_by_xpath("xpath")
all_selected_options = select.all_selected_options
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取所有可用的选项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;options = select.options
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当完成表格填写后，需要提交。一种方式就是找到"submit&amp;rdquo;键进行点击：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Assume the button has the ID "submit":)
driver.find_element_by_id("submit").click()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外，WebDriver有适用每个元素"submit"的简单方法。如果你在form中调用submit方法，webdriver会遍历DOM并调用submit，直到找到form的结束。如果元素不是一个form,就会触发NoSuchElementException异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;element.submit()
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="tuo-fang"&gt;拖放&lt;/h4&gt;
&lt;p&gt;可用使用drag和drop，或移动元素，或移动到另一个元素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;
&lt;span class="n"&gt;action_chains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionChains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;action_chains&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drag_and_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="chuang-kou-he-kuang-jia-zhi-jian-yi-dong"&gt;窗口和框架之间移动&lt;/h4&gt;
&lt;p&gt;现在的web应用很少只有一个窗口或没有框架的。WebDriver支持使用"switch_to_window"方法移动不同名称的窗口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_window("windowName")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在应用到driver的调用，全部解析到指定名称的窗口。但是如何获取窗口的名称呢？看下打开的javascript或链接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"somewhere.html"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"windowName"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click here to open a　window&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或则，可以通过窗口句柄去使用&amp;ldquo;switch_to_window"方法。了解了这个，就可以像这样打开每一个遍历的窗口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for handle in driver.window_handles:
    driver.switch_to_window(handle)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以进行frame到frame的摆动（或在frame中）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_frame("frameName")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过.路径访问子框架，或通过它的索引指定框架：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_frame("frameName.0.child")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就会到达名字为frameName框架的第一个子框架的名为"child"的框架。如果使用from &lt;em&gt;top&lt;/em&gt;，所有框架都会被evaluated.&lt;/p&gt;
&lt;p&gt;当我们操作框架时，有时我们需要从子框架返回到它的父框架：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.switch_to_default_content()
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="dan-chu-dui-hua-kuang"&gt;弹出对话框&lt;/h4&gt;
&lt;p&gt;Selenium WebDriver内置了对弹出对话框的支持。当触发动作弹出一个对话框后，可以通过　alert访问：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alert = driver.switch_to_alert()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这会返回当前打开的alert对象。获取对象后，可以接受、忽略、读取内容或输入标志等操作。该接口同样适用于警报、确认、提示等对话框。可以参阅相关ＡＰＩ了解更多内容。&lt;/p&gt;
&lt;h4 id="dao-hang-li-shi-ji-lu-he-wei-zhi"&gt;导航：历史记录和位置&lt;/h4&gt;
&lt;p&gt;前面，我们通过"get"命令导航到指定网页（driver.get("http://www.example.com").WebDriver有一些小的，任务聚焦的接口，并且导航也是有用的task,导航到具体网页，可以通过：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get("http://www.example.com")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前后移动浏览器记录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.forward()
driver.back()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，这些功能依赖于底层驱动。当你调用这些方法的时候，不同的浏览器可能会有不同行为。&lt;/p&gt;
&lt;h4 id="cookies"&gt;Cookies&lt;/h4&gt;
&lt;p&gt;当离开这些后续步骤后，可能感兴趣的是了解如何使用cookies.首先，我们要确定当前域名的cookie是有效的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#　Go to the correct domain
driver.get("http://www.example.com")

# Now set the cookie. This one's valid for the entire domain
cookie = {'name' : 'foo', 'value' : 'bar'}
driver.add_cookie(cookie)

# And now output all the avilable cookies for the current URL
driver.get_cookies()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/14/selenium/"&gt;Selenium主题2&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/15/selenium/"&gt;Selenium主题4&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Thu, 15 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-15:2015/01/15/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题2</title><link>http://king32783784.github.io/2015/01/14/selenium/</link><description>&lt;body&gt;&lt;h3 id="ru-men"&gt;入门&lt;/h3&gt;
&lt;h4 id="jian-dan-yong-fa"&gt;简单用法&lt;/h4&gt;
&lt;p&gt;如果已经具备了Selenium＆Python，可以这样开始使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://www.python.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;"Python"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pycon"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;"No results found."&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的脚本可以保存到一个文件（例如： - python_org_search.py），那么就可以像这样运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python python_org_search.py
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="shi-li-jie-shi"&gt;示例解释&lt;/h4&gt;
&lt;p&gt;selenium.webdriver 模块提供了WebDriver全部实现。目前支持WebDriver实现的是Firefox、Chrome、IE和Remote.
Keys类提供键盘操作比如RETURN, F1,ALT等。
　
    from selenium import webdriver
    form selenium.webdriver.common.keys import keys&lt;/p&gt;
&lt;p&gt;接下来，火狐的WebDriver实例被创建。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver = webdriver.Firefox()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;driver.get方法会导航到url指定的页面。webdriver会等待页面完全加载后，把控制权还给test脚本。需要注意的是，如果页面中使用了大量的AJAX负载过大，webdriver可能不知道什么时间加载完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get("http://www.python.org")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下一行断言确认包含"Python"字母在里面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert "Python" in driver.title
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;webdriver 提供一些如find_element_by_*的方法用于定位元素。例如，输入文本元素可以通过find_element_by_name方法使用名称属性来定位。定位方法会在后续进行详细解释。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem = driver.find_element_by_name("q")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，是发送关键信息，比较像从键盘输入。特殊关键信息可以通过selenium.webdriver.common.keys中的Keys 类实现。安全考虑，首先要确认输入区没有其他信息（如&amp;ldquo;搜索框&amp;rdquo;），以免影响搜索结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem.clear()
elem.send_keys("pycon")
elem.send_keys(Keys.RETURN)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提交页面后，可以看到搜索结果或没有找到。为了确保找到了一些结果，我们需要做一些断言：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert "No results found." not in driver.page_source
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，要关闭浏览器窗口。还可以通过调用quit方法去关闭。quit方法会退出整个浏览器，close会关闭一个标签页，默认情况下，大部分浏览器会关闭整个浏览器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sample1:
测试百度首页的查询功能：
百度搜索框&amp;ldquo;&lt;input autocomplete="off" class="s_ipt" id="kw" maxlength="100" name="wd" type="text"/&gt;&amp;rdquo;
code:&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://www.baidu.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;"百度一下，你就知道"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="c1"&gt;#elem = driver.find_element_by_name("wd") #locate by name&lt;/span&gt;
&lt;span class="c1"&gt;##elem = driver.find_element_by_id("kw") #locate by id&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"//*[@id='kw']"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# locate by xpath&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"isoft"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implicitly_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;"No results found."&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="shi-yong-seleniumbian-xie-ce-shi"&gt;使用Selenium编写测试&lt;/h4&gt;
&lt;p&gt;Selenium 大部分情况下都是用来编写测试用例的。Selenium本身是不提供测试工具或框架的。可以通过Python的unittest　模块去编写case,另外还可以通过pt.test或ｎｏｓｅ框架。&lt;/p&gt;
&lt;p&gt;下面是一个使用unittest框架的例子，测试的是python.org 的搜索功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PythonOrgSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_in_python_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://www.python.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pycon"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;"No results found."&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以运行以下命令进行验证：&lt;/p&gt;
&lt;p&gt;python test_python_org_search.py&lt;/p&gt;
&lt;h4 id="shi-li-jie-xi"&gt;示例解析&lt;/h4&gt;
&lt;p&gt;最初，基本模块需要导入。unittest基于java的junit的内嵌模块。该模块提供了测试组织的框架。selenium.webdriver模块提供了WebDriver的所有实现。目前支持的是firefox chrome ie remote。Ｋeys类提供了键盘输入如RETURN F1 ALT等.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试用例类继承自unittest.TestCase,通过这个方式说明这是一个测试用例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;PythonOrgSearch&lt;/span&gt;(&lt;span class="n"&gt;unittest&lt;/span&gt;.&lt;span class="n"&gt;TestCase&lt;/span&gt;):
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setup是初始化的一部分，这个方法在进行编写测试用例之前被每个测试方法调用。这里以firfox webdriver为例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def setUp(self):
    self.driver = webdriver.Firefox()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个测试用例的方法。这个测试用例方法总是characters 测试开始。第一行是创建一个本地driver,来源于setUp方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_search_in_python_org(self):
    driver = self.driver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;driver.get 方法会导航到URL指定的页面。Ｗebdriver会等待页面加载完成。需要注意的是，如果页面中使用了大量的AJAX负载过大，webdriver可能不知道什么时间加载完成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver.get("http://www.python.org")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下一行断言确认包含"Python"字母在里面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert "Python" in driver.title
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;webdriver 提供一些如find_element_by_*的方法用于定位元素。例如，输入文本元素可以通过find_element_by_name方法使用名称属性来定位。定位方法会在后续进行详细解释。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem = driver.find_element_by_name("q")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，是发送关键信息，比较像从键盘输入。特殊关键信息可以通过selenium.webdriver.common.keys中的Keys 类实现。安全考虑，首先要确认输入区没有其他信息（如&amp;ldquo;搜索框&amp;rdquo;），以免影响搜索结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elem.clear()
elem.send_keys("pycon")
elem.send_keys(Keys.RETURN)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提交页面后，可以看到搜索结果或没有找到。为了确保找到了一些结果，我们需要做一些断言：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert "No results found." not in driver.page_source
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tearDown方法每个测试方法之后都会调用。这是用来清理动作的地方。当前这个方法，实现了浏览器的关闭。同样可以调用quit方法替换close.quit方法有些地方是关闭一个标签页，默认情况下是关闭整个浏览器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tearDown(self):
    self.driver.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后是标准代码用于执行测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == "__main__"
    unittest.main()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sample 
测试百度搜索
code:&lt;/p&gt;
&lt;table class="table highlighttable table-striped table-hover"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaiduSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_in_baidu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://www.baidu.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"百度一下，你就知道"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"kw"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"isoft"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s2"&gt;"No result found."&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_source&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="shi-yong-selenium-remote-webdriver"&gt;使用Selenium remote WebDriver&lt;/h4&gt;
&lt;p&gt;使用remote　WebDriver之前需确保Selenium server在运行。启动该server命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -jar selenium-server-standalone-2.x.x.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行Selenium　server时，会返回以下信息：
    15:43:08.541 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub&lt;/p&gt;
&lt;p&gt;上面的反馈信息说明可以使用这个URL连接到remote WebDriver.示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.desired_capabilities&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DesiredCapbilities&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:4444/wd/hub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DesiredCapbilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHROME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:4444/wd/hub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DesiredCapbilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPERA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;command_executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:4444/wd/hub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;desired_capabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTMLUNITWITHJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;功能是个字典结构，可以通过字典来明确指定这些值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver = webdriver.Remote(
    command_executor='http://127.0.0.1:4444/wd/hub',
    desired_capabilities={'browserName': 'htmlunit',
                          'version':'2',
                          'javascriptEnabled': True})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上一篇&lt;a href="https://king32783784.github.io/2015/01/13/selenium/"&gt;Selenium主题1&lt;/a&gt;
下一篇&lt;a href="https://king32783784.github.io/2015/01/15/selenium/"&gt;Selenium主题3&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Wed, 14 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-14:2015/01/14/selenium/</guid><category>Selenium</category></item><item><title>selenium-专题1</title><link>http://king32783784.github.io/2015/01/13/selenium/</link><description>&lt;body&gt;&lt;p&gt;该topic将开始学习selenium的使用。主要内容如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.安装&lt;/li&gt;
&lt;li&gt;2.入门&lt;/li&gt;
&lt;li&gt;3.导航&lt;/li&gt;
&lt;li&gt;4.元素定位&lt;/li&gt;
&lt;li&gt;5.等待&lt;/li&gt;
&lt;li&gt;6.页面对象&lt;/li&gt;
&lt;li&gt;7.WebDriver API&lt;/li&gt;
&lt;li&gt;8.常见问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;h4 id="jian-jie"&gt;简介&lt;/h4&gt;
&lt;p&gt;Selenium＆python提供了使用Selenium WebDriver编写功能／通过性测试的ＡＰＩ。通过Selenium Python API可以直观的使用Selenium的功能。
Selenium&amp;amp;python提供了直观的ＡＰＩ访问Selenium WebDrivers如firefox、ie、chrome、Remote等。目前支撑的python版本为2.7\3.2及以上。
本文只涉及Selenium 2 WebDriver.Selenium1没有覆盖。&lt;/p&gt;
&lt;h4 id="xia-zai-selenium-pythonzhi-chi-bao"&gt;下载Selenium python支持包&lt;/h4&gt;
&lt;p&gt;可以在&lt;a href="https://pypi.python.org/pypi/selenium"&gt;PyPI page for selenium package&lt;/a&gt;下载Selenium python支持包。更好的方式是通过pip去安装，在python3.5已集成进标准库: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install selenium
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以考虑使用&lt;a href="www.virtualenv.org"&gt;virtualenv&lt;/a&gt;创建的独立python环境。Python 3.5的&lt;a href="https://docs.python.org/3.5/using/scripts.html#scripts-pyvenv"&gt;pyvenv&lt;/a&gt;和virtualenv类似。&lt;/p&gt;
&lt;h4 id="zhen-dui-windowshuan-jing-de-shuo-ming"&gt;针对windows环境的说明&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1.安装python 3.5 &lt;/li&gt;
&lt;li&gt;2.在cmd.exe命令行下，使用pip命令安装
    C:\Python35\scripts\pip.exe install selenium&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就可以运行python脚本，例如一个脚本放到C:\my_selenium_script.py,可以这样执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\Python35\python.exe C:\my_selenium_script.py
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xia-zai-selenium-server"&gt;下载Selenium server&lt;/h4&gt;
&lt;p&gt;Selenium server是一个Java程序。建议使用JRE1.6或以上版本运行Selenium server.
可以从&lt;a href="seleniumhq.org/download/"&gt;下载&lt;/a&gt;下载Selenium server2.x,文件名类似selenium-server-standalone-2.x.x.jar.
在此之前，确认系统中已经安装了ＪＲＥ。
如果java支持，可以通过下面命令来启动Selenium server:
    java -jar selenium-server-standalone-2.x.x.jar&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇&lt;a href="https://king32783784.github.io/2015/01/14/selenium/"&gt;selenium-专题２&amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Tue, 13 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-13:2015/01/13/selenium/</guid><category>Selenium</category></item><item><title>selenium-浏览器性能测试</title><link>http://king32783784.github.io/2015/01/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link><description>&lt;body&gt;&lt;p&gt;浏览器是系统下比较常用的软件，在linux系统比较常用的是firefox、chrome.如何评估浏览器的基础性能？有很多评测网站进行了这边的测试。
如
&lt;em&gt; &lt;a href="http://css4-selectors.com/browser-selector-test/"&gt;CSS&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://acid3.acidtests.org/"&gt;acid3&lt;/a&gt;
&lt;em&gt; &lt;a href="http://chrome.360.cn/test/v8/run.html"&gt;v8test&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://chrome.2345.com/labs/test/octanebenchmark.html"&gt;octane&lt;/a&gt;
&lt;em&gt; &lt;a href="http://html5test.com/"&gt;html5&lt;/a&gt;
&lt;/em&gt; &lt;a href="http://dromaeo.com/"&gt;dromaeo&lt;/a&gt;等&lt;/p&gt;
&lt;p&gt;考虑到每次测试都需要点击这些网站和取测试结果，决定采用selenium去实现自动测试。
测试代码如下：
browser-run.py:&lt;/p&gt;
&lt;p&gt;```python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#encoding = utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;runtest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# create logger with 'spam_application'&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'browser-test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create file handler which logs even debug messages&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'browser.log'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create console handler with a higher log level&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create formatter and add it to the handlers&lt;/span&gt;
&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add the handlers to the logger&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;css4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'css4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'http://css4-selectors.com/browser-selector-test/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'start-browser-selector-test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'diagram'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#do_type2test&lt;/span&gt;
&lt;span class="n"&gt;acid3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'acid3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://acid3.acidtests.org/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;v8test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'v8test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://chrome.360.cn/test/v8/run.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;octane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'octane'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://chrome.2345.com/labs/test/octanebenchmark.htm'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'main-banner'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#do_type3test&lt;/span&gt;
&lt;span class="n"&gt;html5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'html5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://html5test.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s1"&gt;score&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s1"&gt;]/div[1]/h2/strong'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#do_type4test&lt;/span&gt;
&lt;span class="n"&gt;dromaeo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'dromaeo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://dromaeo.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id=&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;timebar&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;]/span/strong'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;'testxpath'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'//*[@id=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s1"&gt;tests&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s1"&gt;]/li[8]/a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'runid'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'pause'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'resultid'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'left'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Initialresults&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r'\d+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Initialresults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"which chromium-browser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;csstest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type2test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cssresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csstest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"css4 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cssresult&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;acidtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acid3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;acidresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;acidtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"acid3 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;acidresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v8test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"V8test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;vresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octanetest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;octane&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octaneresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;octanetest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"octane result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;octaneresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmltest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type3test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmlresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmltest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"html5test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;htmlresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type4test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dromaeo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dromaeotest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dromaeotest result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test finish"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Execution failed:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;firefox&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"which firefox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;retcode&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;csstest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type2test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cssresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csstest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"css4 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cssresult&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;acidtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acid3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;acidresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;acidtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"acid3 result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;acidresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vtest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v8test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;vresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"V8test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;vresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octanetest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;octane&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;octaneresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;octanetest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"octane result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;octaneresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmltest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type3test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;htmlresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmltest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"html5test result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;htmlresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runtest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do_type4test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dromaeo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dromaeotest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dromaeotest result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dromaeotestresult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test finish"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Execution failed:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;runtest.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;

&lt;span class="n"&gt;module_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'browser-test.runtest'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dromaetest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"//*[@id='tests']/li[3]/b/a"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''check the xpath ready or not'''&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;module_logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; is  not ok"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_idon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dromaeotest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'pause'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_idoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dromaeotest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'left'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type1test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'browser-test.runtest.Do_type1test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting "&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"There are some errors about this test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type2test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'browser-test.runtest.Do_type2test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting "&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type3test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'browser-test.runtest.Do_type3test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting "&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Do_type4test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'browser-test.runtest.Do_type4test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testcmds&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; test startting "&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;check_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkxpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'testxpath'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'testxpath'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;check_idon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'runid'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'runid'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;check_idoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'resultid'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;```                                                                                                     &lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Mon, 12 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2015-01-12:2015/01/12/自动化测试/</guid><category>Selenium</category></item><item><title>Spec2006使用说明</title><link>http://king32783784.github.io/2014/10/10/linux/</link><description>&lt;body&gt;&lt;h2 id="gong-ju-jie-shao"&gt;工具介绍&lt;/h2&gt;
&lt;p&gt;SPEC CPU 2006 benchmark是SPEC新一代的行业标准化的CPU测试基准套件。重点测试系统的处理器，内存子系统和编译器。这个基准测试套件包括的SPECint基准和SPECfp基准。 其中SPECint2006基准包含12个不同的基准测试和SPECfp2006年基准包含19个不同的基准测试。SPEC设计了这个套件提供了一个比较标准的计算密集型，高性能的跨硬件的CPU测试工具。在SPEC CPU 2006基准有几种不同的方法来衡量计算机性能。 一种方式是测量计算机完成单一任务的速度; 另一种方式吞吐量，容量或速率的测量。
说明：由于spec2006支持多种类型操作系统。以下安装、测试、移植等介绍均基于Unix 和其他的 Unix-like system如linux。Windows系统不在此范围内。&lt;/p&gt;
&lt;h3 id="spec2006yu-spec2000de-dui-bi-jian-yao-shuo-ming"&gt;spec2006与spec2000的对比简要说明&lt;/h3&gt;
&lt;p&gt;2006年8月24日，标准性能评估公司（SPEC）宣布CPU2006将取代CPU2000。
Spec cpu基准测试被广泛的应用于工业界和学术界。新套件比cpu2000要大很多，而且将涵盖到CPU、存储器系统、编译器特别是C++编译器。Cpu2000只有1个关于C++的基准测试，CPU2006则含有7个相关套件，这其中包括了50W行c++代码，Fortran和C语言和之前一样有很好的覆盖。&lt;/p&gt;
&lt;h3 id="spec2000he-spec20006ju-ti-de-tao-jian-xin-xi-ru-xia"&gt;Spec2000和spec20006具体的套件信息如下：&lt;/h3&gt;
&lt;h4 id="spec-int2000-12ge-zheng-dian-ce-shi-xiang-mu"&gt;Spec int2000  12个整点测试项目&lt;/h4&gt;
&lt;p&gt;164.gzip
C语言编写，很流行的数据压缩程序。使用Lempel-Ziv coding(LZ77)作为压缩算法。SPEC中的gzip除了读入集外没有其他文件I/O操作，所有压缩和解压都在主存中进行，方便测试CPU和存储子系统。&lt;/p&gt;
&lt;p&gt;175.vpr
C语言编写，FPGA中的电路定位和路由程序,用于计算机辅助电路设计领域。&lt;/p&gt;
&lt;p&gt;176.gcc:
C语言编写，C语言优化编译器。该GCC基于GCC 2.7.2.2版本，为摩托罗拉88100处理器生成机器码。&lt;/p&gt;
&lt;p&gt;181.mcf:
C语言编写，组合优化/单点轮换调度(Single-depot vehicle scheduling),派生自使用单站轮换调度的公共物流应用程序。&lt;/p&gt;
&lt;p&gt;186.crafty：
C语言编写，国际象棋游戏程序。这是一个在64位机上设计的高性能计算机国际象棋程序，在32位机上可以使用long long来表示该数据类型。主要是一个整点程序，大量的逻辑运算。通过配置，能生成不同的搜索集，可以对处理器的整点运算，转移预测和流水线等做测试。&lt;/p&gt;
&lt;p&gt;197.parser:
C语言编写，字处理程序。连接语法分析器(Link Grammar Parser)是一个基于连接语法的英语句法分析器。连接语法时英语语法的较早理论。给定一个句子，系统能给它赋予一个词法结构，这个结构是两个词之间被标记的连接。该分析器有大约60000个词表的字典。&lt;/p&gt;
&lt;p&gt;252.eon：
C++语言编写，计算机可视化。eon是一个基于概率的射线跟踪程序，基于Kajiya 1986 ACM SIGGRAPH会议的论文。它将一定数量的3D射线发射到一个3D多面体中，计算射线和多边形的交点，并通过计算入射光和交点生成新射线。最终的计算结果时一个能在照相机内看到的图片。程序中的计算需求和基本计算机图形学中介绍的传统确定性射线跟踪程序很相似，但是它有较少的存储一致性需求，因为很多在同一个位置生成的随机射线横切3D空间中完全不同的区域.输入：eon渲染一个150&amp;times;150像素的一把椅子在房间前脚的图片。&lt;/p&gt;
&lt;p&gt;253.perlbmk:
C语言编写,Perl语言解释器。这是一个Perl v5.005_03版本的删减版，删除了很多操作系统相关的特性，并增加了一些第三方的模块，包括MD5 v1.7, MHonArc v2.3.3, IO-stringy v1.205,MailTools v1.11,TimeData v1.08。输入：由四个perl脚本组成，一个email-to-HTML 转换器，占用时间最长；一个spec CPU2000用来对比较输出的diff脚本，一个通过迭代算法寻找合格数字的脚本，一个用于测试伪随机数按照预定顺序生成的脚本。输出分别对应各个输入。&lt;/p&gt;
&lt;p&gt;254.gap:
C语言编写，群论，解释器中常用。它实现一个语言和库用于做群论计算。GAP是(Groups,Algorithms和Programming的缩写)。&lt;/p&gt;
&lt;p&gt;255.vortex：
C语言编写,单用户面向对象数据库中事务处理的benchmark。SPEC中的vortex来自完整面向对象数据库程序VORTEx的一个子集。输入和输入数据库的事务都会被转换成一个方案。&lt;/p&gt;
&lt;p&gt;256.bzip2：
C语言编写，压缩程序。基于Julian Seward的bzip2 v0.1，唯一的不同是SPEC中的bzip2除了输入外，无文件I/O。所有的压缩和解压都在内存中进行。输入，输出都和gzip的相似。&lt;/p&gt;
&lt;p&gt;300.twolf：
C语言实现，定位和路由模拟。twolf来自TimberWolfSC定位和全局路由，它被用于创建微处理器产品印刷电路布局的流程中，确定晶体管的位置和组内的全局连接。定位问题是一个排列，穷举法耗时太长，TimberWolfSC程序则使用模拟退火作为启发来找到较优解。&lt;/p&gt;
&lt;h4 id="spec-int2006-12ge-zheng-dian-ce-shi-xiang-mu"&gt;Spec int2006  12个整点测试项目&lt;/h4&gt;
&lt;p&gt;400.perlbench：C语言编写，同spec2000的253.perlbmk类似，是Perl V5.8.7版本的删减版，同样删除了一下操作系统特性有关的东西，增加了第三方的模块，如：SpamAssassin V2.61,Digest-MD5 v2.33,HTML-Parser v3.35,MHonArc V2.6.8,IO-stringy V1.205,MailTools V1.60，TimeDate V1.16。400.perlbench采用3个脚本进行增加负载或工作。1.主要的负载在于打开&amp;nbsp;垃圾邮件过滤软件SpamAssassin。采取的过滤方式是采用记分制，也就是说会根据我们所设定的标准来给予分数超过标准值的时候即判定为 SPAM（垃圾邮件），其余为非垃圾邮件。但对SpamAssassin软件做了很大程度的修改，避免一些I/0操作，并且没有使用贝叶斯过滤。2.是比较流行的email到HTML的转换器MHonArc 3.使用了spec2006的工具套件specdiff。&lt;/p&gt;
&lt;p&gt;401.bzip2: C语言实现，同spec2000的256.bzip2类似,基于Julian Seward的bzip2 v1.03.唯一的不同是SPEC中的bzip2除了输入外，无文件I/O。所有的压缩和解压都在内存中进行。输入，输出都和gzip的相似。负载包括六个部分：两个小的JPEG图片、一个程序、一个tar包起的几个源程序文件、一个HTML文件、混合文件，包括压缩起来的高可压缩文件及不怎么可压缩的文件。测试分别使用了三个不同的压缩等级进行压缩和解压缩&lt;/p&gt;
&lt;p&gt;403.gcc:C语言实现，同spec2000的176.gcc类似。该测试是基于gcc V3.2,为AMDCPU生成机器码。相比spec2000的176.gcc，该测试有更多的输入文件，因此测试压力会更大，负载来源于对9组C代码进行编译。&lt;/p&gt;
&lt;p&gt;429.mcf:C语言实现，同时需要libm库支持，同spec2000的181.mcf类似，MCF是一个用于大型公共交通中的单站车辆调度的程序。但对输入文件做了一定的修改，由32位变成64位，用以兼容64位系统。并且增加了cache命中和程序的性能。相比spec2000的181.mcf来说，占用的内存由之前的100M-190M变为860M-1700M。&lt;/p&gt;
&lt;p&gt;445.gobmk：C语言实现，同spec2000的186.crafty类似。不同的是这里是实现的围棋游戏。相比spec2000程序更复杂。&lt;/p&gt;
&lt;p&gt;456.hmmer：C语言实现。HMMER是基于隐马尔可夫模型(profile HMMs)，用于生物序列分析工作。同Timed HMMer Search 类似。&lt;/p&gt;
&lt;p&gt;458.sjeng：C语言实现。基于一种象棋游戏Sjeng11.2，属于人工智能的范畴。&lt;/p&gt;
&lt;p&gt;462.libquantum:C语言实现（C99）。libquantum是模拟量子计算机的库文件，用来进行量子计算机应用的研究。&lt;/p&gt;
&lt;p&gt;464.h264ref:C语言实现。一种视频压缩程序，基于H264AVC 9.3版，去除了I/O和平台相关的东西。&lt;/p&gt;
&lt;p&gt;471.omnetpp:C++语言实现。OMNeT++，离散事件仿真。包括约8000台计算机和900个交换机/集线器，以及混合了各种从10Mb到1000Mb速率的大型CSMA/CD协议以太网络模拟。&lt;/p&gt;
&lt;p&gt;473 astar：C++语言实现，实现了2D寻路算法A*的三种不同版本。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;xalancbmk：C++语言实现，包含Xalan-C++ v1.8 mod、Xerces-C++ v2.5.0，实现了XML文档/XSL表到HTML文档的转换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="spec-fp2000-13ge-fu-dian-ce-shi-xiang-mu"&gt;Spec fp2000  13个浮点测试项目&lt;/h4&gt;
&lt;p&gt;168 wupwise：Fortran 77语言实现，格点规范理论与威尔逊数值模拟对费米子格是夸克传播子的计算。输入文件wupwise.in包含几个创建该问题的参数，SEED:提供一个随机数 NITER：迭代次数KAPPA：参数表征矩阵M = I - KAPPA * D。输出文件wupwise.out,包含每次NITER迭代的校验值（EPS）和包含最终的EPSILON特征的结果。&lt;/p&gt;
&lt;p&gt;171 swim：Fortran 77语言实现，气象学中的浅水模型。&lt;/p&gt;
&lt;p&gt;172.mgrid ：Fortran 77语言实现，多重网格求解器：3D势场&lt;/p&gt;
&lt;p&gt;173.applu： Fortran 77语言实现，抛物线/椭圆型偏微分方程&lt;/p&gt;
&lt;p&gt;177.mesa：C语言实现 ，3D图形库。&lt;/p&gt;
&lt;p&gt;178.galgel :Fortran 90语言实现，计算流体动力学&lt;/p&gt;
&lt;p&gt;179.art :C，图像识别/神经网络&lt;/p&gt;
&lt;p&gt;183.equake:C语言实现， 地震波传播模拟&lt;/p&gt;
&lt;p&gt;187.facerec: Fortran 90语言实现，图像处理：人脸识别&lt;/p&gt;
&lt;p&gt;189.lucas :Fortran 90语言实现，数论/素性测试&lt;/p&gt;
&lt;p&gt;191.fma3d :Fortran 90语言实现，有限元模拟碰撞&lt;/p&gt;
&lt;p&gt;200.sixtrack :Fortran 77语言实现，高能核物理加速器设计&lt;/p&gt;
&lt;p&gt;301.apsi: Fortran 77语言实现，气象学中污染物分布&lt;/p&gt;
&lt;h4 id="spec-fp2006-17ge-fu-dian-ce-shi-xiang-mu"&gt;Spec fp2006  17个浮点测试项目&lt;/h4&gt;
&lt;p&gt;410.bwaves：Fortran 77语言实现，流体力学范畴。对三维瞬跨音速粘性流中冲击波的模拟计算&lt;/p&gt;
&lt;p&gt;416.gamess：Fortran语言实现，量子化学范畴。采用GMAESS组件，包含　胞嘧啶分子、水和Cu2+离子、三唑离子等3种SCF自洽场计算。&lt;/p&gt;
&lt;p&gt;433.milc：C语言实现，量子力学范畴，采用MILC组件，包含用来研究QCD量子色动力学、夸克及胶子的四维SU(3)格点规范理论的模。&lt;/p&gt;
&lt;p&gt;434.zeusmp ：Fortran 77/REAL*8语言实现，属于计算流体力学范畴，ZEUS-MP程序，用来计算理想、非相对论条件下的流体力学和磁流体力学，434.zeusmp模拟计算了一个统一磁场中的3D冲击波。&lt;/p&gt;
&lt;p&gt;435.gromacs ：C &amp;amp; Fortran语言实现，属于生物化学/分子力学范畴。GROMACS是一个分子力学计算套件，然而也可以用于非生物系统，435.gromacs模拟了在一个水和离子溶液中的蛋白质溶菌酶结构在各种实验手段如核磁共振的X光照射下的变化。&lt;/p&gt;
&lt;p&gt;436.cactusADM：Fortran 90, ANSI C语言实现，物理中的广义相对论。来源于Cactus　　BenchADM。436.cactusADM对时空曲率由内部物质决定的爱因斯坦演化方程进行求解，爱因斯坦演化方程由10个标准ADM 3+1分解的二阶非线性偏微分方程组成。&lt;/p&gt;
&lt;p&gt;437.leslie3d ：Fortran 90语言实现，属于流体力学范畴。  LESlie3d是用来计算湍流的计算流体力学程序，437.leslie3d计算了一个如燃油注入燃烧室的时间分层混合流体。&lt;/p&gt;
&lt;p&gt;444.namd：C++语言实现。属于生物/分子学范畴。NAMD是一个大型生物分子系统并行计算程序，444.namd模拟了了92224个原子组成的A-I载脂蛋白&lt;/p&gt;
&lt;p&gt;447.dealII：C++语言实现。进行有限元分析，w/Boost lib 、deal.II lib、deal.II是定位于自适应有限元及误差估计的C++库，447.dealII对非常系数的亥姆霍兹方程进行求解，它使用了基于二元加权误差估计生成最佳网格的自适应方法，该方程在3维得解。&lt;/p&gt;
&lt;p&gt;450.soplex:C++语言实现。采用Plex v1.2.1程序，Plex使用单纯形算法解线性方程&lt;/p&gt;
&lt;p&gt;453.povray：ISO C++  语言实现。   POV-Ray POV-Ray是一个光线追踪渲染软件，453.povray渲染一幅1280x1024的反锯齿国际象棋棋盘图像&lt;/p&gt;
&lt;p&gt;454.calculix：Fortran 90 &amp;amp; C语言实现，结构力学范畴。CalculiX是一个用于线性及非线性三位结构力学的有限元分析软件，454.calculix计算了一个高速旋转的压缩盘片在离心力的作用下的应力和变形情况&lt;/p&gt;
&lt;p&gt;459.GemsFDTD：Fortran 90语言实现。属于电磁学范畴。    459.GemsFDTD使用FDTD（有限差分时域）方法求解三维时域中的麦克斯韦方程，计算了一个理想导体的雷达散射截面&lt;/p&gt;
&lt;p&gt;465.tonto： Fortran 95实现。量子化学范畴Tonto是一个面向对象的量子化学程序包，465.tonto计算面向量子晶体学，它基于一个符合X光衍射实验数据的、约束的分子Hartree-Fock波函数&lt;/p&gt;
&lt;p&gt;470.lbm ：ANSI C语言实现。    470.lbm使用LBM（格子波尔兹曼方法）模拟非压缩流体，它模拟了两种情况：类似活塞推动的剪切驱动流体和管道流体，测试包含了3000个步骤&lt;/p&gt;
&lt;p&gt;481.wrf ：Fortran 90 &amp;amp; C语言实现。WRF v2.0.2  481.wrf基于WRF(Weather Research and Forecastin)模型，对NCAR的数据进行了计算，数据包括了UTC 2001.06.11到UTC 2001.06.12以三小时为间隔的数据&lt;/p&gt;
&lt;p&gt;482.sphinx3：C语言实现。Sphinx-3一种语音识别软件。&lt;/p&gt;
&lt;h3 id="gong-ju-an-zhuang_1"&gt;工具安装&lt;/h3&gt;
&lt;h4 id="biao-zhun-an-zhuang-fang-shi"&gt;标准安装方式&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mount&lt;/span&gt;&lt;span class="x"&gt; -t iso9660 -o ro,exec /dev/cdrom /mnt&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;cd&lt;/span&gt;&lt;span class="x"&gt; /mnt&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;./install.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以指定安装目录如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$./install.sh -d  /home/cpu2006
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装过程中可能遇到以下提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing FROM /Volumes/SPEC_CPU2006
Installing TO /home/cpu2006
Is this correct? (Please enter 'yes' or 'no')
yes
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="tong-guo-an-zhuang-wan-cheng-de-ruan-jian-jin-xing-ce-shi"&gt;通过安装完成的软件进行测试&lt;/h4&gt;
&lt;p&gt;先准备相关测试文件，如：cpu2006-20141030.tar。
解压文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tar&lt;/span&gt;&lt;span class="x"&gt; xf cpu2006-20141030.tar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入安装目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;cd&lt;/span&gt;&lt;span class="x"&gt; cpu2006v99/（根据实际路径）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入测试工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$.  shrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：输入时，圆点与shrc之间至少一个空格，该命令开始导入SPEC CPU2006程序。
修改测试文件绝对路径：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="x"&gt;/relocate&lt;/span&gt;
&lt;span class="x"&gt;显示&amp;ldquo;Top of SPEC benchmark tree is '/cpu2006v99'&amp;rdquo;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="yun-xing-ce-shi"&gt;运行测试&lt;/h4&gt;
&lt;p&gt;根据需求，进行参数选择，开始运行测试脚本：
例如：runspec -c linux-mipsel-gcc -i ref -n 3  all
命令参数说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-c：读取测试配置文件，linux-mipsel-gcc位于SPEC CPU2000安装目录的config目录下，该文件可以根据实际信息进行修改。其编译选项不建议修改。
-i：输入测试数据集的大小，ref代表最大测试数据集，test代表最小测试数据集；
-n：每个测试项目运行的次数，如果需要SPEC CPU2006自动计算测试分值，需要指定运行次数等于或大于3，即n&amp;gt;=3；
all：SPEC CPU2006将运行基准测试程序中的所有测试项目。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出现以下信息，表明测试已经启动&amp;ldquo;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;runspec v4283 - Copyright 1999-2006 Standard Performance Evaluation Corporation
Using 'mipsel-linux' tools
Reading MANIFEST... 17899 files
Loading runspec modules...............
Locating benchmarks...found 31 benchmarks in 13 benchsets.
Locating output formats: ASCII, config, CSV, flags, html (DISABLED), mail, PDF, PostScript, raw, Screen, Submission Check
Reading config file '/cpu2006v99/config/linux-mipsel-gcc.cfg'
Benchmarks selected: 400.perlbench, 401.bzip2, 403.gcc, 429.mcf, 445.gobmk, 456.hmmer, 458.sjeng, 462.libquantum, 464.h264ref, 471.omnetpp, 473.astar, 483.xalancbmk, 999.specrand, 410.bwaves, 416.gamess, 433.milc, 434.zeusmp, 435.gromacs, 436.cactusADM, 437.leslie3d, 444.namd, 447.dealII, 450.soplex, 453.povray, 454.calculix, 459.GemsFDTD, 465.tonto, 470.lbm, 481.wrf, 482.sphinx3, 998.specrand
Compiling Binaries
 up to date 400.perlbench ref base linux-mipsel-gcc default
 Up to date 401.bzip2 ref base linux-mipsel-gcc default
 Up to date 403.gcc ref base linux-mipsel-gcc default
 Up to date 429.mcf ref base linux-mipsel-gcc default
&amp;hellip;&amp;hellip;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这组测试配置基本和spec2000类似，不同的是，spec2006在测试前，会把每个测试组件重新编译建立一次。所以在测试前，应确保此时的系统中包含以下编译器：g++、gcc、gfortran编译器。如果进行连续测试，则不必进行再次编译，可以加参数&amp;rdquo;&amp;mdash;nobuild&amp;rdquo;.
附config文件大体说明：斜体部分为文本内容 //为解释说明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#####################################################################
ignore_errors = yes
tune          = base
ext           = loongson.3a2000
output_format = asc, Screen, html
reportable    = 0
teeout        = yes
teerunout     = yes
hw_avail = Feb-2015
sw_avail = Feb-2015
license_num = 
company_name = Loongson
prepared_by = Loongson
tester_name = isoft
test_date = July-2016

verbose         = 9

default=default=default=default:
#####################################################################
#
# Compiler selection
#
#####################################################################

makeflags = -j 4


CC           = mips64el-loongson-linux-gcc
CXX          = mips64el-loongson-linux-g++
FC           = mips64el-loongson-linux-gfortran

## HW config
hw_cpu_name  = Loongson
hw_model     = 3A2000
hw_cpu_mhz   = 1000
hw_fpu       = Integrated
hw_nchips   = 1
hw_ncores   = 4
hw_ncoresperchip= 4
hw_nthreads = 4
hw_ncpuorder = 1
hw_parallel  = yes
hw_pcache    = 64KB I + 64KB D
hw_scache    = 4096KB(I + D)
hw_memory   = 2 x 4GB DDR1066 
hw_vendor   = Loongson

## SW config
sw_os        = iSoft
sw_file      = ext4
sw_state     = runlevel 3
sw_compiler  = gcc , g++ &amp;amp; gfortran 4.8

#####################################################################
# Optimization
#####################################################################
## Base is low opt
default=default=default=default:
# For this data model, -m32 needs to be here, as one of the lines below
OPTIMIZE     = -static -march=loongson3a
PORTABILITY     =

COPTIMIZE    = -flto -Ofast 
CXXOPTIMIZE  = -flto -Ofast 
FOPTIMIZE    = -flto -Ofast

notes0100= C/C++ base flags:   -flto -Ofast
notes0110= Fortran base flags: -flto -Ofast

#####################################################################
# 32/64 bit Portability Flags - all
#####################################################################

default=base=default=default:
notes25=

default=peak=default=default:
notes25=


#####################################################################
# Portability Flags - INT
#####################################################################

400.perlbench=default=default=default:
notes35    = 400.perlbench: -DSPEC_CPU_LINUX_IA32
CPORTABILITY= -DSPEC_CPU_LINUX_IA32 -fno-strict-aliasing
#notes35    = 400.perlbench: -DSPEC_CPU_LINUX
#CPORTABILITY= -DSPEC_CPU_LINUX -DSPEC_CPU_LITTLEENDIAN 
#COPTIMIZE     = -O2
......
其他具体组件的编译信息不再一一说明，基本可以保持默认即可。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多测试类型与方法参见下文。&lt;/p&gt;
&lt;h3 id="ce-shi-jie-guo-shou-ji-yu-fen-xi_1"&gt;测试结果收集与分析&lt;/h3&gt;
&lt;p&gt;测试结束后在result目录下，查看测试结果，测试结果一般以测试类型和测试次序进行区别，并且会按照整点和浮点进行划分。如果是按照正式reportable的模式进行测试的话，会出一份网页版的正式测试结果，参见下图：
非正式结果可以去asc或txt文档查看，格式例如下文：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                Base     Base       Base        Peak     Peak       Peak
Benchmarks      Ref.   Run Time     Ratio       Ref.   Run Time     Ratio
-------------- ------  ---------  ---------    ------  ---------  ---------
400.perlbench    9770      430         22.7 S    9770      339         28.8 S
400.perlbench    9770      429         22.8 *    9770      338         28.9 S
400.perlbench    9770      429         22.8 S    9770      339         28.8 *
401.bzip2        9650      559         17.3 *    9650      552         17.5 *
401.bzip2        9650      559         17.3 S    9650      553         17.5 S
401.bzip2        9650      560         17.2 S    9650      552         17.5 S
403.gcc          8050      374         21.5 S    8050      337         23.9 S
403.gcc          8050      367         22.0 *    8050      337         23.9 S
403.gcc          8050      366         22.0 S    8050      337         23.9 *
429.mcf          9120      187         48.9 S    9120      187         48.9 S
429.mcf          9120      188         48.6 *    9120      188         48.6 *
429.mcf          9120      211         43.2 S    9120      211         43.2 S
445.gobmk       10490      559         18.8 S   10490      542         19.4 S
445.gobmk       10490      559         18.8 S   10490      542         19.4 *
445.gobmk       10490      559         18.8 *   10490      541         19.4 S
456.hmmer        9330      213         43.8 S    9330      213         43.7 *
456.hmmer        9330      247         37.8 S    9330      214         43.6 S
456.hmmer        9330      214         43.5 *    9330      213         43.7 S
458.sjeng       12100      616         19.6 *   12100      574         21.1 *
458.sjeng       12100      617         19.6 S   12100      575         21.0 S
458.sjeng       12100      585         20.7 S   12100      574         21.1 S
462.libquantum  20720       14.2     1460   *   20720       14.2     1460   *
462.libquantum  20720       14.4     1440   S   20720       14.4     1440   S
462.libquantum  20720       13.5     1540   S   20720       13.5     1540   S
464.h264ref     22130      578         38.3 *   22130      527         42.0 S
464.h264ref     22130      579         38.2 S   22130      526         42.0 *
464.h264ref     22130      578         38.3 S   22130      526         42.0 S
471.omnetpp      6250      349         17.9 S    6250      288         21.7 *
471.omnetpp      6250      348         17.9 *    6250      288         21.7 S
471.omnetpp      6250      348         18.0 S    6250      289         21.7 S
473.astar        7020      313         22.4 S    7020      313         22.4 S
473.astar        7020      311         22.6 S    7020      311         22.6 S
473.astar        7020      311         22.6 *    7020      311         22.6 *
483.xalancbmk    6900      174         39.7 *    6900      170         40.7 S
483.xalancbmk    6900      174         39.6 S    6900      170         40.5 S
483.xalancbmk    6900      174         39.7 S    6900      170         40.6 *
==============================================================================
400.perlbench    9770      429         22.8 *    9770      339         28.8 *
401.bzip2        9650      559         17.3 *    9650      552         17.5 *
403.gcc          8050      367         22.0 *    8050      337         23.9 *
429.mcf          9120      188         48.6 *    9120      188         48.6 *
445.gobmk       10490      559         18.8 *   10490      542         19.4 *
456.hmmer        9330      214         43.5 *    9330      213         43.7 *
458.sjeng       12100      616         19.6 *   12100      574         21.1 *
462.libquantum  20720       14.2     1460   *   20720       14.2     1460   *
464.h264ref     22130      578         38.3 *   22130      526         42.0 *
471.omnetpp      6250      348         17.9 *    6250      288         21.7 *
473.astar        7020      311         22.6 *    7020      311         22.6 *
483.xalancbmk    6900      174         39.7 *    6900      170         40.6 *
 SPECint(R)_base2006                   36.7
 SPECint2006                           39.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Base Ratio为测试分值，该测试一般运行3遍取中值。整体结果为所有结果的几何平均值。&lt;/p&gt;
&lt;h4 id="ju-li-shuo-ming-spec-cpu2006chang-yong-ce-shi-ming-ling-zu-he"&gt;举例说明SPEC CPU2006常用测试命令组合&lt;/h4&gt;
&lt;p&gt;1．runspec -c test.cfg -i test -I all
基于最小测试数据集快速执行所有的测试，测试过程中如果某个用例发生错误，则跳过错误用例，继续执行其他用例。
2．runspec -c test.cfg -i ref -n 3 -I all
基于最大测试数据集全面执行所有的测试，用于测试单核CPU，测试过程中如果某个用例发生错误，则跳过错误用例，继续执行其他用例。
3．runspec -c test.cfg &amp;ndash;r ref &amp;ndash;n 3 fp
基于最大测试数据集，只运行fp测试
4．runspec -c test.cfg &amp;ndash;r ref &amp;ndash;n 3 int
基于最大测试数据集，只运行int测试
5.runspec -c test.cfg -i ref 473.astar
基于最大测试数据集只执行473.astar单个测试。
6 runspec &amp;ndash;c test.cfg &amp;ndash;i ref --rate 4 int
基于最大数据测试集进行rate测试，运行4线程测试的分值&lt;/p&gt;
&lt;h4 id="qi-ta-ming-ling-bu-chong"&gt;其他命令补充&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--action build 创建测试项目
--action onlyrun 只是运行，不进行确认测试结果是否正确
--action report 标准测试
--action clean  清理已经建立的测试项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模式很多，不再一一介绍。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--check_version 检查版本更新
--copies &amp;ndash;c number 默认1 用来进行SPECrate run
--help  显示帮助文档
--ignore_errors 忽略错误
ations number &amp;mdash;n 测试次数，一次reportable测试，必须是3次
--iter&amp;mdash;loose 未设置reportable测试
--output_format  输出文件格式 默认为html text 可以选择 all cfg  test csv  html mail pdf  ps  printer  raw screen   text 等多种方式。
--rate  -r  进行SPECspeed测试可以指定copies数量运行。
--rebuild 重新编译测试文件 
--tune tuning 默认是base 可以选择base, peak, or all ，Report 首先是base,其次是peak.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是比较常用的命令，一些不常用的命令不再介绍，可参考下文了解。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-a  Same as --action
--action action Do: build|buildsetup|clean|clobber|configpp| onlyrun|realclean|report|run|runsetup|scrub| setup|trash|validate
--basepeak  Copy base results to peak (use with --rawformat)
--nobuild   Do not attempt to build binaries
-c  Same as --config
-C  Same as --copies
--check_version Check whether an updated version of CPU2006 is available
--comment "text"    Add a comment to the log and the stored configfile.
--config file   Set config file for runspec to use
--copies    Set the number of copies for a SPECrate run
-D  Same as --rebuild
-d  Same as --deletework
--debug Same as --verbose
--define SYMBOL[=VALUE] Define a config preprocessor macro
--delay secs    Add delay before and after benchmark invocation
--deletework    Force work directories to be rebuilt
--dryrun    Same as --fake
--dry-run   Same as --fake
-e  Same as --extension
--ext   Same as --extension
--extension ext[,ext...]    Set the extensions
-F  Same as --flagsurl
--fake  Show what commands would be executed.
--fakereport    Generate a report without compiling codes or doing a run.
--fakereportable    Generate a fake report as if "--reportable" were set.
--[no]feedback  Control whether builds use feedback directed optimization
--flagupdate    Same as --update
--flagsupdate   Same as --update
--flagsurl url  Location (url or filespec) where to find your flags file
--getflags  Same as --update
--graph_auto    Let the tools pick minimum and maximum for the graph
--graph_min N   Set the minimum for the graph
--graph_max N   Set the maximum for the graph
-h  Same as --help
--help  Print usage message
--http_proxy    Specify the proxy for internet access
--http_timeout  Timeout when attempting http access
-I  Same as --ignore_errors
-i  Same as --size
--ignore_errors Continue with benchmark runs even if some fail
--ignoreerror   Same as --ignore_errors
......
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="shou-dong-bian-yi-ji-kua-ping-tai-yi-zhi-fang-fa-jin-gong-can-kao"&gt;手动编译及跨平台移植方法（仅供参考）&lt;/h4&gt;
&lt;p&gt;Spec2006包含的测试套件基本上与平台无关，因此理论上是可以直接进行跨平台进行测试。
Spec2006为了实现测试结果的准确及降低对平台的依赖，制作了自己的工具包。其中包括:
    specdiff（examines results to see if the correct answer was obtained）、specinvoke  (invokes benchmarks for CPU2006)、specmake（GNU make ，Calling it "specmake" avoids possible conflicts with versions of make that may already be on your system. SPEC requires that published results use the versions of the tools that it supplies, so that if SPEC applies patches or extensions from time to time, all users run with a consistent tool set. Similar considerations apply to other tools in this list.)、specxz     （The xz compression program）、specmd5sum（md5sum from GNU coreutils, with enhancements）、spectar（ GNU tar）、specperl（Perl）。Various Perl modules such as Algorithm::Diff, GD, HTML::Parser, PDF::API2, URI, XML::SAX, etc.。
编译工具：C99 编译器 C++编译器
如果是初始安装包，则需要解压源码包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# xz -dc install_archives/cpu2006.tar.xz | tar -xf - tools/src
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建立工具包的命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AIX (32-bit):
CC=xlc CFLAGS='-O -qarch=ppc -D_LARGE_FILES -D_ILS_MACROS' PERLFLAGS="-Doptimize='-O' -Accflags='-D_LARGE_FILES'" OBJECT_MODE=32 ./buildtools

AIX (64-bit):
CC=xlc CFLAGS='-O3 -qarch=ppc64 -q64 -D_ILS_MACROS' PERLFLAGS="-Doptimize='-O' -Aoptimize='-qarch=ppc64 -q64'" OBJECT_MODE=64 ./buildtools

HPUX:
CC="/opt/ansic/bin/cc" CFLAGS="-Ae +O2 +z -D_FILE_OFFSET_BITS=64 -AC99" XZCFLAGS=-AC99 PERLFLAGS="-Doptimize=+O1 -Dlibpth=/usr/lib/hpux32 -Dldflags=-lm -Dcppstdin=cc -Acppstdin=-E -Acppstdin=-Aa -Acppstdin=-D__STDC_EXT__ -Acppstdin=-AC89" ./buildtools

IRIX:
ulimit -s 128000; CFLAGS="-c99 -D_FILE_OFFSET_BITS=64" MD5CFLAGS="-O2" PERLFLAGS="-Doptimize=-O3 -Uloclib -Dlibpth=/usr/lib32" XZFLAGS="--disable-assembler --disable-shared" XZCFLAGS="-O1" ./buildtools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建立完成之后，确认是否成功的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;cd &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;SPEC&lt;/span&gt;&lt;span class="x"&gt; (Unix)&lt;/span&gt;
&lt;span class="x"&gt;.  shrc&lt;/span&gt;
&lt;span class="x"&gt;或 runspec -V&lt;/span&gt;
&lt;span class="x"&gt;或specmake -v&lt;/span&gt;
&lt;span class="x"&gt;specxz -h&lt;/span&gt;
&lt;span class="x"&gt;specperl -v&lt;/span&gt;
&lt;span class="x"&gt;specdiff &amp;ndash;h&lt;/span&gt;
&lt;span class="x"&gt;runspec -h&lt;/span&gt;
&lt;span class="x"&gt;specinvoke -h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;工具编译完成之后，需要对工具进行打包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;packagetools &amp;lt;archname&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果自动化编译出现问题，可以手动编译每个测试工具。编译方法为进入对应的工具包，手动编译。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Fri, 10 Oct 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-10-10:2014/10/10/linux/</guid><category>benchmark</category></item><item><title>Linux Test Project(一)</title><link>http://king32783784.github.io/2014/09/12/ltp/</link><description>&lt;body&gt;&lt;h1 id="testing-linux-one-syscall-at-a-time"&gt;Testing Linux, one syscall at a time.&lt;/h1&gt;
&lt;p&gt;LTP是从SGI开始的,后由IBM 思科 富士通 SUSE Redhat等组织开发的.该工具的目标是建立一个测试套件用来验证linux的可靠性,健壮性及稳定性.LTP测试套件包含了linux内核及相关功能的工具.&lt;/p&gt;
&lt;p&gt;本文主要介绍关于ltp的一些基本信息.&lt;/p&gt;
&lt;p&gt;LTP项目主页:&lt;a href="https://linux-test-project.github.io/#"&gt;ltp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github链接:&lt;a href="https://github.com/linux-test-project/ltp"&gt;ltp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LTP是一个验证ltp内核功能和稳定性的测试集.用来支持linux开发过程中,通过更多的单元测试,减少bug的引入,降低bug对用户的影响.LTP并不是用来做benchmarking测试的,而是更专注与功能,问题回归及稳定性测试.LTP同样不是一个标准测试,标准测试有&lt;a href="http://www.linuxbase.org/"&gt;LSB&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="yi-ji-ben-jie-gou"&gt;一 基本结构&lt;/h2&gt;
&lt;p&gt;LTP测试套件是由包含一个基本动作和一个确认基本动作工作是否正常的测试用例组成.这个测试用例通常的测试结果是PASS/FAIL.一个测试程序是包含一个或多个测试用例的可执行程序.测试程序包括相应的测试参数,这些参数包括内存测试容量,临时文件位置,网络测试类型等等.Test tags 是用于匹配测试程序和一组命令行参数.Test tags是测试集的基础.&lt;/p&gt;
&lt;h3 id="bian-xie-ce-shi"&gt;编写测试&lt;/h3&gt;
&lt;p&gt;编写一个测试用例比大多数想象的更容易.任何一个你编写用于验证内核功能的代码都可以用来形成一个用例.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试退出约定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常一个简单的判断一个测试用例执行结果的方式就是程序的返回值.如果你的测试程序没有得到一个预期结果或错误结果,程序退出是需要返回一个非零值,如exit1,
同样如果程序得到预期的结果,需要返回0,exit(0).一些测试驱动需要去收集这些返回值.如果一个测试程序包含多个测试用例,你不知道那个出错了,但你会知道程序出错了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式化输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个简单方式处理测试结果就是每个测试用例都输出一个标准格式的输出结果.这个格式需要是测试人员和分析工具都能理解的格式,当测试结果都按一个标准格式输出时工具就能够分析测试结果.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LTP目前没有一个最终的测试工具.我们选择了一个简单的解决方式ltp-pan.
 Ltp-pan是一个简单的测试驱动程序,它可以跟踪孤儿进程和抓取测试的输出信息.它工作方式是读取一个包括test tags和命令行列表的文件并执行.默认的ltp-pan会随机的从列表中选择命令执行,并等待其结束.可以通过选择多个命令行执行多个测试,在一定时间执行多个测试并且缓冲多个测试结果.这样Ltp-pan可以营造出复杂的测试环境.Ltp-pan使用一个活动文件,通常叫做zoo文件来保存哪些测试在运行.这个文件包括pid,tag以及命令行的一部分.当启动ltp-pan,它本身变成了自己的一个标签.当一个测试标签退出,ltp-pan会第一个字符加#的方式重写.这个活动文件可以在多个ltp-pan实例中共享,所以当系统崩溃时,你可以通过查看一个文件,了解哪个用例造成的.&lt;/p&gt;
&lt;p&gt;一个Ltp-pan文件包括一个测试tag列表.格式如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;testtag testprogram -o one -p two other command line options

# This is a comment. It is a good idea to describe the test

# tags in your ltp-pan file. Tests programs can have different

# behaviors depending on the command line options so it is

# helpful to describe what each test tag is meant to verify
or # provoke.

# Some more test cases

mm01 mmap001 -m 10000

# 40 Mb mmap() test.

# Creates a 10000 page mmap, touches all of the map, sync's

# it, and munmap()s it.

mm03 mmap001 -i 0 -I 1 -m 100

# repetitive mmapping test.

# Creates a one page map repetitively for one minute.

dup02 dup02

# Negative test for dup(2) with bad fd

kill09 kill09

# Basic test for kill(2)

fs-suite01 ltp-pan -e -a fs-suite01.zoo -n fs-suite01 -f runtest/fs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试例子&lt;/strong&gt;
运行一个测试基本方式是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ltp-pan -a ltp.zoo -n tutor sleep 4

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;971450564

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sleep 4"&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ok"&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103341903&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no &lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;

$ cat ltp.zoo

&lt;span class="c1"&gt;#9357,tutor,pan/ltp-pan -a ltp.zoo -n tutor sleep 4&lt;/span&gt;

&lt;span class="c1"&gt;#9358,cmdln,sleep 4&lt;/span&gt;

$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何实现的:
这个例子展示ltp-pan两个参数,一个活动文件,一个test tag. "sleep 4"测试程序及ltp-pan要执行的参数.这个测试会得到标记&amp;ldquo;cmdln&amp;rdquo;。 LTP-run将随机运行一个测试，最终被cmdln，因为指定了唯一测试.
在活动文件,ltp.zoo,ltp-pan写入pid,testlog,运行测试部分命令行.当test tag运行完成,ltp-pan会标记一个"#",代表它可以执行.这时,你能看到cmdln和tutor,如果测试机挡住,你可以读这些文件查找哪个测试导致的.&lt;/p&gt;
&lt;p&gt;同时运行一个测试多次.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ltp-pan -a ltp.zoo -n tutor -x &lt;span class="m"&gt;3&lt;/span&gt; -s &lt;span class="m"&gt;3&lt;/span&gt; -O /tmp sleep 1

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;971465653

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sleep 1"&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ok"&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;



&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103326814&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no

&lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;971465653

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sleep 1"&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ok"&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;



&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103326814&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no

&lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_start&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cmdln &lt;span class="nv"&gt;stime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;971465653

&lt;span class="nv"&gt;cmdline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sleep 1"&lt;/span&gt;

&lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nv"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;initiation_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ok"&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_output&amp;gt;&amp;gt;&amp;gt;



&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;execution_status&amp;gt;&amp;gt;&amp;gt;

&lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103326814&lt;/span&gt; &lt;span class="nv"&gt;termination_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited &lt;span class="nv"&gt;termination_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;corefile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;no

&lt;span class="nv"&gt;cutime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;cstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;test_end&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何工作的?
  在这个例子中运行了另一个命令行,但是测试执行了3遍(-s 3)并且保持了3个test tags在同一时间执行(-x 3). -O 参数是指定临时文件保存目录,并且为每个缓冲结果设定标签.可以看到cmdln运行了3次.如果 -O 没有指定,则3次结果被混合,就没有意义了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scanner&lt;/strong&gt;
Ltp-scanner 是一个测试结果分析工具,它可以理解rts风格的输出.最终生成一个汇总结果显示哪个用例pass,哪个用例fail.&lt;/p&gt;
&lt;p&gt;测试流程参见下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="img-responsive" src="https://king32783784.github.io/lipeng/tmpfile/ltp.gif"/&gt;&lt;/p&gt;
&lt;h2 id="er-ltpwen-jian-jie-gou_1"&gt;二.LTP文件结构&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;从 http://ltp.sourceforge.net/下载LTP测试源码包
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LTP的目录结构基本上分为文档目录（doc）、测试驱动程序目录（pan）、测试脚本目录（testscripts）、测试用例库（testcase）、测试命令文件目录（runtest）、头文件目录（include）、库目录（lib）等。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* Doc：该目录是说明文件和帮助文档的所在地，这个目录中对LTP的内容和每个工具都有详细的说明。
* Pan：该目录存储的是LTP测试套件的测试驱动程序pan。
* Testscripts：该目录中存储的是可执行的测试脚本，不同方面的测试脚本的集合。
* Testcase：该目录存储了所有LTP测试套件中所使用的测试用例的源码。
* Runtest：该目录中的每个文件都是要执行的测试用例的命令集合，每个文件针对测试的不同方面。
* Include：LTP测试套件的头文件目录，定义了LTP自身的数据结构和函数结构。
* Lib：LTP测试套件运行时自身需要的库文件，定义了LTP自身的各种函数。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各个文件结构之间的联系：
    ----&amp;gt;testscripts中ltpstress.sh
    ----&amp;gt;runtest(stress.part1,stress.part2,stress.part3)
    ----&amp;gt;pan后台运行
    ----&amp;gt;最终运行Testcase中的各个测试案例&lt;/p&gt;
&lt;p&gt;其中runtest中 stree.part1,stree.part2,stree.part3中的测试命令或脚本  如 mmstress；来源于testcase/bin 中mmstress；而testcase/bin 中mmstress 可执行脚本或命令来源于/testcase中如 kernel,network,   pounder21, commands 等源代码编译生成的， mmstress:kernel/mem/mtest05/mmstress.c&lt;/p&gt;
&lt;p&gt;stress.part&lt;a href="n=1,2,3"&gt;n&lt;/a&gt;中测试命令如何看？
这些命令文件包含测试用例的tag和带有参数的测使用里，格式如下：
    #tag       test case
    test1      test1 -l 10
    mtest01    mtest01 -m 20
    fork01     fork01&lt;/p&gt;
&lt;h2 id="san-ltpce-shi-fang-fa"&gt;三.LTP测试方法&lt;/h2&gt;
&lt;p&gt;测试方法有两个的阶段：一个是&amp;ldquo;初始测试&amp;rdquo;，一个是&amp;ldquo;压力测试&amp;rdquo;。
初始测试是开始测试的必要条件。初始测试包括 LTP 测试套件在硬件和操作系统上成功运转，这些硬件和操作系统将用于可靠性运转。LTP 测试套件包附带的驱动程序脚本 runalltest.sh 用于验证内核。这个脚本串行地运行一组成包的测试，并报告全部结果。也可以选择同时并行地运行几个实例。默认地，这个脚本执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* 文件系统压力测试。
* 硬盘 I/O 测试。
* 内存管理压力测试。
* IPC 压力测试。
* SCHED测试。
* 命令功能的验证测试。
* 系统调用功能的验证测试。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压力测试可以验证产品在系统高使用率时的健壮性。作为 runalltest.sh 的补充，特别设计了一个名为 ltpstress.sh 的测试场景，在使用网络与内存管理的同时并行地运行大范围的内核组件，并在测试系统上生成高压力负荷。ltpstress.sh 也是 LTP 测试套件的一部分。这个脚本并行地运行相似的测试用例，串行地运行不同的测试用例，这样做是为了避免由于同时访问同一资源或者互相干扰而引起的间歇性故障。默认地，这个脚本执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* NFS 压力测试。
* 内存管理压力测试。
* 文件系统压力测试。
* 数学 (浮点) 测试。
* 多线程压力测试。
* 硬盘 I/O 测试。
* IPC (pipeio, semaphore) 测试。
* 系统调用功能的验证测试。
* 网络压力测试。
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="si-ce-shi-zu-he-de-xuan-ze"&gt;四.测试组合的选择&lt;/h2&gt;
&lt;p&gt;所选择的测试的组合必须给系统的资源带来足够的压力。Linux 内核的四个主要方面可以影响系统的 响应和执行时间：
　　
&lt;em&gt; CPU：用于在机器的 CPU（s）上处理数据的时间。
&lt;/em&gt; Memory：用于自真实存储器中读写数据的时间。
&lt;em&gt; I/O：用于自磁盘存储器读写数据的时间。
&lt;/em&gt; Networking：用于自网络读写数据的时间。&lt;/p&gt;
&lt;p&gt;系统资源利用率评价阶段通常需要多次尝试才能得到合适的测试组合，并得到期望水平的利用率。在这个评价过程中，sar 工具也应该在运行。在评价运行的结论中，您应该收集并评价所有四种资源的利用率水平。
      具体的测试组合修改方法。&lt;/p&gt;
&lt;p&gt;修改方法一：
       runtest中 stress.part1,stress.part2,stress.part3。&lt;/p&gt;
&lt;p&gt;如修改stress.part1中有这样一个测试mem02，根据阅读testcases/kernel/mem/mem／mem02.c 源代码，可将他修改为mem02 -m 15,意思是测试15m内存。
同样的也可以在 stress.part1,stress.part2,stress.part3 中添加、删除一些测试，
如我们测试时就把
stress.part3中关于swap交换分区的去掉&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#swapoff01 swapoff01
#swapoff02 swapoff02
#swapon01 swapon01
#swapon02 swapon02
#swapon03 swapon03
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改方法二：&lt;/p&gt;
&lt;p&gt;前面提到的初始测试或者压力测试都是测试的默认的，如果想测试其他的或者自己的测试案例，需要修改testcase的&lt;/p&gt;
&lt;p&gt;Makefile,因为通过它的Makefile可以看到&lt;/p&gt;
&lt;p&gt;SUBDIRS = &lt;code&gt;ls */Makefile | sed "s/Makefile//g" | grep -v open | grep -v pounder | grep -v DOTS | grep -v kdump | grep -v realtime&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;sed 's//:/ /g' :想把文本中的冒号替换成空格&lt;/p&gt;
&lt;p&gt;grep -v:显示所有与指定模式不匹配的行     &lt;/p&gt;
&lt;p&gt;也就是说open,pounder,DOTS,kdump,realtime没有测试，当然你可以选上或者，添加上自己的测试案例。&lt;/p&gt;
&lt;h2 id="wu-gong-ju-jie-shao"&gt;五.工具介绍&lt;/h2&gt;
&lt;p&gt;Gcov,lcove：&lt;/p&gt;
&lt;p&gt;分析代码覆盖率&lt;/p&gt;
&lt;p&gt;sar:
帮助我们掌握系统资源的使用情况，特别是内存和CPU 的使用情况，
是UNIX系统使用者应该掌握的工具之一
在我们的测试中，sar工具每 10 秒(当然时间间隔可以修改)钟截取一次系统利用率的快照，并保存到结果文件。
针对sar生成的sar.data使用方法：
    sar -u sar.data  //查看cpu使用情况
    sar -r sar.data  //看看memory,swap使用情况
     &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;
Top:&lt;/p&gt;
&lt;p&gt;跟sar差不多的功能，这里我们就用sar 了。&lt;/p&gt;
&lt;h2 id="qi-ta"&gt;其他&lt;/h2&gt;
&lt;p&gt;什么是稳定性和可靠性？&lt;/p&gt;
&lt;p&gt;稳定性反映的是系统不会出现异常情况；可靠性反映的是系统能够保持正常运行而不受外界影响的能力。
系统的稳定性和可靠性通常以连续运转时间和系统的可靠运行时间来度量。&lt;/p&gt;
&lt;p&gt;什么是压力测试？&lt;/p&gt;
&lt;p&gt;压力测试是一种破坏性的测试，即系统在非正常的、超负荷的条件下的运行情况 。用来评估在超越最大负载的情况下系统将如何运行，是系统在正常的情况下对某种负载强度的承受能力的考验 。&lt;/p&gt;
&lt;p&gt;为什么要进行压力测试？&lt;/p&gt;
&lt;p&gt;通常我们用压力测试来判断系统的稳定性和可靠性。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Fri, 12 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-09-12:2014/09/12/ltp/</guid><category>自动化测试</category></item><item><title>Reboot test脚本</title><link>http://king32783784.github.io/2014/03/01/stablity/</link><description>&lt;body&gt;&lt;p&gt;为了验证操作系统启动的稳定性，需要进行500次启动测试，便写了脚本实现。&lt;/p&gt;
&lt;p&gt;脚本如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;HOME=`pwd`&lt;/span&gt;
&lt;span class="x"&gt;sleep 15&lt;/span&gt;
&lt;span class="x"&gt;desktop_x86_4x()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;if [ ! -f /etc/reboot.sh ];then&lt;/span&gt;
&lt;span class="x"&gt;    cp -rf &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/reboot.sh /etc/&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;span class="x"&gt;if grep "reboot.sh" /etc/profile &amp;gt; /dev/null;&lt;/span&gt;
&lt;span class="x"&gt;then&lt;/span&gt;
&lt;span class="x"&gt;   break;&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;   echo "/bin/sh /etc/reboot.sh &amp;amp;" &amp;gt;&amp;gt; /etc/profile&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;span class="x"&gt;if id rebootuser &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then&lt;/span&gt;
&lt;span class="x"&gt;break&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;useradd rebootuser&lt;/span&gt;
&lt;span class="x"&gt;passwd rebootuser &amp;lt;&amp;lt; TEST&lt;/span&gt;
&lt;span class="x"&gt;abc123&lt;/span&gt;
&lt;span class="x"&gt;abc123&lt;/span&gt;
&lt;span class="x"&gt;TEST&lt;/span&gt;
&lt;span class="x"&gt;echo "[Autologin]" &amp;gt;&amp;gt; /etc/sddm.conf&lt;/span&gt;
&lt;span class="x"&gt;echo "Session=plasma.desktop" &amp;gt;&amp;gt; /etc/sddm.conf&lt;/span&gt;
&lt;span class="x"&gt;echo "User=rebootuser" &amp;gt;&amp;gt; /etc/sddm.conf&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;if id rebootuser &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then&lt;/span&gt;
&lt;span class="x"&gt;    break&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;    desktop_x86_4x&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;

&lt;span class="x"&gt;if [ ! -f /etc/tmpbash ];then&lt;/span&gt;
&lt;span class="x"&gt;    echo &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;1 &amp;gt;&amp;gt; /etc/tmpbash&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;

&lt;span class="x"&gt;if [ ! -f /home/rebootuser/reboot.log ]; then&lt;/span&gt;
&lt;span class="x"&gt;    echo "Total=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;1 , Times=0 , start at `date`" &amp;gt;&amp;gt; /home/rebootuser/reboot.log&lt;/span&gt;
&lt;span class="x"&gt;    chmod 777 /home/rebootuser/reboot.log&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;

&lt;span class="x"&gt;times=`cat /etc/tmpbash`&lt;/span&gt;

&lt;span class="x"&gt;n=`cat /home/rebootuser/reboot.log | awk -F, '&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;print &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;2}' | awk -F= '&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;print &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;2}' | tail -1`&lt;/span&gt;
&lt;span class="x"&gt;if (( &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="x"&gt; &amp;lt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;times&lt;/span&gt;&lt;span class="x"&gt; ));then&lt;/span&gt;
&lt;span class="x"&gt;    N=&lt;/span&gt;&lt;span class="p"&gt;$(($&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    echo " Total=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;times&lt;/span&gt;&lt;span class="x"&gt; , Times=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="x"&gt; , reboot at `date`" &amp;gt;&amp;gt; /home/rebootuser/reboot.log&lt;/span&gt;
&lt;span class="x"&gt;    sleep 60&lt;/span&gt;
&lt;span class="x"&gt;    reboot&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;    rm /etc/reboot.sh&lt;/span&gt;
&lt;span class="x"&gt;    sed -i '&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="x"&gt;' /etc/profile&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Sat, 01 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2014-03-01:2014/03/01/stablity/</guid><category>shell</category></item><item><title>快速排序</title><link>http://king32783784.github.io/2013/07/01/sort/</link><description>&lt;body&gt;&lt;h4 id="kuai-su-pai-xu"&gt;快速排序&lt;/h4&gt;
&lt;p&gt;对于一个给定的数组，从中选择一个元素，以该元素为界将其余元素划分为两个子集，
一个子集的所有元素都小于该元素，另一个子集的元素都大于或等于该元素，
对两个子集递归执行这一过程，当某个子集中的元素小于二时，
这个子集就不需要再次排序，终止递归。&lt;/p&gt;
&lt;h4 id="dai-ma-shi-xian-ji-ce-shi"&gt;代码实现及测试&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//将中点的元素作为比较元素，放到整个数组的最左边&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//last位置放的将是比较元素，左边全是比它小的元素&lt;/span&gt;
        &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//对子集1进行递归调用&lt;/span&gt;
        &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//对子集2进行递归调用&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-07-01:2013/07/01/sort/</guid><category>算法</category></item><item><title>高性能计算机系统浮点性能测试</title><link>http://king32783784.github.io/2013/06/12/linpack/</link><description>&lt;body&gt;&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/P5LS1TUY3V.jpg" width="420"/&gt;&lt;/p&gt;
&lt;h3 id="yi-gong-ju-jie-shao"&gt;一　工具介绍&lt;/h3&gt;
&lt;p&gt;Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark。通过利用高性能计算机，用高斯消元法求解N元一次稠密线性代数方程组的测试，评价高性能计算机的浮点性能。HPL是针对现代并行计算机提出的测试方式。用户在不修改任意测试程序的基础上，可以调节问题规模大小N(矩阵大小)、使用到的CPU数目、使用各种优化方法等来执行该测试程序，以获取最佳的性能。HPL采用高斯消元法求解线性方程组。当求解问题规模为N时，浮点运算次数为(2/3 * N^3－2&lt;em&gt;N^2)。因此，只要给出问题规模N，测得系统计算时间T，峰值=计算量(2/3 * N^3－2&lt;/em&gt;N^2)/计算时间T，测试结果以浮点运算每秒（Flops）给出。
实测浮点峰值是指Linpack测试值，也就是说在这台机器上运行Linpack测试程序，通过各种调优方法得到的最优的测试结果。实际上在实际程序运行过程中，几乎不可能达到实测浮点峰值，更不用说达到理论浮点峰值了。这两个值只是作为衡量机器性能的一个指标，用来表明机器处理能力的一个标尺和潜能的度量。&lt;/p&gt;
&lt;p&gt;HPL作为一个基准测试程序在HPC领域取得了巨大的成功。它对趋势进行了准确的预测，积累的优化技巧对于提高实际应用的性能发挥了重要的作用。但是，随着应用的发展，它与实际应用之间的相关性在逐渐降低，需要寻找替代者。但并不支持淘汰HPL。HPL提供给我们的历史经验数据相当的宝贵，并且HPL促进了HPC应用范围的扩大，这些重要作用都决定了HPL不会被淘汰。HPCG将会作为TOP500排名一个可供选择的基准测试，就像Green500排名一样，重新排名HPC系统。HPCG最诱人的地方就是它包含在实际应用中广泛使用的关键的通讯和计算模式，而且足够简单。HPCG不仅具有实际的数值意义，而且非常容易被大家理解和接受。我们将会在现有和即将出现的平台上，针对实际的应用程序，完成HPCG的验证和校验。验证和校验过程将会提高HPCG的质量，使之逐渐成为一个被大家广泛认可的基准测试程序。&lt;/p&gt;
&lt;h3 id="er-bian-yi-an-zhuang"&gt;二　编译安装&lt;/h3&gt;
&lt;h4 id="1mpich2gotoblas2hpl"&gt;１.mpich2+GotoBLAS2+hpl&lt;/h4&gt;
&lt;h5 id="mpichan-zhuang"&gt;mpich安装&lt;/h5&gt;
&lt;p&gt;普华服务器版本iSoftServerOS3.0_x86-64_Build4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.mpich.org/static/downloads/1.0.8/mpich2-1.0.8.tar.gz
#tar zxf mpich2-1.0.8.tar.gz
#cd mpich2-1.0.8
# ./configure
# make
# make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普华桌面版本iSoftClientOS3.0SP1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vi /etc/pacman.d/mirrorlist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加SigLevel = Never&amp;rdquo;一行&lt;/p&gt;
&lt;p&gt;修改地址&amp;ldquo;Server = http://ftp.isoft.zhcn.cc/&lt;span class="math"&gt;\(repo/os/\)&lt;/span&gt;arch&amp;rdquo;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pacman -Rdd gcc-multilib
#pacman -Sy gcc-fortran
#wget http://www.mpich.org/static/downloads/1.0.8/mpich2-1.0.8.tar.gz

#tar zxf mpich2-1.0.8.tar.gz
#cd mpich2-1.0.8
# ./configure
# make
# make install
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="gotoblas-2an-zhuang"&gt;GotoBlas 2安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;wget&lt;/span&gt;&lt;span class="x"&gt; https://www.tacc.utexas.edu/documents/1084364/1087496/GotoBLAS2-1.13.tar.gz/b58aeb8c-9d8d-4ec2-b5f1-5a5843b4d47b&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="x"&gt; TARGET=NEHALEM&lt;/span&gt;

&lt;span class="x"&gt;For PPC&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;vi&lt;/span&gt;&lt;span class="x"&gt; cpuid_power.c &lt;/span&gt;
&lt;span class="x"&gt;if (!strncasecmp(p, "POWER6", 6)) return CPUTYPE_POWER6;&lt;/span&gt;
&lt;span class="x"&gt;POWER6改为POWER8&lt;/span&gt;
&lt;span class="x"&gt;POWER6与POWER8存在差异，部分参数可能需要调整&lt;/span&gt;

&lt;span class="x"&gt;安装过程中需要lapack-3.1.1.tgz，如果测试机没有外网，请手动下载后放到&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;目录&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="x"&gt; TARGET=POWER BINARY=64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="hplan-zhuang"&gt;HPL安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.netlib.org/benchmark/hpl/hpl-2.1.tar.gz
#tar -zxf hpl-2.1.tar.gz
#cd cd hpl-2.1
#cp ./setup/Make.Linux_PII_FBLAS ./Make.goto
#vi Make.goto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改Make.goto文件
以下斜体部分是Make.goto文件的内容，//后为解释部分。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;ldquo;&lt;/span&gt;
&lt;span class="nv"&gt;ARCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; goto        //名字需和Make.goto的尾缀名字一致
&lt;span class="nv"&gt;TOPdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/linpack-x86/hpl-2.1    //hpl源码所在目录
&lt;span class="nv"&gt;MPdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/linpack-x86/mpich2-1.0.8    //mpich2源码所在目录
&lt;span class="nv"&gt;LAdir&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/Bench/GotoBLAS2    // GotoBlas源码的目录
&lt;span class="nv"&gt;LAlib&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LAdir&lt;span class="k"&gt;)&lt;/span&gt;/libgoto2.a     // GotoBlas静态库
&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; /usr/bin/mpicc       //mpicc的绝对路径
&lt;span class="nv"&gt;LINKER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; /usr/bin/mpif77     //mpif77绝对路径  &amp;rdquo;

&lt;span class="c"&gt;#make arch=Goto&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2openmpiblashpl_1"&gt;2.openmpi+BLAS+hpl&lt;/h4&gt;
&lt;h5 id="openmpian-zhuang"&gt;Openmpi安装&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.open-mpi.org/software/ompi/v1.7/downloads/openmpi-1.7.2.tar.bz2
#tar xf openmpi-1.7.2.tar.bz2
# ./configure --prefix=/shared/openmpi/openmpi-1.7.2 --enable-orterun-prefix-by-default
# make 
#make install
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="blas"&gt;BLAS&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# wget http://www.netlib.org/lapack/lapack-3.4.2.tgz
#tar zxf lapack-3.4.2.tgz
#cd lapack-3.4.2
#cp INSTALL/make.inc.gfortran ./make.inc
#make blaslib
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="hpl"&gt;HPL&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://www.netlib.org/benchmark/hpl/hpl.tgz
#tar zxf hpl.tgz
#cd hpl-2.1
#cp setup/Make.Linux_PII_FBLAS ./Make.ompi17
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改Make.ompi17 注：部分绝对路径根据实际环境做相应调整&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;"--- setup/Make.Linux_PII_FBLAS    &lt;/span&gt;
&lt;span class="s2"&gt;+++ Make.ompi17&lt;/span&gt;
&lt;span class="s2"&gt;@@ -64 +64 @@&lt;/span&gt;
&lt;span class="s2"&gt;-ARCH         = Linux_PII_FBLAS&lt;/span&gt;
&lt;span class="s2"&gt;+ARCH         = ompi17&lt;/span&gt;
&lt;span class="s2"&gt;@@ -70 +70 @@&lt;/span&gt;
&lt;span class="s2"&gt;-TOPdir       = $(HOME)/hpl&lt;/span&gt;
&lt;span class="s2"&gt;+TOPdir       = /home/testtool-gcc-ppc/hpc-mpi/lapack-3.4.2/hpl-2.1&lt;/span&gt;
&lt;span class="s2"&gt;@@ -84 +84 @@&lt;/span&gt;
&lt;span class="s2"&gt;-MPdir        = /usr/local/mpi&lt;/span&gt;
&lt;span class="s2"&gt;+MPdir        = /shared/openmpi/openmpi-1.7.2/&lt;/span&gt;
&lt;span class="s2"&gt;@@ -86 +86 @@&lt;/span&gt;
&lt;span class="s2"&gt;-MPlib        = $(MPdir)/lib/libmpich.a&lt;/span&gt;
&lt;span class="s2"&gt;+MPlib        =&lt;/span&gt;
&lt;span class="s2"&gt;@@ -95 +95 @@&lt;/span&gt;
&lt;span class="s2"&gt;-LAdir        = $(HOME)/netlib/ARCHIVES/Linux_PII&lt;/span&gt;
&lt;span class="s2"&gt;+LAdir        =/home/testtool-gcc-ppc/hpc-mpi/lapack-3.4.2&lt;/span&gt;
&lt;span class="s2"&gt;@@ -97 +97 @@&lt;/span&gt;
&lt;span class="s2"&gt;-LAlib        = $(LAdir)/libf77blas.a $(LAdir)/libatlas.a&lt;/span&gt;
&lt;span class="s2"&gt;+LAlib        =  $(LAdir)/librefblas.a&lt;/span&gt;
&lt;span class="s2"&gt;@@ -169 +169 @@&lt;/span&gt;
&lt;span class="s2"&gt;-CC           = /usr/bin/gcc&lt;/span&gt;
&lt;span class="s2"&gt;+CC           = /shared/openmpi/openmpi-1.7.2/bin/mpicc&lt;/span&gt;
&lt;span class="s2"&gt;@@ -176 +176 @@&lt;/span&gt;
&lt;span class="s2"&gt;-LINKER       = /usr/bin/g77&lt;/span&gt;
&lt;span class="s2"&gt;+LINKER       = /shared/openmpi/openmpi-1.7.2/bin/mpif90&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;#make arch=ompi17&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.运行时可能会出现找到mpi库的问题，请将mpi库移动到/lib64或修改程序库搜索路径。

2.如果Openmpi启动失败，可以采用mpich2+BLAS+hpl进行编译测试。
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="san-ce-shi-zhi-xing_1"&gt;三.测试执行&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.测试调优参数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试参数保存在HPL.out文件，修改参数时，直接修改HPL.out文件。HPL文件内容如下，注：斜体部分为文本内容，//号为解释部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HPL.out      output file name (if any)  //输出文件名，同下一行一起设定

6            device out (6=stdout,7=stderr,file)  //6标准输出，7标准错误输出，file可以设定为保存至特定文件，文件名上一行设定

4            # of problems sizes (N)//选择测试规模的数量

29 30 34 35  Ns   //计算规模的大小,一般规模越大，得出的结果越优，但规模越大，占用的内存也就越大，对系统造成的影响也越明显。所以，一般根据实际物理内存大小进行计算：N*N*8=内存总量*0.8

1            # of NBs //分块矩阵的数量

1 2 3 4      NBs //分块矩阵的大小，HPL采用分块矩阵的算法。分块的大小对性能有很大的影响，NB的选择和软硬件许多因素密切相关。NB值的选择主要是通过实际测试得到最优值，一般在256以下，NB &amp;times; 8最好为
Cache line的倍数。

0 PMAP process mapping (0=Row-,1=Column-major)  //选择处理器阵列是列的排列方式还是按行的排列方式。按列的排列方式适用于节点数较多、每个节点内CPU数较少的系统；而按行的排列方式适用于节点数较少、每个节点内CPU数较多系统。在机群系统上，按列的排列方式的性能远好于按行的排列方式。

1            # of process grids (P x Q) //选择测试线程类型的数量

1 1 4        Ps

1 4 1        Qs    //二维处理器网格（P &amp;times; Q），P &amp;times; Q = 系统CPU数 = 进程数。P&amp;le;Q，一般来说，P的值尽量取得小一点，因为列向通信量（通信次数和通信数据量）要远大于横向通信（和实际CPU物理阵列有关）。P = 2n，即P最好选择2的幂。HPL中，L分解的列向通信采用二元交换法（Binary Exchange），当列向处理器个数P为2的幂时，性能最优。例如，当系统进程数为4的时候，P &amp;times; Q选择为1 &amp;times; 4的效果要比选择2 &amp;times; 2好一些。 这主要取决于CPU物理互联网络。在集群测试中，P &amp;times; Q  系统CPU总核数

16.0         threshold   //测试的精度，保持默认即可

1            # of panel fact  //选PFACTS算法的方式，可以进行试验进行选择

0 1 2        PFACTs (0=left, 1=Crout, 2=Right)// 用PFACTs算法对nn列作消元

2            # of recursive stopping criterium //选择NBMINS的值，递归L分解

2 4          NBMINs (&amp;gt;= 1) //设定NBMINS的值，一般推荐2、4、8

1            # of panels in recursion  //选择NDIVS的值

2            NDIVs  //设定NDIVS的值

1            # of recursive panel fact.  //选择PFACTs算法

0 1 2        RFACTs (0=left, 1=Crout, 2=Right)


1            # of broadcast    //选择L的横向广播方式


0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)  // HPL提供六种广播方式。其中前四种适合于快速网络；后两种采用将数据切割后传送的方式，主要适合于速度较慢的 网络。前四种算法，分别采用单环/双环、第一列处理器不优先/优先。 01234567t=0t=1t=2t=3t=4t=5t=6t=70)Increasing-ring:单环,不优先01234567t=0,1t= 2t=3t=4t=5t=6t=71)Increasing-ring(M):单环,优先01234567t=0,1t=1t=2t=3t=2t=3t= 4t=52)Increasing-2-ring:双环,不优先01234567t=0,1,2t=2t=3t=3t=4t=5t=63) Increasing-2-ring(M):双环,优先。对于系统规模较小、处理器数（进程数）较少的系统来说，这四个选择对性能影响很小。对于横向处理器数Q较大的网络来来说，选择双环可以减少横向通信宽度，较小横向通信延迟。另外，第一列处理器优先算法也可以确保下一次L分解的尽早开始。在小规模系统中，一般选择0或1；对于大规模系统，一般选3


1            # of lookahead depth //选择横向通信的通信深度


0            DEPTHs (&amp;gt;=0)  // DEPTHs＝0表明将L一次性广播出去，也就是将整个L分解完成以后在一次性广播； DEPTHs＝1表示将L分两次广播；依此类推.小规模系统中，DEPTHs一般选择1或2；对于大规模系统，选择2～5之间


2            SWAP (0=bin-exch,1=long,2=mix)


64           swapping threshold  // U的广播为列向广播，HPL共提供了三种U的广播算法：二元交换（Binary Exchange）法、Long法和二者混合法。SWAP=&amp;ldquo;0&amp;rdquo;，采用二元交换法；SWAP=&amp;ldquo;1&amp;rdquo;，采用Long法；SWAP=&amp;ldquo;2&amp;rdquo;，采用混合法。二元交换法的通信开销为㏒2P&amp;times;（Latency＋NB&amp;times;LocQ（N）/Bandwith），适用于通信量较小的情况；Long法的通信开销为（㏒2P＋ P－1）&amp;times;Latency＋K&amp;times;NB&amp;times;LocQ（N）/Bandwith，适用于通信量较大的情况。其中P为列向处理器数，Latency为网络延迟， Bandwith为网络带宽，K为常数，其经验值约为2.4。LocQ（N）＝NB&amp;times;NN为通信量，NN随着求解过程的进行逐步减少。由于NN在求解过程中在不断的变化，为了充分发挥两种算法的优势，HPL提供了混合法，当NN&amp;le;swapping threshold（第27行指定）时，采用二元交换；否则采用Long法。一般来说，我们选择混合法，阈值可通过公式求得一个大概值。对于小规模系统来说，此值性能影响不大，采用其缺省值即可。


0            L1 in (0=transposed,1=no-transposed) form  //选择L的数据存放方式


0          U  in (0=transposed,1=no-transposed) form   //选择U的数据存放格式。C语言矩阵在内存是按行存放的，Fortran语言是按列存放的。由于HPL采用C语言书写，而调用的BLAS库有可能采用C语言，也有可能采用Fortran语言编写。若选择&amp;ldquo;transposed&amp;rdquo;，则采用按列存放，否则按行存放。可以根据实际测试进行选择。


1            Equilibration (0=no,1=yes)  //选择是否回代，默认即可


8            memory alignment in double (&amp;gt; 0)  // 内存分配中作地址对齐,根据实际测试结果选择
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2dan-he-dan-xian-cheng"&gt;2.单核单线程&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#cd /home/linpack-x86/hpl-2.1/bin/goto
#vi HPL.dat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置PQ值为1x1&lt;/p&gt;
&lt;p&gt;物理内存为8G，设置规模大小为28800&lt;/p&gt;
&lt;p&gt;其余值可以保持默认，测试时，可以根据实际物理平台，进行试验，进行选择。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#./xhpl
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3duo-he-duo-xian-cheng"&gt;3.多核多线程&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# echo secretword=abc123 &amp;gt; /etc/mpd.conf&lt;/span&gt;

&lt;span class="c1"&gt;#chmod 600 /etc/mpd.conf&lt;/span&gt;

&lt;span class="c1"&gt;#mpd&amp;amp;&lt;/span&gt;

&lt;span class="err"&gt;注：普华服务器系统&lt;/span&gt;&lt;span class="n"&gt;iSoftServerOS3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;_x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="n"&gt;_Build4&lt;/span&gt; &lt;span class="err"&gt;启动&lt;/span&gt;&lt;span class="n"&gt;mpd&lt;/span&gt;&lt;span class="err"&gt;时会出现以下提示：&lt;/span&gt;

&lt;span class="err"&gt;&amp;ldquo;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ne"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;popen2&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deprecated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;popen2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpdlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ne"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deprecated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;from  md5       import  new as md5new&amp;rdquo;&lt;/p&gt;
&lt;p&gt;应该为python版本问题造成，可以降低python版本或忽略该问题。&lt;/p&gt;
&lt;p&gt;CPU实际的物理核数为4.修改hpl文件中的PQ值为1x4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpirun -np 4 ./xhpl
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4da-ye-mo-shi-ce-shi"&gt;4.大页模式测试&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#umount /mnt
#mount -t hugetlbfs none /mnt
#echo 3 &amp;gt; /proc/sys/vm/drop_caches
#cat /proc/meminfo | grep Hugepagesize // iSoftServerOS3.0_x86-64_Build4的单页大小为2048KB
#echo 3276&amp;gt; /proc/sys/vm/nr_hugepages //实际物理内存为8G，大页面数量应该为8Gx0.8x1024/2=3276
# echo secretword=abc123 &amp;gt; /etc/mpd.conf
#chmod 600 /etc/mpd.conf 
#mpd&amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CPU实际的物理核数为4.修改hpl文件中的PQ值为1x4
修改规模大小：N&lt;em&gt;N&lt;/em&gt;8=3276&lt;em&gt;2&lt;/em&gt;1024&lt;em&gt;1024&lt;/em&gt;0.8
N设定为26112&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpirun -np 4 ./xhpl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：此处调用的xhpl，需对hpl代码进行修改，使其调用hugpage&lt;/p&gt;
&lt;h4 id="5ji-qun-ce-shi"&gt;5.集群测试&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#echo secretword=abc123 &amp;gt; /etc/mpd.conf
#chmod 600 /etc/mpd.conf
注：每个Node都必须添加该文件，并且正确设置该文件的权限
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面以2个节点进行测试说明。
设定每个节点的名字&lt;/p&gt;
&lt;p&gt;临时修改hostname方法：&lt;/p&gt;
&lt;p&gt;设定主节点为node0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#hostname node0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定第1个次节点为node1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#hostname node1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;永久修改hostname方法：&lt;/p&gt;
&lt;p&gt;iSoftServerOS3.0_x86-64_Build4 平台&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vi /etc/sysconfig/network
修改HOSTNAME=node0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;iSoftClientOS3.0 SP1 平台&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vi /etc/hostname
输入 node0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置主机名与ip地址映射&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#vi /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主节点node0 添加如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;ldquo;192.168.32.165 node0
192.168.32.171 node1&amp;rdquo;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Node1添加如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;ldquo;192.168.32.165 node0
192.168.32.171 node1&amp;rdquo;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置免密码登录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#ssh-keygen -t rsa
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连续点击enter键&lt;/p&gt;
&lt;p&gt;将主节点node0的公钥文件复制到集群的node1节点上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#scp /root/.ssh/id_rsa.pub root@node1:/root
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;登录到节点node1上，将主节点的公钥信息追加到/root/.ssh/authorized_keys文件中，并设置authorized_keys的权限，顺序执行以下两条命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@node1 ~]#cat id_rsa.pub &amp;gt;&amp;gt; .ssh/authorized_keys 
[root@node1 ~]#chmod 600 .ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Node1，方法同步骤（1）-（3），即在每个节点上都生成一对公私密钥，并且将各自的公钥信息追加到主节点的/root/.ssh/authorized_keys文件中。 
设置完成后验证一下节点之间是否可以实现无密码登录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#ssh root@node1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;无需输入密码，可以直接登录。&lt;/p&gt;
&lt;p&gt;将主节点node0系统中的hpl文件复制到其他节点相同目录位置&lt;/p&gt;
&lt;p&gt;[root@node0 home]#scp -r linpack-x86 root@node1:/home/&lt;/p&gt;
&lt;p&gt;在主节点的hpl目录下新建mpd.hosts文件&lt;/p&gt;
&lt;p&gt;内容如下：
&amp;ldquo;node1
node2&amp;rdquo;&lt;/p&gt;
&lt;p&gt;分别在各节点启动mpd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpd &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主节点启动集群系统&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@node0 goto]#mpdboot -n 2 -f mpd.hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行测试&lt;/p&gt;
&lt;p&gt;2个节点总核数为8，PQ值设定为8*1&lt;/p&gt;
&lt;p&gt;规模大小以集群总内存进行计算，设定为29184&lt;/p&gt;
&lt;p&gt;注:如果内存不一致，一般以最小内存的倍数进行计算&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@node0 goto]#mpiexec -n 8 ./xhpl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意确保网络连通，如果出现网络断开，则测试失败。&lt;/p&gt;
&lt;h4 id="4ce-shi-jie-guo-fen-xi"&gt;4.测试结果分析&lt;/h4&gt;
&lt;p&gt;测试结果的常见输出信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;================================================================================
HPLinpack 2.1  --  High-Performance Linpack benchmark  --   October 26, 2012
Written by A. Petitet and R. Clint Whaley,  Innovative Computing Laboratory, UTK
Modified by Piotr Luszczek, Innovative Computing Laboratory, UTK
Modified by Julien Langou, University of Colorado Denver
================================================================================

An explanation of the input/output parameters follows:
T/V    : Wall time / encoded variant.
N      : The order of the coefficient matrix A.
NB     : The partitioning blocking factor.
P      : The number of process rows.
Q      : The number of process columns.
Time   : Time in seconds to solve the linear system.
Gflops : Rate of execution for solving the linear system.

The following parameter values will be used:

N      :   17280 
NB     :     256 
PMAP   : Row-major process mapping
P      :       1 
Q      :       1 
PFACT  :    Left 
NBMIN  :       2 
NDIV   :       2 
RFACT  :    Left 
BCAST  :   1ring 
DEPTH  :       0 
SWAP   : Mix (threshold = 64)
L1     : transposed form
U      : transposed form
EQUIL  : yes
ALIGN  : 8 double precision words

--------------------------------------------------------------------------------

- The matrix A is randomly generated for each test.
- The following scaled residual check will be computed:
      ||Ax-b||_oo / ( eps * ( || x ||_oo * || A ||_oo + || b ||_oo ) * N )
- The relative machine precision (eps) is taken to be               1.110223e-16
- Computational tests pass if scaled residuals are less than                16.0

================================================================================
T/V                N    NB     P     Q               Time                 Gflops
--------------------------------------------------------------------------------
WR00L2L2       17280   256     1     1              75.77              4.541e+01  //测试结果
HPL_pdgesv() start time Sun Jan  4 09:33:11 2015

HPL_pdgesv() end time   Sun Jan  4 09:34:27 2015

--------------------------------------------------------------------------------
||Ax-b||_oo/(eps*(||A||_oo*||x||_oo+||b||_oo)*N)=        0.0050103 ...... PASSED
================================================================================

Finished      1 tests with the following results:
              1 tests completed and passed residual checks,
              0 tests completed and failed residual checks,
              0 tests skipped because of illegal input values.
--------------------------------------------------------------------------------

End of Tests.
================================================================================
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中4.541e+01Gflops为测试结果，表示Linpack测试浮点值为45.41 Gflops&lt;/p&gt;
&lt;p&gt;由此可以计算该系统的效率。以此次测试为例：&lt;/p&gt;
&lt;p&gt;该平台所用CPU为 Intel(R) Core(TM) i5-2400 CPU @ 3.10GHz&lt;/p&gt;
&lt;p&gt;为4核CPU。&lt;/p&gt;
&lt;p&gt;INTELcore系列CPU每个时钟周期执行浮点运算的次数一般为8次，CPU的主频为3.1G。可以计算得出该CPU的理论浮点值为 3.1&lt;em&gt;4&lt;/em&gt;8=99.2G&lt;/p&gt;
&lt;p&gt;所以该平台的系统的效率为45.41/99.2约45.8%。&lt;/p&gt;
&lt;p&gt;附HPCG（高性能共轭梯度基准测试）&lt;/p&gt;
&lt;p&gt;普通编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget http://www.hpcg-benchmark.org/downloads/hpcg-2.4.tar.gz
#tar zxf hpcg-2.4.tar.gz
#cd hpcg-2.4
#make arch=GCC_OMP
#cd bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hpcg.dat 保持默认即可 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#./xhpcg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多核编译&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#wget  http://www.mpich.org/static/downloads/3.1.3/mpich-3.1.3.tar.gz
#tar zxf mpich-3.1.3.tar.gz
#cd mpich-3.1.3
#./configure
#make
#make install
#wget http://www.hpcg-benchmark.org/downloads/hpcg-2.4.tar.gz
#tar zxf hpcg-2.4.tar.gz
#cd hpcg-2.4
#make  arch=Linux_MPI
#cd bin/
#echo secretword=abc123 &amp;gt; /etc/mpd.conf
#chmod 600 /etc/mpd.conf 
#mpd&amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hpcg.dat 保持默认即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#mpirun -np 2 ./xhpcg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附2. Intel MPI 和 已编译好的linpack测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;解压缩 tar &amp;ndash;zxvf l_mpi_p_3.2.011.tgz

创建安装目录 mkdir /Clusterr/intelmpi ,拷贝license 到解压缩的目录中

执行 ./install.sh

root@mng l_mpi_p_3.1.038]# ./install.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完intel mpi后，使用intel编译好的linpack测试包  将l_lpk_p_10.0.2.010.tgz解压缩 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar &amp;ndash;zxvf l_lpk_p_10.0.2.010.tgz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试方法同上面。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">peng.lee</dc:creator><pubDate>Wed, 12 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-06-12:2013/06/12/linpack/</guid><category>性能测试</category></item><item><title>常用shell命令</title><link>http://king32783784.github.io/2011/01/01/cmds/</link><description>&lt;body&gt;&lt;p&gt;&lt;strong&gt;1.查找大于100M的文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find / -type f -size +100M
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.换行符替换为空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sed ':label;N;s/\n/ /;t label'&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.在文本指定行首加空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Sat, 01 Jan 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2011-01-01:2011/01/01/cmds/</guid><category>shell</category></item><item><title>原子操作</title><link>http://king32783784.github.io/2009/10/10/UNIX/</link><description>&lt;body&gt;&lt;h4 id="zhui-jia-zhi-yi-ge-wen-jian"&gt;追加至一个文件&lt;/h4&gt;
&lt;p&gt;一个进程，将数据添加到一个文件尾端。早期不支持open的O_APPEND选项。所有程序被编写成下列形式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (lseek(fd, 0L, 2 ) &amp;lt; 0) /* position to EOF*/

    err_sys("lseek error");

if (write(fd, buf, 100) != 100) /* and write */

    err_sys("write error");
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单个进程而言，可以正常工作，但若有多个进程同事使用这种方法将数据添加到同一文件，则会产生问题。&lt;/p&gt;
&lt;p&gt;UNIX系统提供了一种方法使这种操作成为原子操作。该方法是在打开文件时设置O_APPEND标志。使内核每次对这种文件进行写之前，都将当前偏移量设置到该文件的尾端处，每次写之前就不在需要调用lseek。&lt;/p&gt;
&lt;h4 id="preadhe-pwritehan-shu"&gt;pread和 pwrite函数&lt;/h4&gt;
&lt;p&gt;原型如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include　＜unistd.h&amp;gt;

ssize_t pread (int filedes, void *buf, size_t nbytes, off_t offset);

返回值：读到的字节数，若已到文件结尾则返回0，若出错则返回-1

ssize_t pwrite(int filedes, const void *buf, size_t nbytes, off_t offset);

若成功，返回已写的字节数，若出错则返回-1
调用pread相当于顺序调用lseek和read,但是pread与这种顺序调用存在区别
调用pread时，无法中断其定位和读写作。
不能更新文件指针
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="chuang-jian-yi-ge-wen-jian"&gt;创建一个文件&lt;/h4&gt;
&lt;p&gt;当用open进行打开文件时，如果该文件已经存在，open将失败。检查文件是否存在和创建该文件这两个操作是作为一个原子操作执行的。如果没有这个原子操作，需要用下面程序段。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if((fd = open(pathname, O_WRONLY)) &amp;lt; 0 ) {

    if （errno == ENOENT) {

        if ((fd = creat(pathname, mode)) &amp;lt; 0)
            err_sys("creat error");
    } else {

        err_sys("open error");

    }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果在open和creat之间，另一个进程创建了该文件，那么就会引起问题。例如，若在这两个函数调用之间，另一个进程创建了该文件，并且写进了一些数据。然后，原先的进程执行这段程序的creat。刚由另一个进程写上去的数据就会被擦除。这样两则合并为一个原子操作，就不会发生该问题。&lt;/p&gt;
&lt;p&gt;一般而言，原子操作，指的是由多步组成的操作，如果操作原子地执行，那么执行完所有步骤，要么不执行，不可能只执行一部分。&lt;/p&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Sat, 10 Oct 2009 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2009-10-10:2009/10/10/UNIX/</guid><category>unix编程</category></item><item><title>排序-希尔排序法</title><link>http://king32783784.github.io/2009/10/01/%E6%8E%92%E5%BA%8F/</link><description>&lt;body&gt;&lt;p&gt;原始的算法实现在最坏的情况下需要进行O(n2)的比较和交换。V. Pratt的书[1] 对算法进行了少量修改，可以使得性能提升至O(n log2 n)。这比最好的比较算法的O(n log n)要差一些。&lt;/p&gt;
&lt;p&gt;希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。&lt;/p&gt;
&lt;p&gt;假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。&lt;/p&gt;
&lt;p&gt;一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序（通过增加索引的步长，例如是用i += step_size而不是i++）。&lt;/p&gt;
&lt;p&gt;例如，假设有这样一组数[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：&lt;/p&gt;
&lt;p&gt;13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10&lt;/p&gt;
&lt;p&gt;然后我们对每列进行排序：&lt;/p&gt;
&lt;p&gt;10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45&lt;/p&gt;
&lt;p&gt;将上述四行数字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ].这时10已经移至正确位置了，然后再以3为步长进行排序：&lt;/p&gt;
&lt;p&gt;10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45&lt;/p&gt;
&lt;p&gt;排序之后变为：&lt;/p&gt;
&lt;p&gt;10 14 13 25 23 33 27 25 59 39 65 73 45 94 82 94&lt;/p&gt;
&lt;p&gt;最后以1步长进行排序（此时就是简单的插入排序了）。 步长串行&lt;/p&gt;
&lt;p&gt;步长的选择是希尔排序的重要部分。只要最终步长为1任何步长串行都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。&lt;/p&gt;
&lt;p&gt;Donald Shell 最初建议步长选择为\frac{n}{2}并且对步长取半直到步长达到 1。虽然这样取可以比\mathcal{O}(n^2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。 可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。 步长串行 最坏情况下复杂度 {n/2^i} \mathcal{O}(n^2) 2^k - 1 \mathcal{O}(n^{3/2}) 2^i 3^j \mathcal{O}( n\log^2 n )&lt;/p&gt;
&lt;p&gt;已知的最好步长串行是由Sedgewick提出的 (1, 5, 19, 41, 109,...)，该串行的项来自 9 * 4^i - 9 * 2^i + 1 和 4^i - 3 * 2^i + 1 这两个算式[1].这项研究也表明&amp;ldquo;比较在希尔排序中是最主要的操作，而不是交换。&amp;rdquo;用这样步长串行的希尔排序比插入排序和堆排序都要快，甚至在小数组中比快速排序还快，但是在涉及大量数据时希尔排序还是比快速排序慢。&lt;/p&gt;
&lt;p&gt;另一个在大数组中表现优异的步长串行是(斐波那契数列除去0和1将剩余的数以黄金分区比的两倍的幂进行运算得到的数列)：（1, 9, 34, 182, 836, 4025, 19001, 90358, 428481, 2034035, 9651787, 45806244, 217378076, 1031612713, &amp;hellip;）[2] 伪代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="n"&gt;numbered&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="err"&gt;&amp;larr;&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="err"&gt;&amp;larr;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="err"&gt;&amp;larr;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="err"&gt;&amp;ge;&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;&amp;larr;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="err"&gt;&amp;larr;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;&amp;larr;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
    &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="err"&gt;&amp;larr;&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C示例代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                     &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
                     &lt;span class="p"&gt;{&lt;/span&gt;
                          &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                          &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                     &lt;span class="p"&gt;}&lt;/span&gt;
                     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;
                 &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C++示例代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shellsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Java中的示例代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shellsort&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Top&lt;a href=""&gt;^&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">penglee</dc:creator><pubDate>Thu, 01 Oct 2009 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2009-10-01:2009/10/01/排序/</guid><category>算法</category></item></channel></rss>