<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Vim.Linux - others</title><link>http://king32783784.github.io/</link><description>Don't know how to develop's testers are not good testers &lt;a href="pages/aboutme.html"&gt;More...&lt;/a&gt;</description><lastBuildDate>Thu, 01 Sep 2016 00:00:00 +0800</lastBuildDate><item><title>北京折叠－郝景芳</title><link>http://king32783784.github.io/2016/09/01/bei-jing-zhe-die-hao-jing-fang/</link><description>&lt;/head&gt;&lt;body&gt;&lt;h2 id="di-yi-mu"&gt;第一幕&lt;/h2&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/W3UPOU6IG2.jpg" width="420"/&gt;&lt;/p&gt;
&lt;p&gt;清晨4:50，老刀穿过熙熙攘攘的步行街，去找彭蠡。&lt;/p&gt;
&lt;p&gt;从垃圾站下班之后，老刀回家洗了个澡，换了衣服。白色衬衫和褐色裤子，这是他唯一一套体面衣服，衬衫袖口磨了边，他把袖子卷到胳膊肘。老刀四十八岁，没结婚，已经过了注意外表的年龄，又没人照顾起居，这一套衣服留着穿了很多年，每次穿一天，回家就脱了叠上。他在垃圾站上班，没必要穿得体面，偶尔参加谁家小孩的婚礼，才拿出来穿在身上。这一次他不想脏兮兮地见陌生人。他在垃圾站连续工作了五小时，很担心身上会有味道。&lt;/p&gt;
&lt;p&gt;步行街上挤满了刚刚下班的人。拥挤的男人女人围着小摊子挑土特产，大声讨价还价。食客围着塑料桌子，埋头在酸辣粉的热气腾腾中，饿虎扑食一般，白色蒸汽遮住了脸。油炸的香味弥漫。货摊上的酸枣和核桃堆成山，腊肉在头顶摇摆。这个点是全天最热闹的时间，基本都收工了，忙碌了几个小时的人们都赶过来吃一顿饱饭，人声鼎沸。&lt;/p&gt;
&lt;p&gt;老刀艰难地穿过人群。端盘子的伙计一边喊着让让一边推开挡道的人，开出一条路来，老刀跟在后面。&lt;/p&gt;
&lt;p&gt;彭蠡家在小街深处。老刀上楼，彭蠡不在家。问邻居，邻居说他每天快到关门才回来，具体几点不清楚 …&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">others</dc:creator><pubDate>Thu, 01 Sep 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-09-01:/2016/09/01/bei-jing-zhe-die-hao-jing-fang/</guid><category>杂文</category></item><item><title>Docker基础技术：Linux Namespace（下）</title><link>http://king32783784.github.io/2016/08/12/Docker/</link><description>&lt;/head&gt;&lt;body&gt;&lt;p&gt;在 &lt;a href="https://king32783784.github.io/lipeng/2016/08/11/Docker/"&gt;Docker基础技术：Linux Namespace（上篇)&lt;/a&gt;中我们了解了，UTD、IPC、PID、Mount 四个namespace，我们模仿Docker做了一个相当相当山寨的镜像。在这一篇中，主要想向大家介绍Linux的User和Network的Namespace。
&lt;img class="img-responsive" height="280" src="https://raw.githubusercontent.com/king32783784/king32783784.github.io/master/tmpfile/Autotest1.png" width="420"/&gt;&lt;/p&gt;
&lt;p&gt;好，下面我们就介绍一下还剩下的这两个Namespace。&lt;/p&gt;
&lt;h4 id="user-namespace"&gt;User Namespace&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;User Namespace&lt;/strong&gt; 主要是用了CLONE_NEWUSER的参数。使用了这个参数后，内部看到的UID和GID已经与外部不同了，默认显示为65534。那是因为容器找不到其真正的UID所以，设置上了最大的UID（其设置定义在/proc/sys/kernel/overflowuid）。&lt;/p&gt;
&lt;p&gt;要把容器中的uid和真实系统的uid给映射在一起，需要修改 &lt;strong&gt;/proc/&lt;pid&gt;/uid_map&lt;/pid&gt;&lt;/strong&gt;  和 &lt;strong&gt;/proc/&lt;pid&gt;/gid_map&lt;/pid&gt;&lt;/strong&gt; 这两个文件。这两个文件的格式为：&lt;/p&gt;
&lt;p&gt;ID-inside-ns ID-outside-ns length&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个字段ID-inside-ns表示在容器显示的UID或GID，&lt;/li&gt;
&lt;li&gt;第二个字段ID-outside-ns表示容器外映射的真实的UID或GID。&lt;/li&gt;
&lt;li&gt;第三个字段表示映射的范围，一般填1，表示一一对应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如 …&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">others</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-12:/2016/08/12/Docker/</guid><category>Docker</category></item><item><title>Docker基础技术：Linux Namespace（上）</title><link>http://king32783784.github.io/2016/08/11/Docker/</link><description>&lt;/head&gt;&lt;body&gt;&lt;p&gt;时下最热的技术莫过于Docker了，很多人都觉得Docker是个新技术，其实不然，Docker除了其编程语言用go比较新外，其实它还真不是个新东西，也就是个新瓶装旧酒的东西，所谓的The New “Old Stuff”。Docker和Docker衍生的东西用到了很多很酷的技术，我会用几篇 文章来把这些技术给大家做个介绍，希望通过这些文章大家可以自己打造一个山寨版的docker。&lt;/p&gt;
&lt;p&gt;&lt;img class="img-responsive" height="280" src="https://d2lm6fxwu08ot6.cloudfront.net/img-thumbs/280h/PYHO3G128V.jpg" width="420"/&gt;&lt;/p&gt;
&lt;p&gt;当然，文章的风格一定会尊重时下的“流行”——我们再也没有整块整块的时间去看书去专研，而我们只有看微博微信那样的碎片时间（那怕我们有整块的时间，也被那些在手机上的APP碎片化了）。所以，这些文章的风格必然坚持“马桶风格”（希望简单到占用你拉一泡屎就时间，而且你还不用动脑子，并能学到些东西）&lt;/p&gt;
&lt;p&gt;废话少说，我们开始。先从Linux Namespace开始。&lt;/p&gt;
&lt;h4 id="jian-jie"&gt;简介&lt;/h4&gt;
&lt;p&gt;Linux Namespace是Linux提供的一种内核级别环境隔离的方法。不知道你是否还记得很早以前的Unix有一个叫chroot的系统调用（通过修改根目录把用户jail到一个特定目录下），chroot提供了一种简单的隔离模式：chroot内部的文件系统无法访问外部的内容。Linux Namespace在此基础上，提供了对UTS、IPC、mount、PID、network、User等的隔离机制。&lt;/p&gt;
&lt;p&gt;举个例子，我们都知道，Linux下的超级父亲进程的PID是1，所以 …&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">others</dc:creator><pubDate>Thu, 11 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-11:/2016/08/11/Docker/</guid><category>Docker</category></item><item><title>如何做性能测试</title><link>http://king32783784.github.io/2016/08/11/Performance/</link><description>&lt;/head&gt;&lt;body&gt;&lt;p&gt;偶然间看到了阿里中间件Dubbo的性能测试报告，我觉得这份性能测试报告让人觉得做这性能测试的人根本不懂性能测试，我觉得这份报告会把大众带沟里去，所以，想写下这篇文章，做一点科普。&lt;/p&gt;
&lt;p&gt;首先，这份测试报告里的主要问题如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用的全是平均值。老实说，平均值是非常不靠谱的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应时间没有和吞吐量TPS/QPS挂钩。而只是测试了低速率的情况，这是完全错误的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应时间和吞吐量没有和成功率挂钩。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="wei-shi-yao-ping-jun-zhi-bu-kao-pu"&gt;为什么平均值不靠谱&lt;/h4&gt;
&lt;p&gt;关于平均值为什么不靠谱，我相信大家读新闻的时候经常可以看到，&lt;strong&gt;平均工资&lt;/strong&gt;，&lt;strong&gt;平均房价&lt;/strong&gt;，&lt;strong&gt;平均支出&lt;/strong&gt;，等等这样的字眼，你就知道为什么平均值不靠谱了。（这些都是数学游戏，对于理工科的同学来说，天生应该有免疫力）&lt;/p&gt;
&lt;p&gt;软件的性能测试也一样，平均数也是不靠谱的，这里可以参看这篇详细的文章《Why Averages Suck and Percentiles are Great》，我在这里简单说一下。&lt;/p&gt;
&lt;p&gt;我们知道，性能测试时，测试得到的结果数据不总是一样的，而是有高有低的，如果算平均值就会出现这样的情况，假如，&lt;strong&gt;测试了10次，有9次是1ms，而有1次是1s，那么平均数据就是100ms，很明显，这完全不能反应性能测试的情况 …&lt;/strong&gt;&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">others</dc:creator><pubDate>Thu, 11 Aug 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2016-08-11:/2016/08/11/Performance/</guid><category>性能测试</category></item><item><title>Makefile中文手册</title><link>http://king32783784.github.io/2013/08/01/Makefile/</link><description>&lt;/head&gt;&lt;body&gt;&lt;h4 id="yi-gai-shu"&gt;一 概述&lt;/h4&gt;
&lt;p&gt;什么是makefile？或许很多Winodws的程序员都不知道这个东西，因为那些Windows的IDE都为你做了这个工作，但我觉得要作一个好的和 professional的程序员，makefile还是要懂。这就好像现在有这么多的HTML的编辑器，但如果你想成为一个专业人士，你还是要了解HTML的标识的含义。特别在Unix下的软件编译，你就不能不自己写makefile了，会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。&lt;/p&gt;
&lt;p&gt;因为，makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。&lt;/p&gt;
&lt;p&gt;makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法。&lt;/p&gt;
&lt;p&gt;现在讲述如何写 makefile的文章比较少，这是我想写这篇文章的原因 …&lt;/p&gt;&lt;/body&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">others</dc:creator><pubDate>Thu, 01 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:king32783784.github.io,2013-08-01:/2013/08/01/Makefile/</guid><category>Makefile</category></item></channel></rss>